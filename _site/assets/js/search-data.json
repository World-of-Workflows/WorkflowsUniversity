{"0": {
    "doc": "Reporting",
    "title": "Reporting",
    "content": "This section of the documentation covers the reporting features of Workflows PE. World of Workflows PE stores its data in a SQLite database. In a default configuration, this will be located in the following location: . C:\\Windows\\System32\\App_data\\worldofworkflows1_1.db . In that folder are also regular backups which are automatically taken every time the World of Workflows Service starts and stops. ",
    "url": "/docs/reporting/README.html",
    
    "relUrl": "/docs/reporting/README.html"
  },"1": {
    "doc": "Reporting",
    "title": "Prerequisites",
    "content": "To report on the database, you will need to install and configure the Sqlite ODBC Driver. Please download and run the appropriate one for your system: . | For x86 machines, download the 32-bit ODBC Driver | For x64 machines, download the 64-bit ODBC Driver | . ",
    "url": "/docs/reporting/README.html#prerequisites",
    
    "relUrl": "/docs/reporting/README.html#prerequisites"
  },"2": {
    "doc": "Reporting",
    "title": "Backup your database",
    "content": "To report on a database, we strongly recommend you take a copy of your database, using the following simple procedure. | Stop the World of Workflows Service . | Open Services manager - Windows Key - R - services.msc | Scroll down to find World of Workflows | Click Stop | . | Copy the database somewhere else and record this location | Click Start to restart World of Workflows. | . ",
    "url": "/docs/reporting/README.html#backup-your-database",
    
    "relUrl": "/docs/reporting/README.html#backup-your-database"
  },"3": {
    "doc": "Reporting",
    "title": "Configure your DSN",
    "content": "To configure the connection, click Start and type ODBC. For x86 machines, choose ODBC Data Sources (32-bit). For x64 machines, choose ODBC Data Sources (64-bit). Click Add . Choose SQLite3 ODBC Driver and click Finish . In the Data Source Name field, enter a name for your connection. This can be anything you like, but we recommend you use WowF. Click Browse and navigate to the database file you saved earlier. When done, click Ok. ",
    "url": "/docs/reporting/README.html#configure-your-dsn",
    
    "relUrl": "/docs/reporting/README.html#configure-your-dsn"
  },"4": {
    "doc": "Reporting",
    "title": "Reporting in PowerBI",
    "content": "If you don’t have PowerBI, you can download it for free from here. Once you have PowerBI installed, you can connect to your database using the DSN you created earlier. | Open PowerBI | Click Get Data | Choose ODBC | Select your DSN Created above | Enter any username and click Connect | Choose the tables you want to report on and click Load | . You can now report on World of Workflows using PowerBI. All relationships will be preserved. ",
    "url": "/docs/reporting/README.html#reporting-in-powerbi",
    
    "relUrl": "/docs/reporting/README.html#reporting-in-powerbi"
  },"5": {
    "doc": "AI Prospector",
    "title": "AI prospector",
    "content": "Available for Workflows Versions 1.3.440 and above Supports Workflows Business, Enterprise and PE . ",
    "url": "/docs/solutions/AIProspector/README.html#ai-prospector",
    
    "relUrl": "/docs/solutions/AIProspector/README.html#ai-prospector"
  },"6": {
    "doc": "AI Prospector",
    "title": "Prerequisites",
    "content": ". | Open AI Developer Account - To create a new Open AI Developer Account, see here | Office 365 Registered Application - To register a new office 365 application for World of Workflows, see here | . ",
    "url": "/docs/solutions/AIProspector/README.html#prerequisites",
    
    "relUrl": "/docs/solutions/AIProspector/README.html#prerequisites"
  },"7": {
    "doc": "AI Prospector",
    "title": "Installation",
    "content": "1. Create Data Types and Date . | Open World of Workflows | Navigate to Admin | Click Import | Choose the file Leads.csv from here | Click Next | Accept the defaults and click Next | Click New for the following fields (and ensure Title has Is Title checked) . | Title | FirstName | LastName | Email | Prospect Description | Value | . | Click Next | Click Import | . 2. Create the Workflow . | Open World of Workflows | Navigate to Admin | Click Workflows | Click Create Workflow | Select the Publish drop down (bottom right) and click Import | Choose the file AI Prospector.json from here | Click Publish | . 3. Create Credentials . | Open World of Workflows | Navigate to Admin | Navigate to Workflows | Click Credential Manager | . Chat GPT Key . | Click Add New | Choose Authorization | Enter the following: . | Name: GPTIII | Authorization: Bearer xxx where xxx is your Open AI API Key available here: https://platform.openai.com/account/api-keys | . | Click Save | . Office 365 Credentials . | Click Add New | Choose OAuth2 credentials | Enter the following: . | Name: Office 365 | Type: OAuth2 credentials | Grant Type: Authorization Code | Authorization URL: Your authorization URL from here | Access Token URL: Your access token URL from here | Client ID: Your client Id from here | Client Secret: Your client secret from here | Scope offline_access mail.read mail.send | . | Click Authorize | Enter your credentials and follow the prompts | Click Save | . Connect Workflow to Credentials . | Open World of Workflows | Navigate to Admin | Navigate to Workflows | Click RunGPT3 | Find the Activity Runs when a lead is selected in the UI | Right Click and Choose Edit | Ensure the object Type Id is Lead | Click Save | Find the Activity Send Request to ChatGPT | Right Click and Choose Edit | Click the Advanced tab | Drop down Authorization and change to GPTIII | Click Save | Find the activity Send the Email from ChatGPT… | Right Click and Choose Edit. | Repalce nick@tribetech.com.au and nick@releasedgroup.com with your own email address | Click the Advanced Tab | Change Authorization to Office 365 and click Save | Click Publish | . ",
    "url": "/docs/solutions/AIProspector/README.html#installation",
    
    "relUrl": "/docs/solutions/AIProspector/README.html#installation"
  },"8": {
    "doc": "AI Prospector",
    "title": "Run a workflow",
    "content": ". | Open World of Workflows | Navigate to Admin | Navigate to Types | Click Lead | Cick Lead 1 | Navigate to the Workflows Tab | Find RunGPT3 and click Play | Check your email for an email from yourself with a message about World of workflows. | . ",
    "url": "/docs/solutions/AIProspector/README.html#run-a-workflow",
    
    "relUrl": "/docs/solutions/AIProspector/README.html#run-a-workflow"
  },"9": {
    "doc": "AI Prospector",
    "title": "AI Prospector",
    "content": " ",
    "url": "/docs/solutions/AIProspector/README.html",
    
    "relUrl": "/docs/solutions/AIProspector/README.html"
  },"10": {
    "doc": "Solutions",
    "title": "Solutions",
    "content": "Solutions are unique packages that include workflows and configurations to ensure that you can run workflows. The following solutions are available for World of Workflows . | AI Prospector - This Solution uses Office 365 and ChatGPT to send out interesting emails to your leads inviting them to meet and interact with World of Workflows. You can customize this to whatever you want. | . ",
    "url": "/docs/solutions/README.html",
    
    "relUrl": "/docs/solutions/README.html"
  },"11": {
    "doc": "Tasks",
    "title": "Tasks",
    "content": "The Task system is one of the key aspects of World of Workflows and is commonly the only part of the platform your Users will see. It consists of two main areas: . ",
    "url": "/docs/tasks/README.html",
    
    "relUrl": "/docs/tasks/README.html"
  },"12": {
    "doc": "Tasks",
    "title": "The Task Queue",
    "content": "The task queue is a place where all the available tasks for an end user are displayed. This is filtered by the Users’ capabilities and ensures they only see tasks configured for staff with their capabilities. Users pick tasks from the task queue to enter their own to-do list and proceed to work through their to-do list. ",
    "url": "/docs/tasks/README.html#the-task-queue",
    
    "relUrl": "/docs/tasks/README.html#the-task-queue"
  },"13": {
    "doc": "Tasks",
    "title": "The Task Pane",
    "content": "The Task Pane shows the details of a task and has 6 main areas: . | Title | Description | Data Entry | Default Actions | Custom Actions | Additional Information | . ",
    "url": "/docs/tasks/README.html#the-task-pane",
    
    "relUrl": "/docs/tasks/README.html#the-task-pane"
  },"14": {
    "doc": "Tasks",
    "title": "Working with Tasks",
    "content": "End users are expected to use the task system as an advanced to-do list. They pick tasks from the task queue and work through them. The task pane shows the details of the task and allows them to enter data and perform actions. | Opening the Task Pane | Pick a Task | Working with a task | . ",
    "url": "/docs/tasks/README.html#working-with-tasks",
    
    "relUrl": "/docs/tasks/README.html#working-with-tasks"
  },"15": {
    "doc": "Tasks",
    "title": "Working with the All tasks View",
    "content": ". | Opening the View | . ",
    "url": "/docs/tasks/README.html#working-with-the-all-tasks-view",
    
    "relUrl": "/docs/tasks/README.html#working-with-the-all-tasks-view"
  },"16": {
    "doc": "Liquid Reference",
    "title": "Liquid Reference",
    "content": "Liquid is an open-source template language created by Shopify and written in Ruby. It is the backbone of Shopify themes and is used to load dynamic content on storefronts. Liquid has been in production use at Shopify since 2006 and is now used by many other hosted web applications. The following sections contain information about the Liquid template language. ",
    "url": "/docs/liquid/README.html",
    
    "relUrl": "/docs/liquid/README.html"
  },"17": {
    "doc": "Workflow Development",
    "title": "Workflow Development",
    "content": "In order to work effectively with workflow development World of Workflows, it’s important to understand its terminology. Below is a list of words that represent important concepts used in Elsa. ",
    "url": "/docs/workflow-development/README.html",
    
    "relUrl": "/docs/workflow-development/README.html"
  },"18": {
    "doc": "Workflow Development",
    "title": "Workflow",
    "content": "A workflow consists of a series of steps called activities that are connected to one another. A workflow maintains all sorts of information, such as the following: . | Which activity is currently executing. | What variables are set. | What activities are blocking further execution. | . Once an activity is done executing, the workflow checks its outcome and if there’s another activity connected to it. If so, that activity is scheduled for execution. This goes on until there are either no more activities to execute, or an activity is encountered that instructs the workflow runner to suspend the workflow. ",
    "url": "/docs/workflow-development/README.html#workflow",
    
    "relUrl": "/docs/workflow-development/README.html#workflow"
  },"19": {
    "doc": "Workflow Development",
    "title": "Activity",
    "content": "An activity is an atomic building block that represents a single executable step on the workflow. Activities can do all sorts of things and take input from you and provide output. ",
    "url": "/docs/workflow-development/README.html#activity",
    
    "relUrl": "/docs/workflow-development/README.html#activity"
  },"20": {
    "doc": "Workflow Development",
    "title": "Starting Activity",
    "content": "An activity which is the starting point of the workflow and does not have any inbound connections. They are the entry points to the workflow. ",
    "url": "/docs/workflow-development/README.html#starting-activity",
    
    "relUrl": "/docs/workflow-development/README.html#starting-activity"
  },"21": {
    "doc": "Workflow Development",
    "title": "Blocking Activity",
    "content": "When an activity runs, it returns an activity execution result. There are various possible results that can be returned, but the most commonly used ones are Done, Outcomes and Suspend. When Suspend is returned (as is typically the case with blocking activities), the workflow will enter the Suspended state and the activity will be registered as a blocking activity. ",
    "url": "/docs/workflow-development/README.html#blocking-activity",
    
    "relUrl": "/docs/workflow-development/README.html#blocking-activity"
  },"22": {
    "doc": "Workflow Development",
    "title": "Suspended Workflow",
    "content": "Suspended workflows are blocked by one or more blocking activities. The only way to resume such a workflow is to trigger it with the name of one of the blocking activities. ",
    "url": "/docs/workflow-development/README.html#suspended-workflow",
    
    "relUrl": "/docs/workflow-development/README.html#suspended-workflow"
  },"23": {
    "doc": "Workflow Development",
    "title": "Connection",
    "content": "A connection represents a connection between two activities. This is how the workflow runner knows what activities to execute next. A connection between two activities holds 3 pieces of information: . | The source activity ID. | The source outcome name (e.g. Done). | The target activity ID. | . For each possible outcome of a given activity, a connection can be established from that outcome to another activity. For example, let’s say we have a workflow with three activities called Activity A, Activity B and Activity C. Activity A has 2 outcomes called Done and Failed, and we wish to connect the Done outcome to Activity B and Failed to Activity C. This means we need the following two connections: . Connection 1 . | Source: Activity A | Outcome: Done | Destination: Activity B | . Connection 2 . | Source: Activity A | Outcome: Failed | Destination: Activity C | . Visually, this would look like this: . ",
    "url": "/docs/workflow-development/README.html#connection",
    
    "relUrl": "/docs/workflow-development/README.html#connection"
  },"24": {
    "doc": "Workflow Development",
    "title": "Long Running Workflows",
    "content": "A long-running workflow is a workflow that doesn’t run from start to end in one go. Instead, it might have one or more blocking activities that will instruct the workflow engine to suspend the workflow until it receives the appropriate stimulus to resume execution. ",
    "url": "/docs/workflow-development/README.html#long-running-workflows",
    
    "relUrl": "/docs/workflow-development/README.html#long-running-workflows"
  },"25": {
    "doc": "Workflow Development",
    "title": "Short Running Workflows",
    "content": "A short-running workflow is a workflow that, in contrast to long-running workflows, does run from start to end in one go. ",
    "url": "/docs/workflow-development/README.html#short-running-workflows",
    
    "relUrl": "/docs/workflow-development/README.html#short-running-workflows"
  },"26": {
    "doc": "Workflow Development",
    "title": "Burst of Execution",
    "content": "A burst of execution refers to the execution of a sequence of activities one after another until either one of the following occurs: . | No more activities were scheduled (the end of the workflow was reached), or | A blocking activity was encountered. | . ",
    "url": "/docs/workflow-development/README.html#burst-of-execution",
    
    "relUrl": "/docs/workflow-development/README.html#burst-of-execution"
  },"27": {
    "doc": "Workflow Development",
    "title": "Workflow Variables",
    "content": "Every workflow instance can have a set of workflow variables. A workflow variable is a simple key/value pair stored as part of the workflow instance, and is useful to store information that can later be used by other activities. ",
    "url": "/docs/workflow-development/README.html#workflow-variables",
    
    "relUrl": "/docs/workflow-development/README.html#workflow-variables"
  },"28": {
    "doc": "Workflow Development",
    "title": "Default Variables",
    "content": "Although variables can be created on the fly within a workflow as it executes, you can declare variables up-front on the workflow definition itself. ",
    "url": "/docs/workflow-development/README.html#default-variables",
    
    "relUrl": "/docs/workflow-development/README.html#default-variables"
  },"29": {
    "doc": "Workflow Development",
    "title": "In this section",
    "content": ". | Creating a Workflow | Editing a Workflow | Starting Workflows | . ",
    "url": "/docs/workflow-development/README.html#in-this-section",
    
    "relUrl": "/docs/workflow-development/README.html#in-this-section"
  },"30": {
    "doc": "Working with Data",
    "title": "Working with Data",
    "content": "World of Workflows comes with a highly performant and extensible data engine. This allows you to store data in a variety of ways, and to use that data in your workflows. Data is stored as types. These are like a spreadsheet. Rows are instances of the data and columns are properties of the data. ",
    "url": "/docs/data/README.html",
    
    "relUrl": "/docs/data/README.html"
  },"31": {
    "doc": "Working with Data",
    "title": "To create a new type",
    "content": ". | Navigate to Admin then Types | Click Add Type | Give the Type a Name and Description | Click Save | . ",
    "url": "/docs/data/README.html#to-create-a-new-type",
    
    "relUrl": "/docs/data/README.html#to-create-a-new-type"
  },"32": {
    "doc": "Working with Data",
    "title": "To Create a new Column",
    "content": ". | Navigate to Admin then Types | Click Columns on the type you wish to add a column for | Click Add Column Enter the following information: . | Column Name - This should ideally have no spaces and use uppercase and lowercase letters only | Display Name - This should be a human-readable name for the column | Description - This should describe what you want to store in this column | Data Type - World of Workflows understands several data types, which ensure your data is formatted and stored correctly. Enter one of the following data types: . | Reference - This is a reference to another type. This is useful for creating relationships between types. | Big Integer - This is a whole number. It can be positive or negative and be between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807. | Integer - This is a whole number. It can be positive or negative and be between -2,147,483,648 to 2,147,483,647. | Decimal 2 - This is a decimal number with 2 decimal places useful for storing currency values. | Decimal 5 - This is a decimal number with 5 decimal places useful for floating point numbers. | True/False - This is a boolean value. It can be either true or false. | String - This is a string of text. It can be any length. | DateTime - This is a date and time value, stored as UTC and presented in local time. | Url - This is a string that is presented as a hyperlink. | Embed - This is a string that is presented as an embedded object. | . | Display Order - This determines which order the fields are shown. | Visible - This determines whether or not the field will be visible in the data editor. | Indexed - This determines whether the system will index the field to make it quicker to search and filter. | . | . ",
    "url": "/docs/data/README.html#to-create-a-new-column",
    
    "relUrl": "/docs/data/README.html#to-create-a-new-column"
  },"33": {
    "doc": "Activities",
    "title": "Reference Guide",
    "content": "The reference guide gives comprehensive information on the components that can be used to create workflows. ",
    "url": "/docs/activity-guide.html#reference-guide",
    
    "relUrl": "/docs/activity-guide.html#reference-guide"
  },"34": {
    "doc": "Activities",
    "title": "Table of Contents",
    "content": ". | Reference Guide | Table of Contents . | Activities . | Random Number . | Input Parameters | Output Parameters | . | Read Line . | Output Parameters | Outcomes | . | Write Line . | Input Parameters | Outcomes | . | Open Browser . | Input Parameters | Output Parameters | Outcomes | . | Close Browser . | Input Parameters | Outcomes | . | Navigate to Url . | Input Parameters | Outcomes | . | Click Element . | Input Parameters | Outcomes | . | Type Text . | Input Parameters | Outcomes | . | Get Text . | Input Parameters | Outcomes | . | Send Email . | Input Parameters | Output Parameters | Outcomes | . | Entity Changed . | Input Parameters | Output Parameters | Outcomes | . | Delete File . | Input Parameters | Outcomes | . | Enumerate Files . | Input Parameters | Output Parameters | Outcomes | . | File Exists . | Input Parameters | Outcomes | . | Out File . | Input Parameters | Outcomes | . | Read File . | Input Parameters | Output Parameters | Outcomes | . | Temp File . | Output Parameters | Outcomes | . | Watch Directory . | Input Parameters | Output Parameters | Outcomes | . | Cron . | Input Parameters | Outcomes | . | Timer . | Input Parameters | Outcomes | . | Start at . | Input Parameters | Outcomes | . | Clear Timer . | Input Parameters | Outcomes | . | HTTP Endpoint . | Input Parameters | Output Parameters | Outcomes | . | HTTP Response . | Input Parameters | Outcomes | . | Send HTTP Request . | Input Parameters | Output Parameters | Outcomes | . | Redirect . | Input Parameters | Outcomes | . | Run JavaScript . | Input Parameters | Output Parameters | Outcomes | . | Capability Create . | Input Parameters | Output Parameters | Outcomes | . | Capabilities Get List . | Input Parameters | Output Parameters | Outcomes | . | Data Type Add . | Input Parameters | Output Parameters | Outcomes | . | DataTypes get List . | Output Parameters | Outcomes | . | Entity Created . | Input Parameters | Output Parameters | Outcomes | . | Entity Updated . | Input Parameters | Output Parameters | Outcomes | . | Object Create . | Input Parameters | Output Parameters | Outcomes | . | Object Create, Set, Promote to Variable . | Input Parameters | Output Parameters | Outcomes | . | Object Detail Create . | Input Parameters | Output Parameters | Outcomes | . | Object Detail Create and Promote . | Input Parameters | Output Parameters | Outcomes | . | Object Detail Get . | Input Parameters | Output Parameters | Outcomes | . | Object Detail Promote . | Input Parameters | Output Parameters | Outcomes | . | Object Detail To Variable . | Input Parameters | Outcomes | . | Objects Get List by Type . | Input Parameters | Output Parameters | Outcomes | . | Objects get list with Query . | Input Parameters | Output Parameters | Outcomes | . | Object Update . | Output Parameters | Outcomes | . | Object Rename . | Input Parameters | Output Parameters | Outcomes | . | Task Ask Simple Question and Wait . | Input Parameters | Output Parameters | Outcomes | . | Task Create . | Input Parameters | Output Parameters | Outcomes | . | Task Create and Wait . | Input Parameters | Output Parameters | Outcomes | . | Task Delete . | Input Parameters | Output Parameters | Outcomes | . | Task detail add . | Input Parameters | Output Parameters | Outcomes | . | Task details get list . | Input Parameters | Output Parameters | Outcomes | . | Tasks get list . | Input Parameters | Output Parameters | Outcomes | . | Task Update . | Input Parameters | Output Parameters | Outcomes | . | Type add Column . | Input Parameters | Output Parameters | Outcomes | . | Type add index . | Input Parameters | Output Parameters | Outcomes | . | Type Create . | Input Parameters | Output Parameters | Outcomes | . | Type Delete . | Input Parameters | Outcomes | . | Type get columns . | Input Parameters | Output Parameters | Outcomes | . | Types Get List . | Output Parameters | Outcomes | . | Type Remove Index . | Input Parameters | Output Parameters | Outcomes | . | User Add . | Input Parameters | Output Parameters | Outcomes | . | User Capability Add . | Input Parameters | Output Parameters | Outcomes | . | Capability Remove . | Input Parameters | Output Parameters | Outcomes | . | Users Get List . | Input Parameters | Output Parameters | Outcomes | . | User Update . | Input Parameters | Output Parameters | Outcomes | . | JotForm Parse . | Input Parameters | Output Parameters | Outcomes | . | Quick Data Insert . | Input Parameters | Output Parameters | Outcomes | . | Get Customers . | Input Parameters | Output Parameters | Outcomes | . | Get Customer Rep . | Input Parameters | Output Parameters | Outcomes | . | Run Workflow . | Input Parameters | Output Parameters | Outcomes | . | Workflow . | Output Parameters | Outcomes | . | State . | Input Parameters | Outcomes | . | Interrupt Trigger . | Input Parameters | Outcomes | . | Send Signal . | Input Parameters | Outcomes | . | Signal Received . | Input Parameters | Output Parameters | Outcomes | . | Fault . | Input Parameters | Outcomes | . | Inline . | Input Parameters | Outcomes | . | Set Context ID . | Input Parameters | Outcomes | . | Set Name . | Input Parameters | Outcomes | . | Set Transient Variable . | Input Parameters | Outcomes | . | Set Variable . | Input Parameters | Outcomes | . | Correlate . | Input Parameters | Output Parameters | Outcomes | . | Break . | Outcomes | . | Finish . | Input Parameters | Output Parameters | Outcomes | . | For Each . | Input Parameters | Output Parameters | Outcomes | . | Fork . | Input Parameters | Outcomes | . | For . | Input Parameters | Output Parameters | Outcomes | . | If/Else . | Input Parameters | Outcomes | . | Join . | Input Parameters | Outcomes | . | Parallel for Each . | Input Parameters | Outcomes | . | Switch . | Input Parameters | Outcomes | . | While . | Input Parameters | Outcomes | . | Compensable . | Outcomes | . | Compensate . | Input Parameters | Outcomes | . | Confirm . | Input Parameters | Outcomes | . | Composite Activity . | Output Parameters | Outcomes | . | . | . | . ",
    "url": "/docs/activity-guide.html#table-of-contents",
    
    "relUrl": "/docs/activity-guide.html#table-of-contents"
  },"35": {
    "doc": "Activities",
    "title": "Activities",
    "content": "The following workflow activities are available: . Read Line . Read text from standard in. Category: Console . There are no input parameters . Output Parameters . | Name | Type | Hint | . | Output | System.String |   | . Outcomes . | Done | . Write Line . Write text to standard out. Category: Console . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Text | System.String | Text | The text to write. | False | True | . There are no Output parameters . Outcomes . | Done | . Open Browser . Opens a new instance of a browser . Category: Rpa.Web . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | UseHeadless | System.Boolean | Use Headless | Open browser in headless mode. Headless means no GUI will be displayed. Often times headless mode is required due to lack of an interactive automation session such as when using Docker or Linux. When running Elsa in an interactive session (e.g. from desktop) you can set this parameter to false and browser GUI will show up | False | True | . | BrowserType | System.String | Browser Type | The browser to use | False | True | . Output Parameters . | Name | Type | Hint | . | DriverId | System.String | The driver ID that should be used in other activities to use this window | . Outcomes . | Done | . Close Browser . Closes a instance of a browser . Category: Rpa.Web . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | DriverId | System.String | Driver Id | The driver ID assigned when instantiating the browser. You can use JS functions to retrieve it such as: getVariable() function or activities.{OpenBrowserActivityName}.driverId | False | True | . There are no Output parameters . Outcomes . | Done | . Navigate to Url . Navigates to a URL . Category: Rpa.Web . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Url | System.String | Url | The URL to navigate to | False | True | . | DriverId | System.String | Driver Id | The driver ID assigned when instantiating the browser. You can use JS functions to retrieve it such as: getVariable() function or activities.{OpenBrowserActivityName}.driverId | False | True | . There are no Output parameters . Outcomes . | Done | . Click Element . Clicks an element in the GUI . Category: Rpa.Web . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | UseJavascriptClick | System.Nullable`1[System.Boolean] | Use Javascript Click | Indicates whether not to perform an interactive click but just emulates a click via javascript call | False | True | . | SelectorType | System.String | Selector Type | The type of selector to be used to identity the element | False | True | . | SelectorValue | System.String | Selector Value | The selector value depends on SelectorType | False | True | . | DriverId | System.String | Driver Id | The driver ID assigned when instantiating the browser. You can use JS functions to retrieve it such as: getVariable() function or activities.{OpenBrowserActivityName}.driverId | False | True | . There are no Output parameters . Outcomes . | Done | . Type Text . Clicks an element in the GUI . Category: Rpa.Web . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | UseJavascript | System.Nullable`1[System.Boolean] | Use Javascript | Indicates whether not to perform an interactive typing but just emulates a injecting text via javascript | False | True | . | Text | System.String | Text |   | False | True | . | SelectorType | System.String | Selector Type | The type of selector to be used to identity the element | False | True | . | SelectorValue | System.String | Selector Value | The selector value depends on SelectorType | False | True | . | DriverId | System.String | Driver Id | The driver ID assigned when instantiating the browser. You can use JS functions to retrieve it such as: getVariable() function or activities.{OpenBrowserActivityName}.driverId | False | True | . There are no Output parameters . Outcomes . | Done | . Get Text . Extracts text from an element . Category: Rpa.Web . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | SelectorType | System.String | Selector Type | The type of selector to be used to identity the element | False | True | . | SelectorValue | System.String | Selector Value | The selector value depends on SelectorType | False | True | . | DriverId | System.String | Driver Id | The driver ID assigned when instantiating the browser. You can use JS functions to retrieve it such as: getVariable() function or activities.{OpenBrowserActivityName}.driverId | False | True | . There are no Output parameters . Outcomes . | Done | . Send Email . Send an email message. Category: Email . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | From | System.String | From | The sender’s email address. | False | True | . | To | System.Collections.Generic.ICollection`1[System.String] | To | The recipients email addresses. | False | True | . | Cc | System.Collections.Generic.ICollection`1[System.String] | Cc | The cc recipients email addresses. | False | True | . | Bcc | System.Collections.Generic.ICollection`1[System.String] | Bcc | The Bcc recipients email addresses. | False | True | . | Subject | System.String | Subject | The subject of the email message. | False | True | . | Attachments | System.Object | Attachments | The attachments to send with the email message. Can be (an array of) a fully-qualified file path, URL, stream, byte array or instances of EmailAttachment. | False | True | . | Body | System.String | Body | The body of the email message. | False | True | . Output Parameters . | Name | Type | Hint | . | ResponseContent | System.Object |   | . Outcomes . | Done | Unexpected Error | . Entity Changed . Triggers when an entity was added, updated or deleted. Category: Entity . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | EntityName | System.String | Entity Name | The Entity Name to observe. Matches any entity if no value is specified. | False | True | . | Action | System.Nullable`1[Elsa.Activities.Entity.EntityChangedAction] | Action | The Entity Changed Action to observe. Matches any action if no value is specified. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | System.Object |   | . Outcomes . | Done | . Delete File . Deletes file at specified location . Category: File . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Path | System.String | Path | Path of the file to delete. | False | True | . There are no Output parameters . Outcomes . | Done | . Enumerate Files . Enumerates files in a given folder . Category: File . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Path | System.String | Path | Path of the folder to enumerate files. | False | True | . | Pattern | System.String | Pattern | Pattern for files to return. | False | True | . | IgnoreInaccessible | System.Boolean | Ignore Inaccessible | Ignore inaccessible files. | False | True | . | MatchCasing | System.IO.MatchCasing | Match Casing | Set case sensitivity. | False | True | . | SubDirectories | System.Boolean | Sub Directories | Return files from sub directories | False | True | . Output Parameters . | Name | Type | Hint | . | Files | System.Collections.Generic.IEnumerable`1[System.String] | List of files. | . Outcomes . | Done | . File Exists . Checks if a file exists . Category: File . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Path | System.String | Path | Path of the file to check. | False | True | . There are no Output parameters . Outcomes . | True | False | . Out File . Output input value to specified location . Category: File . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Bytes | System.Byte[] | Bytes | Bytes to write to file. | False | True | . | Path | System.String | Path | Path to create file at. | False | True | . | Mode | Elsa.Activities.File.CopyMode | Mode | How the output file should be written. | False | True | . There are no Output parameters . Outcomes . | Done | . Read File . Output input value to specified location . Category: File . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Path | System.String | Path | Path to read content from. | False | True | . Output Parameters . | Name | Type | Hint | . | Bytes | System.Byte[] | Bytes of the file read. | . Outcomes . | Done | . Temp File . Created a temporary file and returns its path . Category: File . There are no input parameters . Output Parameters . | Name | Type | Hint | . | Path | System.String | Path of the created temporary file. | . Outcomes . | Done | . Watch Directory . Triggers when files are created/modified in the given folder . Category: File . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Path | System.String | Path | The path of the directory to watch | False | True | . | Pattern | System.String | Pattern | The file pattern for interested files | False | True | . | ChangeTypes | System.IO.WatcherChangeTypes | Change Types | The types of file system events to subscribe to | False | True | . | NotifyFilters | System.IO.NotifyFilters | Notify Filters |   | False | True | . Output Parameters . | Name | Type | Hint | . | Output | Elsa.Activities.File.Models.FileSystemEvent |   | . Outcomes . | Done | . Cron . Triggers periodically based on a specified CRON expression. Category: Timers . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | CronExpression | System.String | Cron Expression | Specify a Quartz CRON expression. Go to https://www.freeformatter.com/cron-expression-generator-quartz.html to generate valid Quartz cron expressions. | False | True | . There are no Output parameters . Outcomes . | Done | . Timer . Triggers at a specified interval. Category: Timers . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Timeout | NodaTime.Duration | Timeout | The time interval at which this activity should tick. | False | True | . There are no Output parameters . Outcomes . | Done | . Start at . Triggers at a specified moment in time. Category: Timers . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Instant | NodaTime.Instant | Instant | An instant in the future at which this activity should execute. | False | True | . There are no Output parameters . Outcomes . | Done | . Clear Timer . Cancel a timer (Cron, StartAt, Timer) so that it is not executed. Category: Timers . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ActivityId | System.String | Activity Id | The ID of the timer (Cron, StartAt, Timer) activity, which is to be cleared. | False | True | . There are no Output parameters . Outcomes . | Done | . HTTP Endpoint . Handle an incoming HTTP request. Category: HTTP . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Path | System.String | Path | The relative path that triggers this activity. | False | True | . | Methods | System.Collections.Generic.HashSet`1[System.String] | Methods | The HTTP methods that trigger this activity. | False | True | . | ReadContent | System.Boolean | Read Content | A value indicating whether the HTTP request content body should be read and stored as part of the HTTP request model. The stored format depends on the content-type header. | False | True | . | TargetType | System.Type | Target Type |   | False | True | . | Schema | System.String | Schema |   | False | True | . | Authorize | System.Boolean | Authorize | Check to allow authenticated requests only | False | True | . | Policy | System.String | Policy | Provide a policy to evaluate. If the policy fails, the request is forbidden. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | Elsa.Activities.Http.Models.HttpRequestModel | The received HTTP request. | . Outcomes . | Done | . HTTP Response . Write an HTTP response. Category: HTTP . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | StatusCode | System.Net.HttpStatusCode | Status Code | The HTTP status code to write. | False | True | . | Content | System.Object | Content | The HTTP content to write. | False | True | . | ContentType | System.String | Content Type | The HTTP content type header to write. | False | True | . | CharSet | System.String | Char Set | The character set to use when writing the response. | False | True | . | ResponseHeaders | Elsa.Activities.Http.Models.HttpResponseHeaders | Response Headers | Additional headers to write. | False | True | . There are no Output parameters . Outcomes . | Done | . Send HTTP Request . Send an HTTP request. Category: HTTP . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Url | System.Uri | Url | The URL to send the HTTP request to. | False | True | . | Method | System.String | Method | The HTTP method to use when making the request. | False | True | . | Content | System.String | Content | The HTTP content to send along with the request. | False | True | . | ContentType | System.String | Content Type | The content type to send with the request. | False | True | . | Authorization | System.String | Authorization | The Authorization header value to send. | False | True | . | RequestHeaders | Elsa.Activities.Http.Models.HttpRequestHeaders | Request Headers | Additional headers to send along with the request. | False | True | . | ReadContent | System.Boolean | Read Content | Read the content of the response. | False | True | . | ResponseContentParserName | System.String | Response Content Parser | The parser to use to parse the response content. | False | True | . | ResponseContentTargetType | System.Type | Response Content .NET Type | The assembly-qualified .NET type name to deserialize the received content into. | False | True | . | SupportedStatusCodes | System.Collections.Generic.ICollection`1[System.Int32] | Supported Status Codes | A list of possible HTTP status codes to handle. | False | True | . Output Parameters . | Name | Type | Hint | . | Response | Elsa.Activities.Http.Models.HttpResponseModel |   | . | ResponseContent | System.Object |   | . Outcomes . | Done | Unsupported Status Code | . Redirect . Write an HTTP redirect response. Category: HTTP . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Location | System.Uri | Location | The URL to redirect to (HTTP 302). | False | True | . | Permanent | System.Boolean | Permanent | Whether or not the redirect is permanent (HTTP 301). | False | True | . There are no Output parameters . Outcomes . | Done | . Run JavaScript . Run JavaScript code. Category: Scripting . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Script | System.String | Script | The JavaScript to run. | False | True | . | PossibleOutcomes | System.Collections.Generic.ICollection`1[System.String] | Possible Outcomes | The possible outcomes that can be set by the script. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | System.Object |   | . Outcomes . | Done | . Capability Create . Adds a new capability . Category: Users . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | CapabilityDescription | System.String | Capability Description | The Description of the Capability | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . Outcomes . | Success | Failed | . Capabilities Get List . Gets a list of all capabilities . Category: Users . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | EmailAddress | System.String | Email Address | The EmailAddress of the Current User | False | True | . Output Parameters . | Name | Type | Hint | . | Capabilities | System.Collections.Generic.List`1[HubOneWorkflows.Models.Core.Capability] |   | . Outcomes . | Success | Failed | . Data Type Add . Adds a new Data Type to be used as a hint to the Data CRUD UI . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | DataType | System.String | Data Type | The name of the DataType | False | True | . | SQLDefinition | System.String | SQL Definition | The SQL Data Type of this DataType | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | HubOneWorkflows.Models.Core.DataType |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . DataTypes get List . Gets a list of all DataTypes . Category: Data . There are no input parameters . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . | DataTypes | System.Collections.Generic.List`1[HubOneWorkflows.Models.Core.DataType] |   | . Outcomes . | Success | Failed | . Entity Created . Waits for an entity to be created . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | EntityType | System.String | Entity Type | Provide the Entity Type (or leave blank for all) | False | True | . Output Parameters . | Name | Type | Hint | . | EntityKey | System.Int64 |   | . Outcomes . | Success | Failed | . Entity Updated . Waits for an Entity to be updated . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | EntityType | System.String | Entity Type | Provide the Entity Type (or leave blank for all) | False | True | . Output Parameters . | Name | Type | Hint | . | EntityKey | System.Int64 |   | . Outcomes . | Complete | Failed | . Object Create . Creates a Brand New Object . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeId | System.Nullable`1[System.Int64] | Type Id | The Id of the Type. Enter either Id or Name or Id will take precendence | False | True | . | strTypeId | System.String | Str Type Id | The Name of the Type. Enter either Id or Name or Id will take precendence | False | True | . | Owner | System.String | Owner | The Owner of the Object | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | HubOneWorkflows.Models.Core.ObjectInstance |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Object Create, Set, Promote to Variable . Creates a new Object, Sets Data, Promotes it and returns in a Variable . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeId | System.Nullable`1[System.Int64] | Type Id | The Id of the Type. Enter either Id or Name or Id will take precendence | False | True | . | TypeName | System.String | Str Type Id | The Name of the Type. Enter either Id or Name or Id will take precendence | False | True | . | Owner | System.String | Owner | The Owner of the Object | False | True | . | Json | System.String | Json | The Object Detail in JSON | False | True | . | VariableName | System.String | Variable Name | The Output Variable Name | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . Outcomes . | Success | Failed | . Object Detail Create . Creates a new Desired State for an Object . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectId | System.Int64 | Object Id | The Id of the Object to create detail for | False | True | . | Json | System.String | Json | The Object Detail in JSON | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Object Detail Create and Promote . Creates a new Desired State for an Object then immediately promotes it . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectId | System.Int64 | Object Id | The Id of the Object to create detail for | False | True | . | Json | System.String | Json | The Object Detail in JSON | False | True | . | VariableName | System.String | Variable Name | The Output Variable Name | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Object Detail Get . Gets the detail of an object from a specific State . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectId | System.Int64 | Object Id | The Id of the Object | False | True | . | State | System.Char | State | The State where C is Current, D is Desired and H is History | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.Collections.Generic.List1[System.Collections.Generic.Dictionary2[System.String,System.Object]] |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Object Detail Promote . Promotes an Object Version from Desired State to Current State . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectId | System.Int64 | Object Id | The Id of the Object | False | True | . | StateId | System.Int64 | State Id | The Desired State ID to Promote | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Object Detail To Variable . Gets the detail of an object from a specific State and places it in a workflow variable . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectId | System.Int64 | Object Id | The Id of the Object | False | True | . | State | System.Char | State | The State where C is Current, D is Desired and H is History | False | True | . | VariableName | System.String | Variable Name | The Name of the New Variable | False | True | . There are no Output parameters . Outcomes . | Success | Failed | . Objects Get List by Type . Gets a List of Objects by Type . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeId | System.Nullable`1[System.Int64] | Type Id | The Id of the Type. Enter either Id or Name or Id will take precendence | False | True | . | TypeName | System.String | Type Name | The Name of the Type. Enter either Id or Name or Id will take precendence | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . | ObjectInstances | System.Collections.Generic.List`1[HubOneWorkflows.Models.API.ObjectInstanceWithProperties] |   | . Outcomes . | Success | Failed | . Objects get list with Query . Gets a list of objects based on a query . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeId | System.Nullable`1[System.Int64] | Type Id | The Id of the Type. Enter either Id or Name or Id will take precendence | False | True | . | strTypeId | System.String | Str Type Id | The Name of the Type. Enter either Id or Name or Id will take precendence | False | True | . | Query | System.String | Query | The Query | False | True | . Output Parameters . | Name | Type | Hint | . | ObjectDetails | System.Collections.Generic.List`1[HubOneWorkflows.Models.API.ObjectInstanceWithProperties] |   | . Outcomes . | Success | Failed | . Object Update . Updates an object . Category: Data . There are no input parameters . Output Parameters . | Name | Type | Hint | . | Instance | HubOneWorkflows.Models.Core.ObjectInstance | The receieved ObjectInstance | . Outcomes . | Success | Failed | . Object Rename . Renames an object . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectId | System.Int64 | Object Id | The Id of the Object | False | True | . | Title | System.String | Title | The Title of the Object | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . Outcomes . | Success | Failed | . Task Ask Simple Question and Wait . Create a Task and Waits until a simple question has been responded to . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable |   | . | Title | System.String | Title | Provide the Title of the Task | False | True |   | . | TaskDescription | System.String | Task Description | The Description of the Task using Markdown | False | True |   | . | Severity | System.Int32 | Severity | The severity of the Task | False | True |   | . | Priority | System.Int32 | Priority | The Priority of the Task | False | True |   | . | Due | System.Int32 | Due | Days from Today that Task is Due (1-N) | False | True |   | . | Capability | System.Int32 | Capability | The Capability Id for this Task | False | True |   | . | RelatedObjectID | System.Int64 | Related Object ID | Any Related Object ID | False | True |   | . | DataQuestions | System.String | Data Questions | Questions, or data to complete in the format YYYY~XXXX | YYYY~XXXX* where XXXX is a non-required item and XXXX* is a required field. YYYY is the prompt | False | True | . | UniqueDropDowns | System.Boolean | Unique Drop Downs | Select this to make dropdown entries of the same type unique, not allowing repeats | False | True |   | . | Branches | System.Collections.Generic.ISet`1[System.String] | Branches | Enter one or more Answers. These will become buttons for the user to respond to. | False | True |   | . Output Parameters . | Name | Type | Hint | . | Output | System.Nullable`1[System.Int64] |   | . Outcomes . Task Create . Creates a new Task . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Title | System.String | Title | Provide the Title of the Task | False | True | . | TaskDescription | System.String | Task Description | The Description of the Task using Markdown | False | True | . | Severity | System.Int32 | Severity | The severity of the Task | False | True | . | Priority | System.Int32 | Priority | The Priority of the Task | False | True | . | Capability | System.Int32 | Capability | The Capability Id for this Task | False | True | . | Due | System.Int32 | Due | Days from Today that Task is Due (1-N) | False | True | . Output Parameters . | Name | Type | Hint | . | Output | HubOneWorkflows.Models.Core.WorkflowsTask |   | . Outcomes . | Success | Failed | . Task Create and Wait . Create a Task and Waits until it is complete or has timed out . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable |   | . | Title | System.String | Title | Provide the Title of the Task | False | True |   | . | TaskDescription | System.String | Task Description | The Description of the Task using Markdown | False | True |   | . | Severity | System.Int32 | Severity | The severity of the Task | False | True |   | . | Priority | System.Int32 | Priority | The Priority of the Task | False | True |   | . | Due | System.Int32 | Due | Days from Today that Task is Due (1-N) | False | True |   | . | Capability | System.Int32 | Capability | The Capability Id for this Task | False | True |   | . | RelatedObjectID | System.Int64 | Related Object ID | Any Related Object ID | False | True |   | . | DataQuestions | System.String | Data Questions | Questions, or data to complete in the format YYYY~XXXX | YYYY~XXXX* where XXXX is a non-required item and XXXX* is a required field. YYYY is the prompt | False | True | . Output Parameters . | Name | Type | Hint | . | Output | System.Nullable`1[System.Int64] |   | . Outcomes . | Complete | Failed | TimedOut | . Task Delete . Deletes a Task . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TaskId | System.Int64 | Task Id | The Task Id | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . Outcomes . | Success | Failed | . Task detail add . Adds a Detail to Task . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | WorkflowsTaskId | System.Int64 | Workflows Task Id | The Id of the Task | False | True | . | TypeId | System.Int64 | Type Id | The Id of the Type | False | True | . | ObjectId | System.Int64 | Object Id | The Id of the Object to Add | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Task details get list . Gets the details associated with a task . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | WorkflowsTaskId | System.Int64 | Workflows Task Id | The Task Id | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | TaskDetails | System.Collections.Generic.List`1[HubOneWorkflows.Models.Core.TaskDetail] |   | . Outcomes . | Success | Failed | . Tasks get list . Gets lis of tasks with a specific id or assigned to user . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | AssignedUserId | System.Int32 | Assigned User Id | The Assigned User Id | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . | TaskDetails | System.Collections.Generic.List`1[HubOneWorkflows.Models.Core.WorkflowsTask] |   | . Outcomes . | Success | Failed | . Task Update . Updates a task . Category: Tasks . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | WorkflowsTaskId | System.Int64 | Workflows Task Id | The Id of the Task | False | True | . | TypeId | System.Int64 | Type Id | The Id of the Type | False | True | . | ObjectId | System.Int64 | Object Id | The Id of the Object to Add | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Type add Column . Adds a column to a type . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectTypeId | System.Int64 | Object Type Id | The Id of the Object Type | False | True | . | ColumnName | System.String | Column Name | The Name of the Column | False | True | . | ColumnDisplayName | System.String | Column Display Name | The Display Name of the Column | False | True | . | ColumnDescription | System.String | Column Description | The Description of the Column | False | True | . | ColumnTypeId | System.Int32 | Column Type Id | The Column Type Id | False | True | . | ForeignKeyId | System.Nullable`1[System.Int64] | Foreign Key Id | The Type Id of any relationship | False | True | . | DisplayOrder | System.Nullable`1[System.Int32] | Display Order | The DisplayOrder | False | True | . | Visible | System.Nullable`1[System.Boolean] | Visible | Visible | False | True | . | Indexed | System.Nullable`1[System.Boolean] | Indexed | Visible | False | True | . | WhereString | System.String | Where String | WhereString | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Type add index . Adds an index to a type . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeId | System.Int64 | Type Id | The Id of the Type | False | True | . | Column | System.String | Column | The Name of the Column | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Type Create . Creates a new Type . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeName | System.String | Type Name | The Name of the Type | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Type Delete . Deletes a Type . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeName | System.String | Type Name | The Name of the Type | False | True | . There are no Output parameters . Outcomes . | Success | Failed | . Type get columns . Gets the Columns for a Type . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeId | System.Int64 | Type Id | The Id of the Type | False | True | . | TypeName | System.String | Type Name | The Name of the Type. Enter either Id or Name or Id will take precendence | False | True | . | VisibleOnly | System.Boolean | Visible Only | Only Return Visible Columns | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . | ColumnDefinitions | System.Collections.Generic.List`1[HubOneWorkflows.Models.Core.ObjectTypeColumn] |   | . Outcomes . | Success | Failed | . Types Get List . Gets a List of All Types . Category: Data . There are no input parameters . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . | ObjectTypes | System.Collections.Generic.List`1[HubOneWorkflows.Models.Core.ObjectType] |   | . Outcomes . | Success | Failed | . Type Remove Index . Removes an index from a type . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | TypeId | System.Int64 | Type Id | The Id of the Object Type to Amend | False | True | . | Column | System.String | Column | The Column to Add an Index to | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . User Add . Adds a new user . Category: Users . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | FirstName | System.String | First Name | The Users FirstName | False | True | . | LastName | System.String | Last Name | The Users LastName | False | True | . | Email | System.String | Email | The Users Email | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | HubOneWorkflows.Models.Core.User | The User Object | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . User Capability Add . Assigns a capability to a User . Category: Users . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | UserEmail | System.String | User Email | The User to Add the capability to | False | True | . | CapabilityId | System.Int32 | Capability Id | The Capability | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . Capability Remove . Removes a Capability from a user . Category: Users . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | RequestingUsersId | System.Int32 | Requesting Users Id | The Id of the Requesting User | False | True | . | UsersId | System.Int32 | Users Id | The User to remove the capability from | False | True | . | CapabilityId | System.Int32 | Capability Id | The Capability | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . Outcomes . | Success | Failed | . Users Get List . Gets the list of Users . Category: Users . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | UsersId | System.String | Users Id | The Id of the Current User | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | System.String |   | . | ReturnId | System.String |   | . | Users | System.Collections.Generic.List`1[HubOneWorkflows.Models.Core.User] |   | . Outcomes . | Success | Failed | . User Update . Updates a User . Category: User . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | UsersId | System.Int32 | Users Id | The Id of the Current User | False | True | . | FirstName | System.String | First Name | The FirstName | False | True | . | Surname | System.String | Surname | The Last Name | False | True | . | Email | System.String | Email | The Email Address | False | True | . Output Parameters . | Name | Type | Hint | . | ReturnResult | HubOneWorkflows.Models.Core.User |   | . | ReturnId | System.Int64 |   | . Outcomes . | Success | Failed | . JotForm Parse . Parse an incoming form. Takes results of HTTP activity and works to ensure the appropriate object type is created, adds or updates a record . Category: JotForm . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectType | System.String | Object Type | The Object Type | False | True | . | KeyField | System.String | Key Field | The Key Field. Use this to update a record based on a field | False | True | . | ActivityResults | System.String | Activity Results | The results of the Http Activity | False | True | . Output Parameters . | Name | Type | Hint | . | ObjectDetails | System.Collections.Generic.Dictionary`2[System.String,System.Text.Json.JsonElement] |   | . | ObjectId | System.Int64 |   | . Outcomes . | Success | Failed | . Quick Data Insert . Quickly inserts the provided data into a type and upgrades if required . Category: Data . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ObjectType | System.String | Object Type | The Object Type | False | True | . | KeyField | System.String | Key Field | The Key Field. Use this to update a record based on a field | False | True | . | InputData | System.String | Input Data | The Input Data | False | True | . Output Parameters . | Name | Type | Hint | . | ObjectDetails | System.Collections.Generic.Dictionary`2[System.String,System.Text.Json.JsonElement] |   | . | ObjectId | System.Int64 |   | . Outcomes . | Success | Failed | . Get Customers . Retrieves Customers from the database . Category: Tuftware Sales . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ClientStatus | System.Int32 | Client Status | The Client Status | False | True | . Output Parameters . | Name | Type | Hint | . | Customers | System.Collections.Generic.List`1[Tuftware.Integration.Data.Customer] |   | . Outcomes . | Success | Failed | . Get Customer Rep . Retrieves a Rep for a customer . Category: Tuftware Sales . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Customer | System.String | Customer | The Customer Number | False | True | . Output Parameters . | Name | Type | Hint | . | SalesRep | Tuftware.Integration.Data.SalesRep |   | . Outcomes . | Success | Failed | CustomerNotFound | RepNotFound | . Run Workflow . Runs a child workflow. Category: Workflows . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | WorkflowDefinitionId | System.String | Workflow Definition | The workflow definition ID to run. | False | True | . | TenantId | System.String | Tenant ID | The tenant ID to which the workflow to run belongs. | False | True | . | Input | System.Object | Input | Optional input to send to the workflow to run. | False | True | . | PossibleOutcomes | System.Collections.Generic.ISet`1[System.String] | Possible Outcomes | Enter one or more potential child workflow outcomes you might want to handle. | False | True | . | CorrelationId | System.String | Correlation ID | The correlation ID to associate with the workflow to run. | False | True | . | ContextId | System.String | Context ID | The context ID to associate with the workflow to run. | False | True | . | CustomAttributes | Elsa.Models.Variables | Custom Attributes | Optional custom attributes to associate with the workflow to run. | False | True | . | Mode | Elsa.Activities.Workflows.RunWorkflow+RunWorkflowMode | Mode | Fire And Forget: run the child workflow and continue the current one. Blocking: Run the child workflow and suspend the current one until the child workflow finishes. | False | True | . | RetryFailedActivities | System.Boolean | Retry failed workflow | True to retry existing ChildWorkflow instance instead of creating a new one when faulted. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | Elsa.Activities.Workflows.FinishedWorkflowModel |   | . Outcomes . | Done | Not Found | . Workflow . Category: Miscellaneous . There are no input parameters . Output Parameters . | Name | Type | Hint | . | Output | System.Object |   | . Outcomes . | Done | . State . Puts the workflow into the specified state. Category: State Machine . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | StateName | System.String | State Name | The name of this state. | False | True | . | Transitions | System.Collections.Generic.ISet`1[System.String] | Transitions | Enter one or more transition names. | False | True | . There are no Output parameters . Outcomes . Interrupt Trigger . Resumes suspended workflows that are blocked on a specific trigger. Category: Workflows . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | WorkflowInstanceId | System.String | Workflow Instance Id | The ID of the workflow instance to resume. | False | True | . | BlockingActivityId | System.String | Blocking Activity Id | The ID of the blocking activity to trigger. | False | True | . | Input | System.Object | Input | An optional input to pass to the blocking activity. | False | True | . There are no Output parameters . Outcomes . | Done | . Send Signal . Sends the specified signal. Category: Workflows . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Signal | System.String | Signal | An expression that evaluates to the name of the signal to trigger. | False | True | . | CorrelationId | System.String | Correlation Id | An expression that evaluates to the correlation ID to use when signaling. | False | True | . | Input | System.Object | Input | An expression that evaluates to an input value when triggering the signal. | False | True | . | SendMode | Elsa.Activities.Signaling.SendSignalMode | Send Mode | The send-mode controls whether the signal should be sent asynchronously or synchronously. | False | True | . There are no Output parameters . Outcomes . | Done | . Signal Received . Suspend workflow execution until the specified signal is received. Category: Workflows . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Signal | System.String | Signal | The name of the signal to wait for. | False | True | . Output Parameters . | Name | Type | Hint | . | SignalInput | System.Object | The input that was received with the signal. | . | Output | System.Object |   | . Outcomes . | Done | . Fault . Put the workflow in a faulted state. Category: Primitives . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Message | System.String | Message | Optional. The message to store as the reason for the fault. | False | True | . There are no Output parameters . Outcomes . Inline . Category: Miscellaneous . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Function | System.Func2[Elsa.Services.Models.ActivityExecutionContext,System.Threading.Tasks.ValueTask1[Elsa.ActivityResults.IActivityExecutionResult]] | Function |   | False | True | . There are no Output parameters . Outcomes . | Done | . Set Context ID . Set context ID on the workflow. Category: Primitives . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ContextId | System.String | Context Id | The context ID to set. | False | True | . There are no Output parameters . Outcomes . | Done | . Set Name . Set the name of the workflow instance. Category: Primitives . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Value | System.String | Value | The value to set as the workflow instance’s name. | False | True | . There are no Output parameters . Outcomes . | Done | . Set Transient Variable . Set a transient variable on the current workflow execution context. Category: Primitives . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | VariableName | System.String | Variable Name | The name of the transient variable to store the value into. | False | True | . | Value | System.Object | Value | The value to store in the transient variable. | False | True | . There are no Output parameters . Outcomes . | Done | . Set Variable . Set variable on the workflow. Category: Primitives . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | VariableName | System.String | Variable Name | The name of the variable to store the value into. | False | True | . | Value | System.Object | Value | The value to store in the variable. | False | True | . There are no Output parameters . Outcomes . | Done | . Correlate . Set the CorrelationId of the workflow to a given value. Category: Workflows . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Value | System.String | Value | An expression that evaluates to the value to store as the correlation ID. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | System.String |   | . Outcomes . | Done | . Break . Break out of a While, For or ForEach loop. Category: Control Flow . There are no input parameters . There are no Output parameters . Outcomes . | Done | . Finish . Removes any blocking activities from the current container (workflow or composite activity). Category: Workflows . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | ActivityOutput | System.Object | Activity Output | The value to set as the workflow’s output | False | True | . | OutcomeNames | System.Collections.Generic.ICollection`1[System.String] | Outcome Names | The outcomes to set on the container activity | False | True | . Output Parameters . | Name | Type | Hint | . | Output | System.Object |   | . Outcomes . For Each . Iterate over a collection. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Items | System.Collections.Generic.ICollection`1[System.Object] | Items | A collection of items to iterate over. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | System.Object |   | . Outcomes . | Iterate | Done | . Fork . Fork workflow execution into multiple branches. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Branches | System.Collections.Generic.ISet`1[System.String] | Branches | Enter one or more branch names. | False | True | . There are no Output parameters . Outcomes . For . Iterate between two numbers. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Start | System.Int64 | Start | The starting number. | False | True | . | End | System.Int64 | End | The ending number. | False | True | . | Step | System.Int64 | Step | An expression that evaluates to the incrementing number on each step. | False | True | . | Operator | Elsa.Activities.ControlFlow.Operator | Operator | The operator to use when comparing the current value against the end value. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | System.Object |   | . Outcomes . | Iterate | Done | . If/Else . Evaluate a Boolean expression and continue execution depending on the result. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Condition | System.Boolean | Condition | The condition to evaluate. | False | True | . There are no Output parameters . Outcomes . | True | False | Done | . Join . Merge workflow execution back into a single branch. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | EagerJoin | System.Boolean | Eager Join | True if all blocking activities within the fork should be cleared. | False | True | . | Mode | Elsa.Activities.ControlFlow.Join+JoinMode | Mode | WaitAll: wait for all incoming activities to have executed. WaitAny: continue execution as soon as any of the incoming activity has executed. | False | True | . There are no Output parameters . Outcomes . | Done | . Parallel for Each . Iterate over a collection in parallel. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Items | System.Collections.Generic.ICollection`1[System.Object] | Items | A collection of items to iterate over. | False | True | . There are no Output parameters . Outcomes . | Iterate | Done | . Switch . Evaluate multiple conditions and continue execution depending on the results. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Cases | System.Collections.Generic.ICollection`1[Elsa.Activities.ControlFlow.SwitchCase] | Cases | The conditions to evaluate. | False | True | . | Mode | Elsa.Activities.ControlFlow.SwitchMode | Mode | The switch mode determines whether the first match should be scheduled, or all matches. | False | True | . There are no Output parameters . Outcomes . | Default | Done | . While . Execute while a given condition is true. Category: Control Flow . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Condition | System.Boolean | Condition | The condition to evaluate. | False | True | . There are no Output parameters . Outcomes . | Iterate | Done | . Compensable . Allow work that executed after this activity to be undone. Category: Compensation . There are no input parameters . There are no Output parameters . Outcomes . | Body | Compensate | Cancel | Confirm | Done | . Compensate . Invoke a specific compensable activity. Category: Compensation . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | CompensableActivityName | System.String | Compensable Activity Name | The name of the compensable activity to invoke. | False | True | . | Message | System.String | Message | Optional. The message to store as the reason for compensation. | False | True | . There are no Output parameters . Outcomes . | Done | . Confirm . Confirm a specific compensable activity. Category: Compensation . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | CompensableActivityName | System.String | Compensable Activity Name | The name of the compensable activity to confirm. | False | True | . There are no Output parameters . Outcomes . | Done | . Composite Activity . Category: Miscellaneous . There are no input parameters . Output Parameters . | Name | Type | Hint | . | Output | System.Object |   | . Outcomes . | Done | . ",
    "url": "/docs/activity-guide.html",
    
    "relUrl": "/docs/activity-guide.html"
  },"36": {
    "doc": "All Tasks",
    "title": "Working with All Tasks",
    "content": "Description: The All Tasks View allows you to work directly with every task created by and available in the system. Use this view to update, assign or unassign tasks . 1. Go to World of Workflows . 2. Click on Admin . 3. Click on All Tasks . ",
    "url": "/docs/tasks/all-tasks.html#working-with-all-tasks",
    
    "relUrl": "/docs/tasks/all-tasks.html#working-with-all-tasks"
  },"37": {
    "doc": "All Tasks",
    "title": "All Tasks",
    "content": " ",
    "url": "/docs/tasks/all-tasks.html",
    
    "relUrl": "/docs/tasks/all-tasks.html"
  },"38": {
    "doc": "Building Workflows",
    "title": "Building Workflows",
    "content": "Workflows, a core feature of World of Workflows, provides a powerful and intuitive platform for designing, managing, and automating your business processes. This chapter will guide you through the process of building workflows using the Workflows Editor, adding and configuring activities, and implementing triggers to automate processes. | Workflow Definitions are the description of what a workflow will do. | Workflow Instances are unique instances of workflow definitions that are currently running or have finished running. | Activities are individual steps within a workflow. | . ",
    "url": "/docs/userguide/building-workflows.html",
    
    "relUrl": "/docs/userguide/building-workflows.html"
  },"39": {
    "doc": "Building Workflows",
    "title": "Overview of Workflows",
    "content": "Workflows allows you to: . | Create visual, drag-and-drop workflows to model your business processes. | Choose from over 100 activities to perform various tasks and operations. | Configure activity settings and properties to customize workflow behaviour. | Connect activities using transitions to define the flow of your processes. | Implement triggers to automate workflows based on events or schedules. | . ",
    "url": "/docs/userguide/building-workflows.html#overview-of-workflows",
    
    "relUrl": "/docs/userguide/building-workflows.html#overview-of-workflows"
  },"40": {
    "doc": "Building Workflows",
    "title": "Using the Workflows Editor",
    "content": "To create a new workflow using the Workflows Editor, follow these steps: . | Navigate to Admin -&gt; Workflows in World of Workflows. | Click on the Create Workflow button. | The Workflows Editor opens. | . The Workflows Editor provides a visual, drag-and-drop interface for designing your workflows. You can add activities from the toolbox, connect them using transitions, and configure their properties to customize their behaviour. ",
    "url": "/docs/userguide/building-workflows.html#using-the-workflows-editor",
    
    "relUrl": "/docs/userguide/building-workflows.html#using-the-workflows-editor"
  },"41": {
    "doc": "Building Workflows",
    "title": "Adding and configuring activities",
    "content": "To add an activity to your workflow, follow these steps: . | Click Add activity. You can search for activities by name or browse through categories. | Click on the activity and drag it onto the canvas. | To configure the activity, right click the activity and choose Edit. Here, you can set various options, such as input and output variables, settings, and conditions. | . ",
    "url": "/docs/userguide/building-workflows.html#adding-and-configuring-activities",
    
    "relUrl": "/docs/userguide/building-workflows.html#adding-and-configuring-activities"
  },"42": {
    "doc": "Building Workflows",
    "title": "Connecting activities",
    "content": "Connectors define the flow of your workflow by connecting one activity to another. To create a transition, follow these steps: . | Click on the Connect icon (a filled circle) at the edge of the source activity. | Drag the connection line to the input of the target activity (an empty circle) and release. | . ",
    "url": "/docs/userguide/building-workflows.html#connecting-activities",
    
    "relUrl": "/docs/userguide/building-workflows.html#connecting-activities"
  },"43": {
    "doc": "Building Workflows",
    "title": "Implementing triggers",
    "content": "Triggers allow you to automate the execution of your workflows based on events, schedules, or other conditions. To add a trigger to your workflow, follow these steps: . | In the Workflows Editor, click on the Activities button. | Find an activity that is colored red (this is a trigger). | Select the trigger type (e.g., timer, HTTP Endpoint, Object Instance Trigger, etc.) and configure the settings specific to that trigger type, such as the interval for a timer or the URL for a HTTP Endpoint. | Save your trigger. | . Once you have designed your workflow, configured activities, and set up triggers, you can save and publish your workflow by clicking the Publish button in the Workflows Editor. Published workflows can be executed automatically based on their triggers. ",
    "url": "/docs/userguide/building-workflows.html#implementing-triggers",
    
    "relUrl": "/docs/userguide/building-workflows.html#implementing-triggers"
  },"44": {
    "doc": "Compensable",
    "title": "Compensable",
    "content": "The Compensable Activity has 5 outcomes: . | Body - The Body outcome lets the user specify what work to be done within the scope of the compensable activity. | Compensate - If any activity causes an unhandled exception in the Done branch, the Compensate outcome of the compensable activity will be scheduled, allowing the workflow to undo actions as necessary. | Cancel - If an activity within the Body branch faults, the Cancel outcome is scheduled. | Confirm - For some scenarios, compensable activities should no longer allow to be compensated anymore. To control this, the user should be able to explicitly confirm a compensable activity. When this happens, the Confirm outcome will be scheduled, allowing the user to do any work that finalizes some state. | Done- Once the Body branch completes, the Done outcome is scheduled. | . ",
    "url": "/docs/activities/compensation-compensable.html",
    
    "relUrl": "/docs/activities/compensation-compensable.html"
  },"45": {
    "doc": "Compensate",
    "title": "Compensate",
    "content": "Whenever an activity faults, any upper Compensable activity in its inbound branch will have its Compensate outcome scheduled for execution. However, this is not always enough. Some activities can have an e.g. “Error” outcome. For example, the SendHttpRequest activity lets the user handle HTTP 500 status codes as an outcome. It is reasonable to allow the user to undo work that was done earlier in the workflow. ",
    "url": "/docs/activities/compensation-compensate.html",
    
    "relUrl": "/docs/activities/compensation-compensate.html"
  },"46": {
    "doc": "Confirm",
    "title": "Confirm",
    "content": "To confirm a compensable activity, the user can use the Confirm activity by specifying the name of the compensable activity. This will result in the Confirm outcome of the compensable activity to be scheduled for execution. Confirmed compensable activities can no longer compensate. Trying to do so will cause an exception. ",
    "url": "/docs/activities/compensation-confirm.html",
    
    "relUrl": "/docs/activities/compensation-confirm.html"
  },"47": {
    "doc": "Compensation",
    "title": "Compensation",
    "content": " ",
    "url": "/docs/activities/compensation.html",
    
    "relUrl": "/docs/activities/compensation.html"
  },"48": {
    "doc": "Compensation",
    "title": "Introduction",
    "content": "Compensation in Elsa was first discussed in Elsa issue #2683 and is described as follows: . We need a way for workflows to compensate for when a workflow faults so that previously executed activities can e.g. cleanup. When a workflow compensates, its final status will be Cancelled rather than Faulted. The below description is a revised version based on the approach taken by Windows Workflow Foundation, which I think is a more flexible approach compared to the previous description. Compensable Activity . The Compensable Activity has 5 outcomes: . | Body - The Body outcome lets the user specify what work to be done within the scope of the compensable activity. | Compensate - If any activity causes an unhandled exception in the Done branch, the Compensate outcome of the compensable activity will be scheduled, allowing the workflow to undo actions as necessary. | Cancel - If an activity within the Body branch faults, the Cancel outcome is scheduled. | Confirm - For some scenarios, compensable activities should no longer be allowed to be compensated anymore. To control this, the user should be able to explicitly confirm a compensable activity. When this happens, the Confirm outcome will be scheduled, allowing the user to do any work that finalizes some state. | Done- Once the Body branch completes, the Done outcome is scheduled. | . Compensate Activity . Whenever an activity faults, any upper Compensable activity in its inbound branch will have its Compensate outcome scheduled for execution. However, this is not always enough. Some activities can have an e.g. “Error” outcome. For example, the SendHttpRequest activity lets the user handle HTTP 500 status codes as an outcome. It is reasonable to allow the user to undo work that was done earlier in the workflow. To allow for this, the user can add a Compensate activity and specify the name of the Compensable activity. Confirm Activity . To confirm a compensable activity, the user can use the Confirm activity by specifying the name of the compensable activity. This will result in the Confirm outcome of the compensable activity to be scheduled for execution. Confirmed compensable activities can no longer compensate. Trying to do so will cause an exception. ",
    "url": "/docs/activities/compensation.html#introduction",
    
    "relUrl": "/docs/activities/compensation.html#introduction"
  },"49": {
    "doc": "Compensation",
    "title": "Activities",
    "content": ". | Compensable | Compensate | Confirm | . ",
    "url": "/docs/activities/compensation.html#activities",
    
    "relUrl": "/docs/activities/compensation.html#activities"
  },"50": {
    "doc": "Conmtrol Flow",
    "title": "Control flow",
    "content": "Control flow tags create conditions that decide whether blocks of Liquid code get executed. ",
    "url": "/docs/liquid/control-flow.html#control-flow",
    
    "relUrl": "/docs/liquid/control-flow.html#control-flow"
  },"51": {
    "doc": "Conmtrol Flow",
    "title": "if",
    "content": "Executes a block of code only if a certain condition is true. Input . {% if product.title == \"Awesome Shoes\" %} These shoes are awesome! {% endif %} . Output . These shoes are awesome! . ",
    "url": "/docs/liquid/control-flow.html#if",
    
    "relUrl": "/docs/liquid/control-flow.html#if"
  },"52": {
    "doc": "Conmtrol Flow",
    "title": "unless",
    "content": "The opposite of if – executes a block of code only if a certain condition is not met. Input . {% unless product.title == \"Awesome Shoes\" %} These shoes are not awesome. {% endunless %} . Output . These shoes are not awesome. This would be the equivalent of doing the following: . {% if product.title != \"Awesome Shoes\" %} These shoes are not awesome. {% endif %} . ",
    "url": "/docs/liquid/control-flow.html#unless",
    
    "relUrl": "/docs/liquid/control-flow.html#unless"
  },"53": {
    "doc": "Conmtrol Flow",
    "title": "elsif / else",
    "content": "Adds more conditions within an if or unless block. Input . &lt;!-- If customer.name = \"anonymous\" --&gt; {% if customer.name == \"kevin\" %} Hey Kevin! {% elsif customer.name == \"anonymous\" %} Hey Anonymous! {% else %} Hi Stranger! {% endif %} . Output . Hey Anonymous! . ",
    "url": "/docs/liquid/control-flow.html#elsif--else",
    
    "relUrl": "/docs/liquid/control-flow.html#elsif--else"
  },"54": {
    "doc": "Conmtrol Flow",
    "title": "case/when",
    "content": "Creates a switch statement to execute a particular block of code when a variable has a specified value. case initializes the switch statement, and when statements define the various conditions. A when tag can accept multiple values. When multiple values are provided, the expression is returned when the variable matches any of the values inside of the tag. Provide the values as a comma-separated list, or separate them using an or operator. An optional else statement at the end of the case provides code to execute if none of the conditions are met. Input . {% assign handle = \"cake\" %} {% case handle %} {% when \"cake\" %} This is a cake {% when \"cookie\", \"biscuit\" %} This is a cookie {% else %} This is not a cake nor a cookie {% endcase %} . Output . This is a cake . | Previous | Home | Next | . ",
    "url": "/docs/liquid/control-flow.html#casewhen",
    
    "relUrl": "/docs/liquid/control-flow.html#casewhen"
  },"55": {
    "doc": "Conmtrol Flow",
    "title": "Conmtrol Flow",
    "content": " ",
    "url": "/docs/liquid/control-flow.html",
    
    "relUrl": "/docs/liquid/control-flow.html"
  },"56": {
    "doc": "Creating a Workflow",
    "title": "Creating a Workflow",
    "content": "To Work with your workflow definitions, you need to be an admin in the system. If you are an Admin, you will see the Admin tab in the top Menu. Click Admin the click Workflows to go to the Workflow Dashboard: . This will open the Workflow Dashboard in the Workflow Definitions Page . The three main sections of the Workflow Dashboard are: . | Workflow Definitions - Lets you work with your workflow definitions, the blueprints of your workflows. | Workflow Instances - Lets you work with workflow instances, those times your workflow definitions have run | Workflow Registry - This shows not just your workflows but any additional workflow definitions created by plugins. | . ",
    "url": "/docs/workflow-development/creating-a-workflow.html",
    
    "relUrl": "/docs/workflow-development/creating-a-workflow.html"
  },"57": {
    "doc": "Creating a Workflow",
    "title": "Create a Workflow",
    "content": "To create a new workflow, click the Create Workflow button in the Workflow Definitions section. The Workflow designer will open. You can now start to build your workflow. | Click Start to begin adding activities. | The Publish dropdown allows you to publish, import and export a workflow definition. | The « button shows additional information on your workflow including general information, and Version History. | The ? icon gives help on using the designer. | The Cog setting allows you to set various options for this workflow. | . ",
    "url": "/docs/workflow-development/creating-a-workflow.html#create-a-workflow",
    
    "relUrl": "/docs/workflow-development/creating-a-workflow.html#create-a-workflow"
  },"58": {
    "doc": "Creating a Workflow",
    "title": "Configuring a Workflow:",
    "content": "Clicking the Cog icon will open the Workflow Settings dialog. Settings . The Name of the workflow is the internal name it is known by. The Display Name is the name that will be shown to your end users in the interface. The Description is a useful place to store information on the workflow and why you created it in the first place. ",
    "url": "/docs/workflow-development/creating-a-workflow.html#configuring-a-workflow",
    
    "relUrl": "/docs/workflow-development/creating-a-workflow.html#configuring-a-workflow"
  },"59": {
    "doc": "Data Activities",
    "title": "Data Activities",
    "content": "Data Activities in Elsa Workflows provide a powerful way to interact with the User Configurable Database within World of Workflows. This chapter will cover the essential Data Activities, including Data Types Read, Create Object Instance, Update Object Instance, Get Object Instance, List Object Instances, List Object Instance History, Column Create, Type Index Create, Type Create, Type Delete, Columns Read by Type, Types Read, Type Index Delete, JSON Data Insert, and Object Instance Trigger . ",
    "url": "/docs/userguide/data-activities.html",
    
    "relUrl": "/docs/userguide/data-activities.html"
  },"60": {
    "doc": "Data Activities",
    "title": "Triggers",
    "content": "Object Instance Trigger . The Object Instance Trigger is designed to start or resume a workflow based on your interaction with a certain Type in the interface. The Object Instance Trigger allows you to choose the Type you would like to initiate the workflow. It returns two variables: . | The InstanceId of the Instance that triggered or resumed this workflow . | The Instance itself as a well formed JSON Object . | . To access these variables, ensure you give this activity a name (in the Common tab) . Once you have created a workflow with an Object Instance Trigger, it appears in the Object Editor under the Workflows tab. ",
    "url": "/docs/userguide/data-activities.html#triggers",
    
    "relUrl": "/docs/userguide/data-activities.html#triggers"
  },"61": {
    "doc": "Data Activities",
    "title": "Database Structure",
    "content": "As discussed in Database, the user interface in World of Workflow allows you to set up your database structure. For many situations, this will be all you need to do. If you need to manipulate the database structure and create and modify tables, columns and indexes within a workflow there are several activities you can use . | Type Create . | Type Delete . | Types Read . | Type Index Create . | Type Index Delete . | Column Create . | Columns Read by Type . | . Type Create . Type Create creates a new table or type in the database. It allows you to enter: . | Type Name – the name of the type or table . | Type Description – the description of the type . | . It will create a new type with a single string column called “Title”. It will return the TypeId of the new Type in the activity property of ReturnId. Type Delete . Type delete will delete a type given its Id. Types Read . Types Read takes no input parameters and returns a JSON object of all the types in your system . Type Index Create . Indexes are used by databases to lookup information quickly. They keep an index of all the available data in a column and can use it to find information faster than working through each record. Where you will use a column to find data, it is important to establish an index for that column. Enter the Type Id and Column Name to create an index for that Column. The activity will return the Id of the column as return Id. Type Index Delete . Use this activity to delete an index you created previously. Column Create . Column Create adds a new Column to a Type. This activity creates a new column for a Type (or Table). Enter the following information: . | Type – Choose the type (or table) to add a column for . | Column Name – Choose a name for the column. Best practices dictate a single word with no spaces or non text characters. | Column Display Name – Enter the name that will be shown to the end-user in the system for this column. | Column Description – Enter the description of the column so you can understand later what the column is for. | Column Type Id – This is the type of data the column contains. Valid entries are: . | Big Integer – This can be a very large number but is commonly used as a relationship between this and an object in another type. If you wish this to be a relationship, complete the The Type Id of any relationship below. | Integer – This is a whole number, positive or negative, without decimal places. | Decimal 2 – This is a decimal number with two decimal places, e.g. a currency. | Decimal 5 – This is a decimal number with five decimal places. It is commonly used for percentages and other numbers that require great precision. | True/False – This stores the value of true or false . | String – This stores string information, such as text . | DateTime – This is a date/time data stored as UTC and displayed as local time. | Url – This is a hyperlink or URL. | Embed – This embeds multimedia such as video . | . | The Type Id of any relationship – This is the type you want this column to lookup. If so, the Column Type Id must be a Big Integer . | Display Order – The order this column appears in the User Interface . | Visible – Whether the column is visible to the end user . | Indexed – Whether the column is indexed. | . If successful, this activity returns the ColumnId of the newly created column. Columns Read by Type . This returns all the columns for the selected type. You can choose to return all columns or just visible columns. The array of columns is returned in the Columns property of this activity. ",
    "url": "/docs/userguide/data-activities.html#database-structure",
    
    "relUrl": "/docs/userguide/data-activities.html#database-structure"
  },"62": {
    "doc": "Data Activities",
    "title": "Data",
    "content": "Once the data structure is in place, you can work with the data itself. The following activities allow you to manipulate data: . | Create Object Instance . | Update Object Instance . | Get Object Instance . | List Object Instances . | List Object Instance History . | JSON Data Insert . | . Create Object Instance . This activity allows you to create a new object instance and data (sometimes referred to as a row), and to save this new object into a variable. First, select the Object Type. Then add any data for the Columns for this Type into the Values area. Finally enter a Variable Name to create a workflow variable containing this new object instance. This activity also returns Instance, which is the new instance created and InstanceId which is the Id of the new Instance (or row). ",
    "url": "/docs/userguide/data-activities.html#data",
    
    "relUrl": "/docs/userguide/data-activities.html#data"
  },"63": {
    "doc": "Data Activities",
    "title": "Update Object Instance",
    "content": "This activity allows you to update the data in an instance and optionally clear any fields that are not provided. First enterthe Instance Id of the instance you wantg to update. This might have been returned when you used a Create Object Instance activity Next you can choose to Clear Omitted fields. That means if this type has a column and you do not include data for it, the data will be cleared. You can enter columns and values or present this as JavaScript or a JSON file. Finally, you can choose a Variable Name to have the updated instance (or row) stored in a workflow variable. The activity will have a property on exit called Instance which also contains the updated instance (or row). Get Object Instance . This activity simply retrieves the current information on an instance (or row) and puts it into a variable. The activity will have a property on exit called Instance which also contains the instance (or row). List Object Instances . This activity retrieves a list of object instances and accepts OData Filters and queries. See oData Query Syntax for information on constructing OData queries . The activity accepts the following inputs: . | The Object Type you wish to get a list for . | The Filter which is an OData filter to filter the records. | Skip- Once the filter and order by has been performed this selects the record to start from. This is commonly used to retrieve pages of data of a certain size. The value used in Skip would normally be a variable that is incremented in a loop. | Limit – this limits the number of rows to return and is commonly used in conjunction with Skip to select a specific page of data. | Order By – This selects the order in which rows are returned and sorts the data as required. | . The activity has a single output property Output which includes the requested list. Ensure you give the activity a name under the Common tab to ensure you can access this information. List Object Instance History . Every time you update an instance (or row), the system saves the previous row as history. This can be retrieved using the List Object Instance History activity. This accepts OData filters and queries. See oData Query Syntax for information on constructing OData queries . The activity accepts the following inputs: . | The Instance Id for which you wish to get a history list . | The Filter which is an OData filter to filter the records. | Skip- Once the filter and order by has been performed this selects the record to start from. This is commonly used to retrieve pages of data of a certain size. | Limit – this limits the number of rows to return and is commonly used in conjunction with Skip to select a specific page of data. | Order By – This selects the order in which rows are returned and sorts the data as required. | . The activity has a single output property Output which includes the requested list. Ensure you give the activity a name under the Common tab to ensure you can access this information. JSON Data Insert . JSON Data Insert is an activity designed to use JSON data to perform the following: . | Locate an instance with a matching key field and update the instance (if no match then create a new instance) . | If a column doesn’t exist, create it . | Add the data to an instance . | . First, select the Object Type . Next, select a key field. This is used to identify if this is a new instance or udpate an existing one. If you are using something like JotForm, make this the submission_id. Finally decide whether to clear omitted fields or not and insert the data, either as JSON or as Name Value entries. The activity has a single output property Output which includes the added or updated instance (or row). Ensure you give the activity a name under the Common tab so you can access this information. ",
    "url": "/docs/userguide/data-activities.html#update-object-instance",
    
    "relUrl": "/docs/userguide/data-activities.html#update-object-instance"
  },"64": {
    "doc": "Database",
    "title": "Database",
    "content": "The User Configurable Database in World of Workflows is designed to help you manage your data efficiently and effectively. This chapter will provide an overview of the database functionality and guide you through the process of creating and managing tables, importing and exporting data, searching and filtering records, and integrating with external databases or APIs. ",
    "url": "/docs/userguide/database.html",
    
    "relUrl": "/docs/userguide/database.html"
  },"65": {
    "doc": "Database",
    "title": "Overview of the database functionality",
    "content": "The User Configurable Database offers a flexible and intuitive platform for managing your data, allowing you to: . | Create custom Types (tables) with user-defined fields, data types, and relationships. | Import and export data in various formats, such as CSV . | Search, filter, and sort records to quickly find the information you need. | Integrate with external databases and APIs for seamless data synchronization and access. | Use the database directly within workflows and tasks . | . ",
    "url": "/docs/userguide/database.html#overview-of-the-database-functionality",
    
    "relUrl": "/docs/userguide/database.html#overview-of-the-database-functionality"
  },"66": {
    "doc": "Database",
    "title": "Creating and managing tables",
    "content": "To create a new Type (table) in the User Configurable Database, follow these steps: . | Navigate to the User Configurable Database section in World of Workflows, by going to Admin then Types . | Click on the Add Types button. | Enter a name for the table and a brief description (optional). | Click Save to confirm. | . Once your Type is created, you can begin adding fields: . | In the list of types, identify the type or table you want to work with. | Click Columns . | Click on the Add Column button. | Enter a name for the field and choose the Name, Display Name, Column Description and an appropriate data type (e.g., text, number, date, etc.). | Configure additional field properties, such as display order, visible and indexed. | Click “Save” to confirm. | . To manage existing tables, you can: . | Edit table names, descriptions, and field properties by clicking on the corresponding Edit button. | Delete tables or fields by clicking on the Delete button (be cautious, as this action is irreversible and is designed to work only if you don’t have any entries for this Type). | . A word about data types . Every time you create a column, it needs to have a data type. This tells world of workflows how to display the data and is efficient in how the data is stored by the database. The list of available data types is below: . | Name | Description | Example Uses | . | Big Integer | The Big Integer represents an arbitrarily large integer whose value in theory has no upper or lower bounds. Integers are whole numbers, positive or negative. | Commonly used as Id’s for items where they may grow large, this is the type used as the Id for every object in the system. | . | Integer | Whole number, positive or negative. | The integer is a whole number which commonly is used to represent a count of objects, e.g. 3 people or 5 cats. | . | Decimal 2 | Number with two decimal places. | This is a number with two decimal places, commonly used to represent currency | . | Decimal 5 | Number with five decimal places | This is commonly used to represent the results of calculations, or distance | . | True/False | The Boolean or Bit Type | This is used to represent where we have a state that can be true/false, yes/no or off/on. | . | String | A collection of characters | The string can store words, sentences, paragraphs, books or any other data stored as Base64Encoded. | . | DateTime | The Date and Time | Used to store instances in time, this is stored in the system as UTC[^1] and is presented in the system in local time. | . | Url | Uniform Resource Locator | This is a web link | . | Embed | Embed Code | Not currently used, this is a string which gets rendered in the page as an embed code. | . Relationships . You can create relationships between types in World of Workflows. You do this by adding a column with the data type Relationship and choosing the type you would like to relate to. Relationships allow you to define how objects are related to each other. However, World of Workflows offers a single way to create relationships, but you can implement the three types of relationship by following the guide below: . Imagine we have Object A and Object B . | A one to one (1:1) relationship is easily established by adding a column in Object A with data type Relationship and Type the type of Object B. | A one to many (1:∞) relationship between A and B is established by adding a column in Object B with data type relationship and Type the type of Object A . | A many to many (∞:∞) relationship between object A and B is created by creating a new type (Type C). This has two columns, one is a relationship with the type of Object A and the other is a relationship with the type of Object B. | . Whilst the first two types will appear in the interface, the interface does not understand many to many relationships, however it is possible to develop a workflow that understands this structure. Editing Columns . To edit a column, Navigate to the type itself by going to Admin then Types and then clicking the type. You can then click Columns to see the list of columns and click edit to edit each one. Deleting Types . If you navigate to Admin then Types you can click Delete to delete a type. Note: this only works if there are no data instances in the type. Clicking Delete will immediately delete the type. If you have done this in error, you can easily recreate the type. Editing Data . World of Workflows offers sorting, filtering, inline editing and bulk editing of your data. These features make it incredibly simple to manipulate your data in the system endure you have the correct data ready to work with. Clicking on Admin then Types then clicking the name of the type you want to work with takes you to the data editing screen . This screen allows you to manipulate your data as follows: . Columns . Columns are able to be resized and reordered. You can resize columns by hovering over the vertical separator between the column headers, clicking and dragging left and right. Columns can be re-ordered by clicking a column header and dragging it to a new location. Sort and Filter . To sort your data by a column, click the ^ icon in the column header. When sorted the ^ icon in the column header will be highlighted as shown below: . To filter your data, click the icon in any column header. This will bring up the filter window. Either type into the filter window or click the null or not-null radio buttons to create your filter. When a column is filtered, the filter button will be shown as highlighted . To clear all filters, click the button on the top of the data table, and to edit filters, click the Filters dropdown at the top of the table. Export . To export your data, click the button on the top of the data table. Your browser will automatically download a CSV of that data. Add Columns . To add a column, click the button on top of the data table. You will see the same interface as in add column, above. Edit Columns . To edit columns, click the button on top of the data table. You will then be navigated to the column editing screen. Add Item . To add an item, click the button. The same slide in will appear as in add an item above. Inline edit . Clicking will change the mode to Inline Edit. From here, you can individual edit all the items. Click to exit inline edit. Bulk Delete . To bulk delete, enter inline edit mode, select a number of items by clicking the checkboxes and click the button. Bulk Edit . To bulk Edit, enter inline edit mode, select a number of items and click . By entering data in the slide-in, you will be able to edit multiple rows at once. Refresh data . To refresh the data, click the button on the top right which will reload the data for you. To Choose number of rows shown . To choose the number of rows shown, click the page size dropdown, bottom left. Move between pages . To move between pages, click the &lt; or &gt; buttons on the bottom middle of the data editor. ",
    "url": "/docs/userguide/database.html#creating-and-managing-tables",
    
    "relUrl": "/docs/userguide/database.html#creating-and-managing-tables"
  },"67": {
    "doc": "Database",
    "title": "Importing and exporting data",
    "content": "World of Workflows supports data import and export in CSV. Export . To export data, follow these steps: . | Navigate to Admin -&gt; Types and select the desired table. | Click on the button. | A CSV file will shortly download. | . Import . The following section describes how to import data into world of workflows. | Prepare a CSV with the required data and remove any columns that you do not want to import. Column removal is not mandatory but helps speed up the process. | Navigate to Admin -&gt; Import . | Click Upload a file and browse to the CSV file you want to upload. | When you see the correct details for your CSV file, click Next. | If you are creating a new Type with this import, under the Type dropdown choose New and name the new type. If you are importing data to an existing Type, select the type name in the dropdown and click Next. | The system will automatically suggest fields for your import. You can change these and choose: . | Skip – This column will be ignored . | New - A new Column in your Type will be created in the database from the data in your CSV file. You can enter a Name, Data Type, Display Name, Description, Display Order, whether the column should be Visible and whether it will be a Title column. | &lt;Column name&gt; – choose an existing column name and your CSV data will be added to this column. | Id – This is the match to the ObjectId or Instance Id and will update records with the same Id if they exist in the database. | . | Click Next when your fields are correct . | Click Import to copy the data from your CSV file into the database. | | . ",
    "url": "/docs/userguide/database.html#importing-and-exporting-data",
    
    "relUrl": "/docs/userguide/database.html#importing-and-exporting-data"
  },"68": {
    "doc": "Documentation",
    "title": "Documentation in World of Workflows",
    "content": "World of Workflows includes comprehensive documentation features that help you maintain an organized and well-documented system. By automatically generating crucial documentation such as data diagrams, data dictionaries, views dictionaries, and detailed workflow information, World of Workflows ensures that your team can easily understand and manage your processes. This chapter will cover the key aspects of documentation in World of Workflows: . ",
    "url": "/docs/userguide/documentation.html#documentation-in-world-of-workflows",
    
    "relUrl": "/docs/userguide/documentation.html#documentation-in-world-of-workflows"
  },"69": {
    "doc": "Documentation",
    "title": "Data (ERD) Diagram",
    "content": "An Entity Relationship Diagram (ERD) is a visual representation of the tables and relationships within your User Configurable Database. World of Workflows automatically generates an ERD for your database, enabling you to quickly grasp the structure and connections between tables. This visualization is invaluable for understanding the overall data architecture and identifying areas for optimization or expansion. ",
    "url": "/docs/userguide/documentation.html#data-erd-diagram",
    
    "relUrl": "/docs/userguide/documentation.html#data-erd-diagram"
  },"70": {
    "doc": "Documentation",
    "title": "Data Dictionary",
    "content": "The data dictionary is a comprehensive reference of all tables and columns within your User Configurable Database. It includes information such as table and column names, data types, descriptions, and any constraints or relationships. World of Workflows generates a data dictionary to facilitate a clear understanding of the database structure and enable efficient management and development of your data. ",
    "url": "/docs/userguide/documentation.html#data-dictionary",
    
    "relUrl": "/docs/userguide/documentation.html#data-dictionary"
  },"71": {
    "doc": "Documentation",
    "title": "Views Dictionary",
    "content": "The views dictionary is a catalog of all the views defined within World of Workflows. It includes information such as view names, descriptions, parent views, and associated fields. The views dictionary aids in managing and understanding the different perspectives and hierarchies of your data, allowing you to create more effective views and improve overall user experience. ",
    "url": "/docs/userguide/documentation.html#views-dictionary",
    
    "relUrl": "/docs/userguide/documentation.html#views-dictionary"
  },"72": {
    "doc": "Documentation",
    "title": "Workflow Documentation",
    "content": "World of Workflows provides detailed documentation for each workflow, including: . | Workflow Overview: A summary of the workflow’s purpose, description, and key components. | Activities List: A comprehensive list of all activities used in the workflow, along with their descriptions and configurations. | Flow Diagram: A visual representation of the workflow’s structure, displaying the flow of activities and branching logic. This diagram helps users understand the workflow’s design and execution path, making it easier to optimize and maintain. | . By offering these robust documentation features, World of Workflows empowers your team to manage and develop your systems effectively. Comprehensive documentation not only promotes a clear understanding of your data and workflows but also helps to ensure that your organization can adapt and scale efficiently as your needs evolve. ",
    "url": "/docs/userguide/documentation.html#workflow-documentation",
    
    "relUrl": "/docs/userguide/documentation.html#workflow-documentation"
  },"73": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": " ",
    "url": "/docs/userguide/documentation.html",
    
    "relUrl": "/docs/userguide/documentation.html"
  },"74": {
    "doc": "Dual Triggers",
    "title": "Dual Triggers",
    "content": "During the development of a workflow, it is common to have a workflow based on a timer that you want to run to test it. The following procedure achieves this: . | From the Start button, Create the Cron activity as normal. eg to run on a specific date &amp; time. | Add a join task, wait any | Again from the start button, add an HttpEndpoint activity, giving it a suitable url (eg ‘/1st’) | Link the tasks like this: | . The workflow will now run either at the specified time, or upon pointing a browser at /. eg https://localhost:7063/1st . ",
    "url": "/docs/workflow-development/dual-triggers.html",
    
    "relUrl": "/docs/workflow-development/dual-triggers.html"
  },"75": {
    "doc": "Editing a Workflow",
    "title": "Editing a Workflow",
    "content": "To Work with your workflow definitions, you need to be an admin in system. If you are an Admin, you will see the Admin tab in the top Menu. Click Admin the click Workflows to go to the Workflow Dashboard: . This will open the Workflow Dashboard in the Workflow Definitions Page . Now click on the workflow you wish to edit . The Workflow designer will open. You can now start to edit your workflow. When done, click Publish to publish the new version of your workflow definition. The designer saves automatically, so you don’t need to worry about losing your work. ",
    "url": "/docs/workflow-development/editing-a-workflow.html",
    
    "relUrl": "/docs/workflow-development/editing-a-workflow.html"
  },"76": {
    "doc": "Examples",
    "title": "Examples",
    "content": "This section contains packaged examples of how to solve certain business problems. These are meant to be taken, modified and used by you to solve your own business problems. ",
    "url": "/docs/userguide/examples.html",
    
    "relUrl": "/docs/userguide/examples.html"
  },"77": {
    "doc": "Examples",
    "title": "Designing long-running workflows",
    "content": "As you develop your workflows, you will have workflows in production which you need to change. It is easy to make these changes and they will apply to all future instances of your workflows. However, if you have a workflow that started before your change was made and has not yet completed, Workd Of Workflows will execute your old workflow. This diagram describes this scenario: . The workflow engine will continue to run your workflows as they were designed until they complete. This maintains the integrity of your design, and you can be confident that the workflow will continue to run the way you design it, even if changes are subsequently made to that workflow. This can become a problem if you expect your workflows to run for an extended period of time. For example, your company has a process that manages your employee HR process - from recruitment, onboarding, pay rises and eventual termination of employment. You could write this as a single workflow, and each time an employee starts with the company a new instance of the workflow would be created. The effect of this is that you would have one instance for Jane Smith’s employment, a second instance for John Doe’s employment and so forth. You would expect that your employment process would change during the period of a specific employee’s employment. However, the instances that are still running will not inherit any design changes you make to the workflow. We hope and expect that employees will be with us for many years, and change to the workflow during this time is inevitable. So, how do we manage this? . Firstly, break up your workflows into manageable pieces. Design your workflows so that each one can be completed in a ‘reasonable’ period of time. This might be a day, a week or month, depending on the workflow and the likelihood of change. Here is an example of one way to break up this sample workflow. Each workflow could call the next. For example, changes made to the Pay Rise workflow would now apply to an employee currently being processed by the Onboarding workflow. What if you have a complex workflow and breaking it into small flows does not suit? . A more challenging example might be a workflow to manage thousands of insurance renewals, where a complex process must run for months and there is a high likelihood of making process improvements whilst thousands of workflow instances are running. We can imagine breaking your workflows into smaller pieces. Part 2 could be called from Part 1. In Part 2 you may need 20 tasks, some asked in only specific scenarios. However, changes to Part 2 might need to impact the existing long-running workflow instances. We have developed the Overview workflow concept to manage this. Implementing an Overview workflow . One way to have a single workflow run for the entire process and still be able to make changes along the way is to use a simple workflow we will call an Overview workflow. Here is how to design this workflow. | Create a workflow, give it a suitable name, such as HR Overview. | Implement a method to start your HR Overview workflow (eg from a data object (see Implementing triggers), a timer (see Error! Reference source not found.) ) . | Set up any variables you need to pass to the main workflow, such as the ObjectID of the triggering object instance . | Add a Run workflow activity to kick off your main workflow . | Add a Run JavaScript activity to grab the outcome of your main workflow . | (optional, and recommended for debugging) add a TaskCreate activity to provide you with the ability to stop your workflow . | Join everything up. | . You will notice that there is almost nothing in this workflow that will ever need to change. All it does is to call another workflow. The simpler you make your Overview workflow, the less likelihood that it will ever need changes. Here are the activities in detail . | The workflow is called StaffOnboardingOverview . | I chose an Object Instance Trigger to start this workflow. It is run from within a Staff instance: . | Set a variable called ObjectId to contain the ObjectId of the initiating Staff object: Note: we use JavaScript to get the value, using the Name of the trigger activity to get the ObjectID, using this formula: . | . activities.TriggerStaff.InstanceId() . | This is the Run Workflow activity: . The workflow definition uses a Liquid Filter to allow us to use the name of the workflow we are calling (rather than it’s ID) . The Input is the JSON we will be passing to our main workflow . The branches Continue &amp; Cancel are the text entered into Possible Outcomes. Note the Name on the next page: You will use this name in the next activity. | The Run JavaScript activity . | . Note how the name of the Run Workflow activity is used in the Run JavaScript. var parameters = JSON.parse(activities.runDetailWorkflow.Output().workflowOutput) . for(const property in parameters) . { .     setVariable(property.toString(),parameters[property]); . } . | (Optional) Create a Task to allow you to stop the Overview workflow at will. Note the branches … . | Add a Finish activity and connect the activities like this: . | . Implementing the main workflow . The main workflow can now be designed to be called as many times as needed to ensure that it does not run for too long. Accept parameters from the Overview workflow . Create this as the first activity in your main workflow: . Use this JavaScript to take the JSON passed from the Overview workflow and convert it to dot-notation variables. var parameters = JSON.parse(input) . setVariable(“Parameters”,parameters) . If the JSON passed in is . { . “ObjectId”:123 . } . This allows you to reference the passed in ObjectId in Liquid as . And in JavaScript as . getVariable(“Parameters”).ObjectId . Use Status fields as starting points of your main workflow . Use a Switch to direct the flow, using data saved in your object to determine where the flow is up to. For example: . In this switch statement you first want to match the last checkpoint in your workflow then the next-to-last checkpoint, and so on. Return to the Overview workflow frequently . This is the Finish activity. It passes back the ObjectId so that the Overview workflow can use it to call the main workflow again. It also passes back the ‘Continue’ Outcome, which is used to determine whether to run the main workflow again. (If we pass back ‘Cancel’, the Overview workflow will stop). Notice that the main workflow does the minimum amount of processing between the switch statement and the finish statement, ideally just enough to prepare and process one Task Create activity. This is where the magic occurs: now the main workflow only has to be in existence for one task at a time. As soon as this task is complete, a new instance of the main workflow is created, and continued from this checkpoint. Ensure variables are available . Note that you will need to ensure the variables you set in your main workflow are available when the workflow is restarted. This can be done by calling a ‘set variables’ workflow, or specifically in the main workflow. Example of a ‘set variables’ workflow: . We pass in a suitable ObjectID that we are always going to know. Note that Mode is Blocking, waiting for the SetupVariables workflow to complete. The first activity in the SetupVariables workflow is to get the database object using the passed in ObjectId. For example: . The rest of the variables are then set up . The last 2 activities in the SetupVariables workflow are to set up send back the variables to the calling workflow . Another method of setting variables in the main workflow is to build up the variables from the known data. For example, in this case, if the Staff already has a SalaryPackage we can get the SalaryPackage object from the Staff object. Otherwise we can create the SalaryPackage object and save the relationship back to the Staff object . ",
    "url": "/docs/userguide/examples.html#designing-long-running-workflows",
    
    "relUrl": "/docs/userguide/examples.html#designing-long-running-workflows"
  },"78": {
    "doc": "Use in World of Workflows",
    "title": "Liquid Expressions",
    "content": "The following Liquid expressions are supported: . ",
    "url": "/docs/liquid/expressions-in-workflows.html#liquid-expressions",
    
    "relUrl": "/docs/liquid/expressions-in-workflows.html#liquid-expressions"
  },"79": {
    "doc": "Use in World of Workflows",
    "title": "Common Variables",
    "content": "Workflow Variables . Use the following syntax to access a workflow variable: . {{ Variables.NameOfVariable }} . For example, given a workflow variable called FirstName with a value of “Alice”, the expression . Hello {{ Variables.FirstName }} . will result in Hello Alice. Input . Input values can be accessed using the following syntax: . {{ Input }} . Activity Output . To access a named activity’s output, use the following syntax: . {{ Activities.SomeActivityName.Output }} . CorrelationId . Returns the correlation ID (if any) of the currently executing workflow. {{ CorrelationId }} . WorkflowInstanceId . Returns the workflow instance ID of the currently executing workflow. {{ WorkflowInstanceId }} . WorkflowDefinitionId . Returns the workflow definition ID of the currently executing workflow. {{ WorkflowDefinitionId }} . WorkflowDefinitionVersion . Returns the workflow definition version of the currently executing workflow. {{ WorkflowDefinitionVersion }} . Configuration . Provides access to a .NET configuration value. See Configuration for more details on available configuration items in World of Workflows. {{ Configuration.SomeSection }} . As an example, let’s say you have the following JSON in appsettings.json: . { \"Elsa\": { \"Smtp\": { \"Host\": \"localhost\", \"Port\": 2525 } } } . You can access the configured Port value using the following expression: . {{ Configuration.Elsa.Smtp.Port }} . ",
    "url": "/docs/liquid/expressions-in-workflows.html#common-variables",
    
    "relUrl": "/docs/liquid/expressions-in-workflows.html#common-variables"
  },"80": {
    "doc": "Use in World of Workflows",
    "title": "Common Filters",
    "content": "json . A liquid filter that renders the specified value as a JSON string. {{ Input | json }} . Example output: . { \"SomeDocument\": { \"Title\": \"About Elsa Workflows\" } } . base64 . A liquid filter that renders the specified value as a bas64 representation. The value is first converted to a string. If the value is an object, array, dictionary or datetime, it is first serialized using JsonConvert.SerializeObject before being encoded as base64. {{ \"Some string value\" | base64 }} . Example output: . ## Workflow Filters ### workflow_definition_id Translates the specified workflow name or workflow tag into a workflow ID. This is useful for activities such as RunWorkflow which require a workflow ID to run. Usage: ```liquid {{ \"SomeWorkflowName\" | workflow_definition_id }} . {{ \"SomeWorkflowTag\" | workflow_definition_id: tag }} . ",
    "url": "/docs/liquid/expressions-in-workflows.html#common-filters",
    
    "relUrl": "/docs/liquid/expressions-in-workflows.html#common-filters"
  },"81": {
    "doc": "Use in World of Workflows",
    "title": "HTTP Variables",
    "content": "Request . Provides access to various properties on the current HTTP Request object: . {{ Request.QueryString }} {{ Request.ContentType }} {{ Request.ContentLength }} {{ Request.Form }} {{ Request.Protocol }} {{ Request.Path }} {{ Request.PathBase }} {{ Request.Host }} {{ Request.IsHttps }} {{ Request.Scheme }} {{ Request.Method }} . ",
    "url": "/docs/liquid/expressions-in-workflows.html#http-variables",
    
    "relUrl": "/docs/liquid/expressions-in-workflows.html#http-variables"
  },"82": {
    "doc": "Use in World of Workflows",
    "title": "HTTP Filters",
    "content": "signal_url . A liquid filter that generates a fully-qualified absolute signal URL that will trigger the workflow instance from which this function is invoked. Example: . {{ \"MySignal\" | signal_url }} . Example output: . https://localhost:5001/signals/trigger/{some base64 token} . ",
    "url": "/docs/liquid/expressions-in-workflows.html#http-filters",
    
    "relUrl": "/docs/liquid/expressions-in-workflows.html#http-filters"
  },"83": {
    "doc": "Use in World of Workflows",
    "title": "Use in World of Workflows",
    "content": " ",
    "url": "/docs/liquid/expressions-in-workflows.html",
    
    "relUrl": "/docs/liquid/expressions-in-workflows.html"
  },"84": {
    "doc": "Filters",
    "title": "Filters",
    "content": "The following table contains filters aavailable using Liquid. | Filter | Description | Input | Output | . | abs | Returns the absolute value of a number. | {{ -17 | abs }} | 17 | . | append | Adds the specified string to the end of another string | {{ \"/my/fancy/url\" | append: \".html\" }} | /my/fancy/url.html | . | at_least | Limits a number to a minimum value. | {{ 5 | at_least: 3 }} | 5 | . | at_most | Limits a number to a maximum value. | {{ 4 | at_most: 3 }} | 3 | . | capitalize | Makes the first character of a string capitalized and converts the remaining characters to lowercase. | {{ \"hello world\" | capitalize }} | Hello world | . | ceil | Rounds a number up to the nearest integer. | {{ 4.2 | ceil }} | 5 | . | compact | Removes any nil values from an array. | {{ [1, 2, 3, \"\", nil, false] | compact }} | [1, 2, 3] | . | concat | Concatenates two strings. | {{ \"hello\" | concat: \" world\" }} | hello world | . | date | Formats a date. | {{ \"2016-01-01\" | date: \"%Y\" }} | 2016 | . | default | Returns the specified value if the input is nil, false or an empty string. | {{ nil | default: \"hello\" }} | hello | . | divided_by | Divides a number by another number. | {{ 100 | divided_by: 2 }} | 50 | . | downcase | Converts a string to lowercase. | {{ \"Hello World\" | downcase }} | hello world | . | escape | Escapes a string. | {{ \"&lt;script&gt;\" | escape }} | &amp;lt;script&amp;gt; | . | escape_once | Escapes a string once. | {{ \"&lt;script&gt;\" | escape_once }} | &amp;lt;script&amp;gt; | . | first | Returns the first element of an array. | {{ [1, 2, 3] | first }} | 1 | . | floor | Rounds a number down to the nearest integer. | {{ 4.2 | floor }} | 4 | . | join | Joins the elements of an array with a specified string. | {{ [1, 2, 3] | join: \", \" }} | 1, 2, 3 | . | last | Returns the last element of an array. | {{ [1, 2, 3] | last }} | 3 | . | lstrip | Removes whitespace from the left side of a string. | {{ \" hello world \" | lstrip }} | hello world | . | map | Applies a filter to each element of an array. | {{ [1, 2, 3] | map: \"plus: 1\" }} | [2, 3, 4] | . | minus | Subtracts a number from another number. | {{ 100 | minus: 50 }} | 50 | . | modulo | Returns the remainder of a number divided by another number. | {{ 100 | modulo: 3 }} | 1 | . | newline_to_br | Converts newlines to &lt;br&gt; tags. | {{ \"hello \\n world\" | newline_to_br }} | hello &lt;br&gt; world | . | plus | Adds a number to another number. | {{ 100 | plus: 50 }} | 150 | . | prepend | Adds the specified string to the beginning of another string. | {{ \"fancy/url\" | prepend: \"/my/\" }} | /my/fancy/url | . | remove | Removes all instances of a specified string from another string. | {{ \"hello world\" | remove: \"l\" }} | heo word | . | remove_first | Removes the first instance of a specified string from another string. | {{ \"hello world\" | remove_first: \"l\" }} | hello word | . | replace | Replaces all instances of a specified string with another string. | {{ \"hello world\" | replace: \"l\", \"p\" }} | heppo worpd | . | reverse | Reverses the order of the elements in an array. | {{ [1, 2, 3] | reverse }} | [3, 2, 1] | . | round | Rounds a number to the nearest integer. | {{ 4.2 | round }} | 4 | . | rstrip | Removes whitespace from the right side of a string. | {{ \" hello world \" | rstrip }} | hello world | . | size | Returns the size of an array or string. | {{ [1, 2, 3] | size }} | 3 | . | slice | Returns a slice of an array. | {{ [1, 2, 3] | slice: 1, 2 }} | [2, 3] | . | sort | Sorts the elements of an array. | {{ [3, 2, 1] | sort }} | [1, 2, 3] | . | sort_natural | Sorts the elements of an array in natural order. | {{ [\"a1\", \"a2\", \"a10\"] | sort_natural }} | [\"a1\", \"a2\", \"a10\"] | . | split | Splits a string into an array. | {{ \"hello world\" | split: \" \" }} | [\"hello\", \"world\"] | . | strip | Removes whitespace from both sides of a string. | {{ \" hello world \" | strip }} | hello world | . | strip_html | Removes HTML tags from a string. | {{ \"&lt;p&gt;hello world&lt;/p&gt;\" | strip_html }} | hello world | . | strip_newlines | Removes newlines from a string. | {{ \"hello \\n world\" | strip_newlines }} | hello world | . | times | Multiplies a number by another number. | {{ 100 | times: 2 }} | 200 | . | truncate | Truncates a string to a specified length. | {{ \"hello world\" | truncate: 5 }} | hello... | . | truncatewords | Truncates a string to a specified number of words. | {{ \"hello world\" | truncatewords: 1 }} | hello... | . | uniq | Removes duplicate elements from an array. | {{ [1, 2, 3, 2, 1] | uniq }} | [1, 2, 3] | . | upcase | Converts a string to uppercase. | {{ \"Hello World\" | upcase }} | HELLO WORLD | . | url_encode | URL encodes a string. | {{ \"hello world\" | url_encode }} | hello%20world | . | url_decode | URL decodes a string. | {{ \"hello%20world\" | url_decode }} | hello world | . | where | Filters an array of objects by a specified property. | {{ site.posts | where: \"title\", \"hello world\" }} | [&lt;Post title=\"hello world\"&gt;] | . ",
    "url": "/docs/liquid/filters.html#filters",
    
    "relUrl": "/docs/liquid/filters.html#filters"
  },"85": {
    "doc": "Filters",
    "title": "Filters",
    "content": " ",
    "url": "/docs/liquid/filters.html",
    
    "relUrl": "/docs/liquid/filters.html"
  },"86": {
    "doc": "Home",
    "title": "Workflows University",
    "content": "World of Workflows Version 1.7. Released 6 December 2022 . Release Notes . Welcome to Workflows University. This collection of processes and documentation will help you get used to working with World of Workflows. READ THE CURRENT USER GUIDE HERE . This guide assumes you are new to the World of Workflows and want to quickly get everything up and running. To get started, begin with our Workflows Primer Course . There are differences between the Personal Edition and the Business and Enterprise Editions. This initial Release contains the Personal Edition. Please read the version differences document here . | Installation - Use this guide to install World of Workflows on Windows, Linux or Mac. | Tasks - Manage end-user tasks and use the task management system. | Activities - Reference information on all the activities that can be used to create workflows. | Object Workflows - Create Workflows that can be started from the Object Edit Screen. | Release Notes - Read the latest release notes. | Workflow Development - Learn how to work with workflows. | Working with Workflow Definitions . | Creating a Workflow - How to create a Workflow Definitions | Editing a Workflow - How to edit a workflow definition. | Deleting a Workflow | . | Starting Workflows - Learn how to start a workflow. | Dual Triggers - Learn how to create a workflow that can be started from several triggers. | . | Working with Data - Shows how to work with data in Workflows | Flow Control | Working with Tasks - Learn how to work with tasks in Workflows. | . | Electronic Forms . | Jotform Integration - Learn how to integrate Jotform with your system and deliver awesome electronic forms. | . | Reporting - Learn how to report on all the data in your instance of World of Workflows | Solutions - Solutions are configured files and instructions to get you up to speed quickly. | Advanced Configuration . | Changing Directory - Shows how to host workflows in a different Azure Active Directory. | Plugins - This shows how to create plugins for World of Workflows. | Backup - Shows how to configure automatic backup and restore of your system. | Configuration - Use this guide to configure your instance of World of Workflows. | . | Reference Guides . | Activities Reference - Reference information on all the activities that can be used to create workflows. | Liquid Reference - Reference Guide on the Liquid Language used in Workflows. | Javascript Reference - Reference Guide on the Javascript Language used in Workflows. | Compensable Activities - Reference Guide on the Compensable Activities used in Workflows. | Gmail Integration - How to integrate Workflows PE with Gmail. | . | How to Guides - Small articles detailing how to achieve certain tasks with Workflows. | . ",
    "url": "/#workflows-university",
    
    "relUrl": "/#workflows-university"
  },"87": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"88": {
    "doc": "Installation",
    "title": "Installation",
    "content": "This document contains instructions on how to install and configure World of Workflows on your machine. ",
    "url": "/docs/installation.html",
    
    "relUrl": "/docs/installation.html"
  },"89": {
    "doc": "Installation",
    "title": "Windows Installation",
    "content": ". | Download the latest version of .NET 8. | Download the latest version of World of Workflows. | Extract the ZIP file to a folder of your choice. | Execute “RunWorkflows.cmd”. | Navigate to https://localhost:7063. | . ",
    "url": "/docs/installation.html#windows-installation",
    
    "relUrl": "/docs/installation.html#windows-installation"
  },"90": {
    "doc": "Installation",
    "title": "Mac (Arm M1 Chip) Installation",
    "content": ". | Download the latest version of .NET 8. | Download the latest version of World of Workflows. | Extract the “Mac-arm64” ZIP file to a folder of your choice. | Execute the following from the terminal: | . mkdir App_Data dotnet dev-certs https dotnet HubOneWorflowsApp.Server.dll --urls \"https://*:7063\" . | Open Chrome and navigate to https://localhost:7063. | . ",
    "url": "/docs/installation.html#mac-arm-m1-chip-installation",
    
    "relUrl": "/docs/installation.html#mac-arm-m1-chip-installation"
  },"91": {
    "doc": "Introduction",
    "title": "Overview of World of Workflows",
    "content": "World of Workflows is a powerful software solution designed to streamline and optimize your business processes by providing an intuitive platform for creating, managing, and automating both simple and complex workflows. We consider any process you perform with more than one step to be considered a workflow. With over 100 activities to choose from, and plugins which extend this functionality, you can easily tailor workflows to suit your organization’s specific needs. By integrating a rich, dynamic, user-configurable database and an advanced task management system, World of Workflows enables you to efficiently manage your projects and tasks, collaborate with your team, and track progress in real-time. World of Workflows comes in two key editions: . | Personal Edition or PE runs on your local PC and is for personal use or workflow development. | Business Edition or BE runs on any of the major cloud providers or your servers and offers enhanced features such as single sign on and rich permissions and access control. | . ",
    "url": "/docs/userguide/introduction.html#overview-of-world-of-workflows",
    
    "relUrl": "/docs/userguide/introduction.html#overview-of-world-of-workflows"
  },"92": {
    "doc": "Introduction",
    "title": "Key features and components of World of Workflows",
    "content": ". | Workflow Editor, a core component of World of Workflows, offers a flexible and user-friendly interface for building and customizing workflows. Some of the key features and components include: . | A wide range of pre-built activities that can be easily added, edited, and connected within your workflows. These activities can be extended using Plugins. | . | A user-configurable database for managing data and integrating with external databases or APIs. | A robust task management system that enables you to create, assign, and track tasks, as well as collaborate with your team members. | Workflow templates called Solutions for quickly implementing common processes and best practices. | Advanced features such as workflow automation with triggers, third-party application integration, and the ability to create custom activities. | Comprehensive security and permissions settings to ensure data protection and controlled access with business edition. | Plugins, which extend the capability of the system. | OData access which simplifies the process of reporting and dashboarding of your data. | Credential manager which allows you to securely connect to 3rd party APIs and systems, such as ChatGPT, Xero, Office 365 and many, many more. | . Our extensible database which can be accessed from the User Interface or within workflows provides the following features: . | Extremely high performance | Customizable tables (Types), Columns and Relationships | Custom views to see filtered and sorted database entries. | Flexible import | Full Export | Inline editing | Sort, Filter and paging | . Our detailed task system allows for the system to reach out to users and instruct them where manual tasks are required and includes the following features: . | Task Queues | Task Details formatted with Markdown | Update data in the database directly from a task | Custom outcomes which branch the workflow. | . ",
    "url": "/docs/userguide/introduction.html#key-features-and-components-of-world-of-workflows",
    
    "relUrl": "/docs/userguide/introduction.html#key-features-and-components-of-world-of-workflows"
  },"93": {
    "doc": "Introduction",
    "title": "Examples of process automation with world of workflows.",
    "content": "Our customers have used world of workflows to automate a number of business processes. Here are some examples: . | A media company uses world of workflows integrated with ChatGPT to write draft articles on incoming press releases automatically. | A soccer club uses world of workflows to notify coaches and managers when it is their turn to put up or take down nets on a soccer field based on the draw in an external system. | An independent school uses world of workflows to manage their enrolment process. | A managed service provider users world of workflows to correctly bill customers for their telephone voice usage. | A sporting club uses world of workflows to automatically generate a weekly newsletter. | A not-for-profit uses world of workflows to manage their grants application process. | . ",
    "url": "/docs/userguide/introduction.html#examples-of-process-automation-with-world-of-workflows",
    
    "relUrl": "/docs/userguide/introduction.html#examples-of-process-automation-with-world-of-workflows"
  },"94": {
    "doc": "Introduction",
    "title": "Getting Started",
    "content": "This chapter will guide you through the initial steps of setting up and using World of Workflows, including system requirements, installation, account creation, and navigation of the user interface. By the end of this chapter, you will be well-prepared to begin exploring the software’s features and functionalities. ",
    "url": "/docs/userguide/introduction.html#getting-started",
    
    "relUrl": "/docs/userguide/introduction.html#getting-started"
  },"95": {
    "doc": "Introduction",
    "title": "System requirements",
    "content": "Before installing World of Workflows, ensure that your system meets the following minimum requirements: . | Requirement | Personal Edition | Business Edition | . | Operating System | Windows 10 or better | Windows 10 1607+, macOS 10.15 (Catalina) or later, or Linux (Ubuntu 18.04 or later). Includes Windows Server 2012 and above. | . | Processor | Intel Core i3 or equivalent | Intel Core i3, ARM processor or Apple M1, M2 | . | Memory | 4Gb RAM Recommended | 8Gb RAM Recommended | . | Disk Space | 512Mb Available Storage | 2Gb Available Storage | . | Internet Connection | Broadband Connection | Broadband Connection | . | Database | Included | Included or Microsoft SQL Server (Optional) | . Please note that better performance may be achieved with higher system specifications. ",
    "url": "/docs/userguide/introduction.html#system-requirements",
    
    "relUrl": "/docs/userguide/introduction.html#system-requirements"
  },"96": {
    "doc": "Introduction",
    "title": "Installation process",
    "content": "Installing World of Workflows PE . To install World of Workflows PE for Windows, follow the steps below: . | Visit the World of Workflows website (www.worldofworkflows.com) and navigate to the Plans and Pricing section. | Choose the appropriate plan and then download the appropriate installer for your operating system (Windows, macOS, or Linux). | Download the installer and save it to your desired location. | Run the installer and follow the on-screen prompts to complete the installation process. | Once the installation is complete, launch World of Workflows using the desktop shortcut or by searching for it in your applications menu. | . Installing World of Workflows Business . As World of Workflows Business works with Azure Active Directory, the process for installation is a little more complex and requires additional work. Pre-requisites . In order to install world of workflows BE, you will need: . | Access to an Azure Active Directory Account and have the “Manage Applications” permission. | Access to the Microsoft Azure Portal and have access to application registrations and enterprise applications | Access to a server to run World of Workflows. This can be Windows, Linux or Mac, will need to have a SSL certificate and be available on the web on port 443 for SSL. | . Installation Process . | Download World of Workflows BE . | Once you have subscribed to World of Workflows BE, you will be granted access to the installation resources. Download your copy of World of Workflows BE for the platform you are installing to. The download will come as a zip file. | . | Prepare Azure Active Directory . | The process to install World of Workflows BE is complicated, but has been simplified for you through a simple powershell script. | Inside the zip file downloaded in section 1, above, you will find the file WOWFBEConfiguration.PS1 | From a powershell prompt, run as Administrator, run WOWFBEConfiguration.PS1 | The script will launch a browser for you to login as the admin account from the pre-requisites | the script will as for the name of the Client and Server Applications. These are for their registrations in Azure AD. Press Enter to accept the defaults or Enter your own entries. Note: The system creates two application registrations, one for the Client application and another for the server. | Next, enter the address of your instance in the format as shown. This will be the final URL of your World of Workflows Installation. | When complete, the powershell script will return you to the login prompt. | Navigate to App Registrations in the Azure Portal (https://portal.azure.com) -&gt; Azure Active Directory -&gt; App Registrations | Choose your Server Application named in step g above | Click API Permissions | Click Add a permission | Click Microsoft Graph | Choose Delegated Permissions | Search for User.Read.All | Select the checkbox and click Add Permissions | Click Grant Admin Consent | Navigate to Azure Active Directory -&gt; Enterprise Applications | Click the X on the filter saying Application type == Enterprise Applications X | Select your Server Application | Click Users and Groups | Grant the users who will administer World of Workflows Administrative Access | . | . ",
    "url": "/docs/userguide/introduction.html#installation-process",
    
    "relUrl": "/docs/userguide/introduction.html#installation-process"
  },"97": {
    "doc": "Introduction",
    "title": "Installation of Business Edition",
    "content": "Installation on a Windows Server using IIS . This is the procedure to install on a Windows Server using IIS . | Create a new folder for World of Workflows | Extract the contents of the downloaded Zip File | Copy the appsettings.json file created above to that folder | In IIS, create a new WebSite, and point it at the folder | Download and install the ASP.NET Core Runtime Hosting bundle from https://dotnet.microsoft.com/en-us/download/dotnet/8.0 | . Installation on an Azure Web Application . The process for installation on an Azure Web Application. | Create a New Azure Web Application | Create a zip file with the root being the platform level (.e.g linux-x64) | Copy appsettings.json configured above to the zip file | In powershell, run the following commands: | . connect-AzAccount \\#Connect to Azure get-AzSubscription \\#Show Azure Subscriptions set-azContext -Subscription \\&lt;SubscriptionID\\&gt; \\#Connect to the correct subscription publish-AzWebApp -ResourceGroupName \\&lt;ResourceGroup\\&gt; -Name \\&lt;AppName\\&gt; -ArchivePath \\&lt;Path_to_Zip_File\\&gt; \\#publish the application . Navigating the user interface . The World of Workflows user interface is designed to be intuitive and user-friendly. Here are the main components to familiarize yourself with: . | Dashboard: The Dashboard provides a high-level overview of your projects, tasks, and workflows. From here, you can access the Task Management System, User Configurable Database, and Workflows editor. | Tasks: This section allows you to create, assign, and manage tasks, as well as collaborate with your team. | Views: Views you have created will show as menu options, beside Tasks | Admin: Accessible through the admin section in the top-right corner, this section allows you to manage . | Workflows: This is where you can create, edit, and manage your workflows, add and configure activities, and automate processes using triggers. | Types: Here you can create, modify, and manage your data tables, export data, and integrate with external databases or APIs. | Views: You can create, modify and manage collections of data types, called Views. | Tasks: You can view and manage all of the tasks in the system. | Import: Our intuitive import wizard allows you to import CSV data into the platform | Workflows University: Integrated training and solution content to help you get the most out of the platform | Documentor: Instantly create automatic documentation of your configuration including database and workflows. | Settings: your account settings, security, and permissions. | Plugins: Extend your system with plugins from our plugin library | Solutions: Import and export entire configurations to allow rapid prototyping and deployment. | . | . With your World of Workflows account set up and a basic understanding of the user interface, you are now ready to dive into the powerful features and functionalities of the software. The following chapters will provide in-depth guidance on using the User Configurable Database, Task Management System, and Workflows to optimize your business processes. ",
    "url": "/docs/userguide/introduction.html#installation-of-business-edition",
    
    "relUrl": "/docs/userguide/introduction.html#installation-of-business-edition"
  },"98": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "Welcome to World of Workflows! World of Workflows is a software solution that allows anyone to automate business processes, be those simple processes for yourself or processes which encompass your entire business. ",
    "url": "/docs/userguide/introduction.html",
    
    "relUrl": "/docs/userguide/introduction.html"
  },"99": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "Liquid uses a combination of objects, tags, and filters inside template files to display dynamic content. Objects . Objects contain the content that Liquid displays on a page. Objects and variables are displayed when enclosed in double curly braces: {{ and }}. Input . {{ page.title }} . Output . In this case, Liquid is rendering the content of the title property of the page object, which contains the text Introduction. ### Tags Tags create the logic and control flow for templates. The curly brace percentage delimiters ```{%``` and ```%}``` and the text that they surround do not produce any visible output when the template is rendered. This lets you assign variables and create conditions or loops without showing any of the Liquid logic on the page. #### Input ```Liquid {% if user %} Hello {{ user.name }}! {% endif %} . Output . Hello Adam! . Tags can be categorized into various types: . | Control flow | Iteration | Template | Variable assignment | . You can read more about each type of tag in their respective sections. Filters . Filters change the output of a Liquid object or variable. They are used within double curly braces {{ }} and variable assignment, and are separated by a pipe character |. Input . {{ \"/my/fancy/url\" | append: \".html\" }} . Output . Multiple filters can be used on one output, and are applied from left to right. #### Input ```liquid {{ \"adam!\" | capitalize | prepend: \"Hello \" }} . Output . Hello Adam! . ",
    "url": "/docs/liquid/introduction.html#introduction",
    
    "relUrl": "/docs/liquid/introduction.html#introduction"
  },"100": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "/docs/liquid/introduction.html",
    
    "relUrl": "/docs/liquid/introduction.html"
  },"101": {
    "doc": "Iteration",
    "title": "Iteration",
    "content": "Iteration tags repeatedly run blocks of code. ",
    "url": "/docs/liquid/iteration.html#iteration",
    
    "relUrl": "/docs/liquid/iteration.html#iteration"
  },"102": {
    "doc": "Iteration",
    "title": "for",
    "content": "Repeatedly executes a block of code. For a full list of attributes available within a for loop, refer to the forloop object. Input . {% for product in collection.products %} {{ product.title }} {% endfor %} . Output . hat shirt pants . ",
    "url": "/docs/liquid/iteration.html#for",
    
    "relUrl": "/docs/liquid/iteration.html#for"
  },"103": {
    "doc": "Iteration",
    "title": "else",
    "content": "Specifies a fallback case for a for loop which will run if the loop has zero length. Input . {% for product in collection.products %} {{ product.title }} {% else %} The collection is empty. {% endfor %} . Output . The collection is empty. ",
    "url": "/docs/liquid/iteration.html#else",
    
    "relUrl": "/docs/liquid/iteration.html#else"
  },"104": {
    "doc": "Iteration",
    "title": "break",
    "content": "Causes the loop to stop iterating when it encounters the break tag. Input . {% for i in (1..5) %} {% if i == 4 %} {% break %} {% else %} {{ i }} {% endif %} {% endfor %} . Output . 1 2 3 . ",
    "url": "/docs/liquid/iteration.html#break",
    
    "relUrl": "/docs/liquid/iteration.html#break"
  },"105": {
    "doc": "Iteration",
    "title": "continue",
    "content": "Causes the loop to skip the current iteration when it encounters the continue tag. Input . {% for i in (1..5) %} {% if i == 4 %} {% continue %} {% else %} {{ i }} {% endif %} {% endfor %} . Output . 1 2 3 5 . ",
    "url": "/docs/liquid/iteration.html#continue",
    
    "relUrl": "/docs/liquid/iteration.html#continue"
  },"106": {
    "doc": "Iteration",
    "title": "for (parameters)",
    "content": "limit . Limits the loop to the specified number of iterations. Input . &lt;!-- if array = [1,2,3,4,5,6] --&gt; {% for item in array limit:2 %} {{ item }} {% endfor %} . Output . 1 2 . offset . Begins the loop at the specified index. Input . &lt;!-- if array = [1,2,3,4,5,6] --&gt; {% for item in array offset:2 %} {{ item }} {% endfor %} . Output . 3 4 5 6 . To start a loop from where the last loop using the same iterator left off, pass the special word continue. Input . &lt;!-- if array = [1,2,3,4,5,6] --&gt; {% for item in array limit: 3 %} {{ item }} {% endfor %} {% for item in array limit: 3 offset: continue %} {{ item }} {% endfor %} . Output . 1 2 3 4 5 6 . range . Defines a range of numbers to loop through. The range can be defined by both literal and variable numbers, and can be pulled from a variable. Input . {% for i in (3..5) %} {{ i }} {% endfor %} {% assign num = 4 %} {% assign range = (1..num) %} {% for i in range %} {{ i }} {% endfor %} . Output . 3 4 5 1 2 3 4 . reversed . Reverses the order of the loop. Note that this flag’s spelling is different from the filter reverse. Input . &lt;!-- if array = [1,2,3,4,5,6] --&gt; {% for item in array reversed %} {{ item }} {% endfor %} . Output . 6 5 4 3 2 1 . ",
    "url": "/docs/liquid/iteration.html#for-parameters",
    
    "relUrl": "/docs/liquid/iteration.html#for-parameters"
  },"107": {
    "doc": "Iteration",
    "title": "forloop (object)",
    "content": "Information about a parent for loop. { \"first\": true, \"index\": 1, \"index0\": 0, \"last\": false, \"length\": 4, \"rindex\": 3 } . Use the forloop object . #### Input . {% assign smoothie_flavors = \"orange, strawberry, banana\" | split: \", \" %} {% for flavor in smoothie_flavors -%} {%- if forloop.length &gt; 0 -%} {{ flavor }}{% unless forloop.last %}-{% endunless -%} {%- endif -%} {% endfor %} . Output . ### forloop (properties) | Property | Description | Returns | --- | --- | --- | length | The total number of iterations in the loop. | number | parentloop | The parent forloop object. If the current for loop isn’t nested inside another for loop, then nil is returned. | forloop | index | The 1-based index of the current iteration. | number | index0 | The 0-based index of the current iteration. | number | rindex | The 1-based index of the current iteration, in reverse order. | number | rindex0 | The 0-based index of the current iteration, in reverse order. | number | first | Returns true if the current iteration is the first. Returns false if not. | boolean | last | Returns true if the current iteration is the last. Returns false if not. | boolean ## cycle Loops through a group of strings and prints them in the order that they were passed as arguments. Each time cycle is called, the next string argument is printed. cycle must be used within a for loop block. ### Input ```liquid {% cycle \"one\", \"two\", \"three\" %} {% cycle \"one\", \"two\", \"three\" %} {% cycle \"one\", \"two\", \"three\" %} {% cycle \"one\", \"two\", \"three\" %} . Output . one two three one . Uses for cycle include: . | applying odd/even classes to rows in a table | applying a unique class to the last product thumbnail in a row | . cycle (parameters) . cycle accepts a “cycle group” parameter in cases where you need multiple cycle blocks in one template. If no name is supplied for the cycle group, then it is assumed that multiple calls with the same parameters are one group. Input . {% cycle \"first\": \"one\", \"two\", \"three\" %} {% cycle \"second\": \"one\", \"two\", \"three\" %} {% cycle \"second\": \"one\", \"two\", \"three\" %} {% cycle \"first\": \"one\", \"two\", \"three\" %} . Output . one one two two . tablerow . Generates an HTML table. Must be wrapped in opening &lt;table&gt; and closing &lt;/table&gt; HTML tags. For a full list of attributes available within a tablerow loop, refer to the tablerowloop object. Input . &lt;table&gt; {% tablerow product in collection.products %} {{ product.title }} {% endtablerow %} &lt;/table&gt; . Output . &lt;table&gt; &lt;tr class=\"row1\"&gt; &lt;td class=\"col1\"&gt; Cool Shirt &lt;/td&gt; &lt;td class=\"col2\"&gt; Alien Poster &lt;/td&gt; &lt;td class=\"col3\"&gt; Batman Poster &lt;/td&gt; &lt;td class=\"col4\"&gt; Bullseye Shirt &lt;/td&gt; &lt;td class=\"col5\"&gt; Another Classic Vinyl &lt;/td&gt; &lt;td class=\"col6\"&gt; Awesome Jeans &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; . ",
    "url": "/docs/liquid/iteration.html#forloop-object",
    
    "relUrl": "/docs/liquid/iteration.html#forloop-object"
  },"108": {
    "doc": "Iteration",
    "title": "tablerow (parameters)",
    "content": "cols . Defines how many columns the tables should have. Input . {% tablerow product in collection.products cols:2 %} {{ product.title }} {% endtablerow %} . Output . &lt;table&gt; &lt;tr class=\"row1\"&gt; &lt;td class=\"col1\"&gt; Cool Shirt &lt;/td&gt; &lt;td class=\"col2\"&gt; Alien Poster &lt;/td&gt; &lt;/tr&gt; &lt;tr class=\"row2\"&gt; &lt;td class=\"col1\"&gt; Batman Poster &lt;/td&gt; &lt;td class=\"col2\"&gt; Bullseye Shirt &lt;/td&gt; &lt;/tr&gt; &lt;tr class=\"row3\"&gt; &lt;td class=\"col1\"&gt; Another Classic Vinyl &lt;/td&gt; &lt;td class=\"col2\"&gt; Awesome Jeans &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; . limit . Exits the tablerow loop after a specific index. {% tablerow product in collection.products cols:2 limit:3 %} {{ product.title }} {% endtablerow %} . offset . Starts the tablerow loop after a specific index. {% tablerow product in collection.products cols:2 offset:3 %} {{ product.title }} {% endtablerow %} . range . Defines a range of numbers to loop through. The range can be defined by both literal and variable numbers. &lt;!--variable number example--&gt; {% assign num = 4 %} &lt;table&gt; {% tablerow i in (1..num) %} {{ i }} {% endtablerow %} &lt;/table&gt; . &lt;!--literal number example--&gt; &lt;table&gt; {% tablerow i in (3..5) %} {{ i }} {% endtablerow %} &lt;/table&gt; . tablerowloop (object) . Information about a parent tablerow loop. { \"col\": 1, \"col0\": 0, \"col_first\": true, \"col_last\": false, \"first\": true, \"index\": 1, \"index0\": 0, \"last\": false, \"length\": 5, \"rindex\": 5, \"rindex0\": 4, \"row\": 1 } . tablerowloop (properties) . | Property | Description | Returns | — | — | — | col | The 1-based index of the current column. | number | col0 | The 0-based index of the current column. | number | col_first | Returns true if the current column is the first in the row. Returns false if not. | boolean | col_last | Returns true if the current column is the last in the row. Returns false if not. | boolean | first | Returns true if the current iteration is the first. Returns false if not. | boolean | index | The 1-based index of the current iteration. | number | index0 | The 0-based index of the current iteration. | number | last | Returns true if the current iteration is the last. Returns false if not. | boolean | length | The total number of iterations in the loop. | number | rindex | The 1-based index of the current iteration, in reverse order. | number | rindex0 | The 0-based index of the current iteration, in reverse order. | number | row | The 1-based index of current row. | number . | Previous | Home | Next | . ",
    "url": "/docs/liquid/iteration.html#tablerow-parameters",
    
    "relUrl": "/docs/liquid/iteration.html#tablerow-parameters"
  },"109": {
    "doc": "Iteration",
    "title": "Iteration",
    "content": " ",
    "url": "/docs/liquid/iteration.html",
    
    "relUrl": "/docs/liquid/iteration.html"
  },"110": {
    "doc": "JotForm Integration",
    "title": "JotForm Integration",
    "content": "Jotform is a popular electronic forms application. World of Workflows integrates with Jotforms configured in a specific way. To start, build a form in Jotform. ",
    "url": "/docs/jotform-integration.html",
    
    "relUrl": "/docs/jotform-integration.html"
  },"111": {
    "doc": "JotForm Integration",
    "title": "How to configure a Jotform to work with World of Workflows",
    "content": ". | In World of Workflows, create a new workflow. | Add a HTTP Endpoint activity configured as follows: Set the Path to be any path you want, but ensure POST and Read Content are both checked. Ensure you go to Common and set the Technical Name to be JotFormPost. | [Optional] Add a HTTP Response Activity after this to show some feedback to the user. You could even add a thank you page. | Go to Jotform and open your form. | Click SETTINGS. | Choose Form Settings. | Click Show More Options to see more options. | Scroll down until you see Send Post Data. Ensure this is set to Yes. | Still in Jotform, click THANK YOU PAGE. | Select Redirect to an external link after submission. | Enter the URL of your workflows instance followed by the Path from the Activity you created in step 1. | . Congratulations, you now have a JotForm sending data to Workflows. There is lots you can do with this data, but one of the key things is to get it into the workflows database for later processing. Workflows comes with a special Activity, JSON Data Insert which takes information from Jotform and will insert or update the workflows database as needed. | To make this work, go back to the workflow you created in step 1, above. | At the end of the workflow, add the JSON Data Insert activity. Enter the information as follows: . | Item | Contents | Reason | . | Object Type | SalesVisit | This is the name of the object type you want to append to. if this is not in your database, you just need to add a type. | . | Key Field | submission_id | This is the key field, you can ensure the platform updates any objects with this field matching the one from jotform. For example, setting this to submission_id ensures that repeat identical submissions only update the data. | . | Values | see below | This inserts the body from the HTTP Activity. | . The Activity results script is shown below: . Activity Results Script . activities.JotFormPast.Output().Body . Remember, change the text JotFormPost in the script to match the technical name of the activity created in Step 1, above. | . last updated 19 Nov 2022 - nickbeau . ",
    "url": "/docs/jotform-integration.html#how-to-configure-a-jotform-to-work-with-world-of-workflows",
    
    "relUrl": "/docs/jotform-integration.html#how-to-configure-a-jotform-to-work-with-world-of-workflows"
  },"112": {
    "doc": "Object Workflows",
    "title": "Object Workflows",
    "content": "This guide shows how to create a workflow that can be executed from within the Object Editor Screen. The process is as follows . | Create a Data Type | Create an Instance | Create a Workflow with a specific name | Execute and test the workflow. | . The instructions below show how to do this: . ",
    "url": "/docs/object-workflows.html",
    
    "relUrl": "/docs/object-workflows.html"
  },"113": {
    "doc": "Object Workflows",
    "title": "1. Create a Data Type",
    "content": ". | Go To Workflows | Login | Navigate to Admin -&gt; Data | Click Add Type | Type the Name and Description and click Save | The example below shows the new type. Make note of the Title of your Type, in my case MyNewType | . ",
    "url": "/docs/object-workflows.html#1-create-a-data-type",
    
    "relUrl": "/docs/object-workflows.html#1-create-a-data-type"
  },"114": {
    "doc": "Object Workflows",
    "title": "2. Create an Instance",
    "content": ". | Click the Title of the Type you created above | Click Add | Enter the attributes of the new instance (in my case, this is just the title) and click Save | The example below shows the new instance. | . ",
    "url": "/docs/object-workflows.html#2-create-an-instance",
    
    "relUrl": "/docs/object-workflows.html#2-create-an-instance"
  },"115": {
    "doc": "Object Workflows",
    "title": "3. Create a Workflow with a specific name",
    "content": ". | Navigate to Workflows - Workflow Definitions | Click Create Workflow | Click the Cog and enter details as follows: . | Name is TypeName_Workflowname where the type name was chosen in step 1 above, in our case MyNewType Therefore our Name would be MyNewType_FirstWorkflow | DisplayName is what you want to appear in the user interface. In our case I will use First Workflow for Testing | Click Save | . | Click Start and add the Activity Object Detail to Variable from the Data Section . | On Object Id, click the … button and Choose JavaScript. In the box, type input | On State choose C for current state | On VariableName type ChosenObject | Click Save | . | Click Publish | . ",
    "url": "/docs/object-workflows.html#3-create-a-workflow-with-a-specific-name",
    
    "relUrl": "/docs/object-workflows.html#3-create-a-workflow-with-a-specific-name"
  },"116": {
    "doc": "Object Workflows",
    "title": "4. Execute and Test Workflow",
    "content": ". | Navigate to Admin -&gt; Data | Click the Name of the New Type created in Step 1 | Click Edit in the FirstInstance | Click Workflows | Click the 3 Vertical dots | Navigate to Workflows -&gt; Workflow Instances | Choose the top instance | Click the Object Detail to Variable Activity | Click Variables | Ensure the variable shows the object you chose | . Congratulations, you have created a workflow that can be executed from within the Object Editor Screen. ",
    "url": "/docs/object-workflows.html#4-execute-and-test-workflow",
    
    "relUrl": "/docs/object-workflows.html#4-execute-and-test-workflow"
  },"117": {
    "doc": "Opening the Task Pane",
    "title": "Opening the task Pane",
    "content": "From the Dashboard, click Tasks or chose Tasks from the top Menu bar. The Task Queue will be displayed. The left hand column contains the tasks the user has chosen and is working on. The Right hand column contains tasks which are available to work on. You can filter the list of tasks by entering text in the search button. ",
    "url": "/docs/tasks/opening-the-task-pane.html#opening-the-task-pane",
    
    "relUrl": "/docs/tasks/opening-the-task-pane.html#opening-the-task-pane"
  },"118": {
    "doc": "Opening the Task Pane",
    "title": "Opening the Task Pane",
    "content": " ",
    "url": "/docs/tasks/opening-the-task-pane.html",
    
    "relUrl": "/docs/tasks/opening-the-task-pane.html"
  },"119": {
    "doc": "Operators",
    "title": "Operators",
    "content": "Liquid includes many logical and comparison operators. You can use operators to create logic with control flow tags. ",
    "url": "/docs/liquid/operators.html#operators",
    
    "relUrl": "/docs/liquid/operators.html#operators"
  },"120": {
    "doc": "Operators",
    "title": "Basic operators",
    "content": "| Operator | Description | . | == | equals | . | != | does not equal | . | &gt; | greater than | . | &lt; | less than | . | &gt;= | greater than or equal to | . | &lt;= | less than or equal to | . | or | logical or | . | and | logical and | . For example: . {% if product.title == \"Awesome Shoes\" %} These shoes are awesome! {% endif %} . You can do multiple comparisons in a tag using the and and or operators: . {% if product.type == \"Shirt\" or product.type == \"Shoes\" %} This is a shirt or a pair of shoes. {% endif %} . contains . contains checks for the presence of a substring inside a string. {% if product.title contains \"Pack\" %} This product's title contains the word Pack. {% endif %} . contains can also check for the presence of a string in an array of strings. {% if product.tags contains \"Hello\" %} This product has been tagged with \"Hello\". {% endif %} . contains can only search strings. You cannot use it to check for an object in an array of objects. ",
    "url": "/docs/liquid/operators.html#basic-operators",
    
    "relUrl": "/docs/liquid/operators.html#basic-operators"
  },"121": {
    "doc": "Operators",
    "title": "Order of operations",
    "content": "In tags with more than one and or or operator, operators are checked in order from right to left. You cannot change the order of operations using parentheses — parentheses are invalid characters in Liquid and will prevent your tags from working. {% if true or false and false %} This evaluates to true, since the `and` condition is checked first. {% endif %} . {% if true and false and false or true %} This evaluates to false, since the tags are checked like this: true and (false and (false or true)) true and (false and true) true and false false {% endif %} . ",
    "url": "/docs/liquid/operators.html#order-of-operations",
    
    "relUrl": "/docs/liquid/operators.html#order-of-operations"
  },"122": {
    "doc": "Operators",
    "title": "Operators",
    "content": " ",
    "url": "/docs/liquid/operators.html",
    
    "relUrl": "/docs/liquid/operators.html"
  },"123": {
    "doc": "Pick a Task",
    "title": "Pick a Task",
    "content": "When you click pick on a task it removes it from the queue and assigns it to you. Tasks assigned to you appear in the “My Tasks” pane. ",
    "url": "/docs/tasks/pick-a-task.html",
    
    "relUrl": "/docs/tasks/pick-a-task.html"
  },"124": {
    "doc": "Plugin Development",
    "title": "Developing Plugins for World of Workflows",
    "content": "World of Workflows features a plugin architecture that enables developers to extend the system’s functionality by creating custom Elsa Activities. This chapter will provide an overview of the development process for creating plugins and how to implement custom activities. ",
    "url": "/docs/userguide/plugins.html#developing-plugins-for-world-of-workflows",
    
    "relUrl": "/docs/userguide/plugins.html#developing-plugins-for-world-of-workflows"
  },"125": {
    "doc": "Plugin Development",
    "title": "Plugin Development Overview",
    "content": "To create a plugin for World of Workflows, you need to develop a C# class library project that includes Elsa and references the HubOneWorkflows.Plugins namespace. This namespace contains the essential interfaces and classes for plugin development, such as ICommand, PluginLoadContext, and PluginOperations. ",
    "url": "/docs/userguide/plugins.html#plugin-development-overview",
    
    "relUrl": "/docs/userguide/plugins.html#plugin-development-overview"
  },"126": {
    "doc": "Plugin Development",
    "title": "Creating a Custom Activity",
    "content": "To create a custom Activity, you need to implement a new class that inherits from Elsa.Activity or one of its subclasses. This class should override the required methods to define the activity’s behavior, inputs, and outputs. For example, to create a custom activity that performs a specific calculation, you could implement a class like this: . using Elsa; using Elsa.Attributes; using Elsa.Expressions; using Elsa.Results; using Elsa.Services; using Elsa.Services.Models; [ActivityDefinition(Category = \"Custom\", Description = \"Performs a custom calculation\")] public class CustomCalculationActivity : Activity { [ActivityProperty(Hint = \"Enter the first number\")] public double Number1 { get; set; } [ActivityProperty(Hint = \"Enter the second number\")] public double Number2 { get; set; } protected override async Task&lt;ActivityExecutionResult&gt; OnExecuteAsync(WorkflowExecutionContext context, CancellationToken cancellationToken) { double result = PerformCustomCalculation(Number1, Number2); Output.SetVariable(\"Result\", result); return Done(); } private double PerformCustomCalculation(double number1, double number2) { // Perform the custom calculation logic here } } . ",
    "url": "/docs/userguide/plugins.html#creating-a-custom-activity",
    
    "relUrl": "/docs/userguide/plugins.html#creating-a-custom-activity"
  },"127": {
    "doc": "Plugin Development",
    "title": "Implementing the ConfigCommand Class",
    "content": "In your plugin project, you need to create a ConfigCommand class that implements the ICommand interface. This class should define the AddActivities method, which adds your custom Elsa Activities to the builder: . public class ConfigCommand : ICommand { public Elsa.Options.ElsaOptionsBuilder AddActivities(Elsa.Options.ElsaOptionsBuilder builder) { builder .AddActivity&lt;CreateArmClient&gt;() .AddActivity&lt;CreateResourceGroup&gt;(); return builder; } } . ",
    "url": "/docs/userguide/plugins.html#implementing-the-configcommand-class",
    
    "relUrl": "/docs/userguide/plugins.html#implementing-the-configcommand-class"
  },"128": {
    "doc": "Plugin Development",
    "title": "Code Signing and Importing the Plugin",
    "content": "Once you’ve developed your plugin, send the assembly to support@worldofworkflows.com for code signing. After the assembly has been signed, you can import the plugin into World of Workflows: . | Log in as an administrator. | Go to Admin -&gt; Plugins | Navigate to the Plugins section. | Import the signed plugin. | . By developing custom plugins for World of Workflows, you can extend the platform’s capabilities to better suit your organization’s unique requirements. By creating custom Elsa Activities, you can integrate new functionality directly into your workflows, enabling greater flexibility and customization. ",
    "url": "/docs/userguide/plugins.html#code-signing-and-importing-the-plugin",
    
    "relUrl": "/docs/userguide/plugins.html#code-signing-and-importing-the-plugin"
  },"129": {
    "doc": "Plugin Development",
    "title": "Plugin Development",
    "content": " ",
    "url": "/docs/userguide/plugins.html",
    
    "relUrl": "/docs/userguide/plugins.html"
  },"130": {
    "doc": "Random Number",
    "title": "Random Number",
    "content": "Generates a pseudo random number. This can be any number or you can set a specific random seed and choose the number of iterations to get a specific number in the random number sequence. A Pseudo random generator creates seemingly random numbers from a mathematically generated sequence. To obtain more “randomness”, random generators use a “seed” which is a number to seed the sequence. In this activity you can choose a seed or use the system timer which should produce a more random answer. Category: Primitives . Input Parameters . | Name | Type | Label | Hint | ReadOnly | Browsable | . | Seed | int32 | Number | The Random seed. 0 uses the timer. | False | True | . | Lower Bound | int32 | Number | The smallest number that can be returned. | False | True | . | Upper Bound | int32 | Number | The largest number that can be returned. | False | True | . | Sequence | int32 | Number | The number in the sequence to return. | False | True | . Output Parameters . | Name | Type | Hint | . | Output | Int32 | The Random Number | . ",
    "url": "/docs/activities/random-number.html",
    
    "relUrl": "/docs/activities/random-number.html"
  },"131": {
    "doc": "Read Line",
    "title": "Read Line",
    "content": "Read text from standard in. Category: Console . There are no input parameters . Output Parameters . | Name | Type | Hint | . | Output | System.String |   | . Outcomes . | Done | . ",
    "url": "/docs/activities/read-line.html",
    
    "relUrl": "/docs/activities/read-line.html"
  },"132": {
    "doc": "Activities",
    "title": "Activity List",
    "content": "The following section is a comprehensive list of activities available in the platform, noting that you can extend the platform using plugins. Compensation . Compensable activities in Elsa Workflows refer to actions that can be compensated or “undone” if certain conditions are not met or if an error occurs during the execution of a workflow. Compensable activities are essential for ensuring the integrity and reliability of the workflow processes, particularly in scenarios where multiple steps are involved, and the correct execution of each step is crucial for the overall success of the process. Compensable activities have the following characteristics: . | Reversibility: A compensable activity has a corresponding “undo” operation that can be executed to reverse its effects and return the system to its previous state before the activity was executed. This is useful for handling errors and maintaining data consistency. | Idempotency: Compensable activities are designed to be idempotent, meaning they can be executed multiple times without causing any side effects or changing the outcome. This ensures that compensating actions will not introduce new errors or inconsistencies in the system. | Transactional nature: Compensable activities are often used in conjunction with transactions to ensure that a series of related actions are either all completed successfully or none of them are. If any activity in the transaction fails, the compensating actions are executed to reverse the completed activities, maintaining the system’s consistency . | Error handling: Compensable activities allow for robust error handling, as they can be used to automatically roll back a workflow to a previous state if an error occurs. This helps to minimize the risk of data corruption or other issues that may arise from failed operations. | . In Workflows, compensable activities would be designed and implemented as part of the overall workflow, with each activity having a clearly defined compensating action. This ensures that any errors or inconsistencies can be effectively addressed, maintaining the system’s stability and reliability. The following are the activities available for compensation: . Compensable . Allows work that is executed after this activity to be undone. Compensate . Invokes a specific compensable activity. Confirm . Confirms a specific compensable activity. Console Activities . In Elsa Workflows, Console Activities are used for simple input and output operations to interact with the user through the console. They are helpful for gathering data, providing status updates, or displaying results. There are two main Console Activities in Elsa Workflows: Read Line and Write Line. Read Line . The Read Line Activity is used to read a line of text input from the user through the console. This activity allows you to gather data or responses from the user during the execution of a workflow. | Add the Read Line Activity to your workflow where you want to capture user input. | Optionally, you can provide a custom prompt by setting the ‘Prompt’ property. This text will be displayed to the user before they enter their input. | After the activity is executed, the user’s input will be stored in the specified output variable (e.g., ‘UserInput’). | . You can then use the captured input in subsequent activities or for decision-making within the workflow. Note: Although Read Line is available, it will not work as World of Workflows runs as a service and cannot interact with the console. Write Line . The Write Line Activity is used to display a line of text to the user through the console. This activity is useful for providing status updates, displaying results, or giving instructions to the user during the workflow execution. | Add the Write Line Activity to your workflow where you want to display text to the user. | Set the ‘Text’ property to the message you want to display. You can use static text or include variables and expressions to display dynamic content. | When the activity is executed, the specified text will be displayed on the console. | . You can use the Write Line Activity multiple times throughout your workflow to provide updates or information to the user as needed. By incorporating these Console Activities into your Elsa Workflows, you can create more interactive and user-friendly processes that allow for better communication between the system and the end user. Note: Although Write Line is available, it will not usefully work as World of Workflows runs as a service and cannot interact with the console. Control Flow . In Elsa Workflows, control flow activities are used to manage the execution order of activities within a workflow and to implement conditional logic or looping constructs. They help to create dynamic and flexible processes based on the specific requirements of your use case. Some common control flow activities in Elsa Workflows include: . If-Else . The If-Else Activity allows you to define conditional branches in your workflow, executing different sets of activities based on a specified condition. | Add the If-Else Activity to your workflow where you want to introduce conditional logic. | Set the Condition property to an expression that evaluates to either true or false. | Connect the True outcome to the activities that should be executed if the condition is true. | Connect the False outcome to the activities that should be executed if the condition is false. | . While . The While Activity is used to create loops in your workflow, repeatedly executing a set of activities as long as a specified condition is true. | Add the While Activity to your workflow where you want to create a loop. | Set the Condition property to an expression that evaluates to either true or false. | Connect the Loop outcome to the activities that should be executed within the loop. Use the CurrentItem property within the iteration activities to access the current item in the collection. | Note that these activities may be executed many times. The last of these activities will normally have no outcome. | . | Connect the Done outcome to the activities that should be executed after the loop has finished. | . ForEach . The ForEach Activity iterates over a collection of items, executing a set of activities for each item in the collection. | Add the ForEach Activity to your workflow where you want to iterate over a collection. | Set the Collection property to a collection or an expression that evaluates to a collection. | Connect the Iteration outcome to the activities that should be executed for each item in the collection. | Use the CurrentItem property within the iteration activities to access the current item in the collection. | Note that these activities may be executed many times. The last of these activities will normally have no outcome. | . | Connect the Done outcome to the activities that should be executed after the iteration has completed. | . Switch . The Switch Activity is used to create multiple branches in your workflow based on the value of a specified expression. | Add the Switch Activity to your workflow where you want to create multiple branches. | Set the Expression property to an expression that evaluates to a value used for branching. | Add one or more Case outcomes, each with a value that corresponds to a possible result of the expression. | Connect each Case outcome to the activities that should be executed for that specific value. | Optionally, you can add a Default outcome, which will be executed if none of the case values match the expression result. | . Break . The Break Activity in Elsa Workflows is a control flow activity used to exit a loop prematurely. It allows you to terminate the execution of activities within a loop when a specified condition is met, instead of waiting for the loop’s original exit condition. The Break Activity is particularly useful when working with While and ForEach activities, providing a way to break out of the loop based on custom criteria. | Add the Break Activity to your workflow within a loop (created using a While or ForEach activity). | Set a condition or trigger for the Break Activity. This can be done using an If-Else Activity, or by incorporating a condition directly into the Break Activity. | When the Break Activity is executed, the workflow will exit the current loop immediately, skipping the remaining activities in the loop and moving on to the next activity connected to the loop’s Done outcome. | . For example, if you are using a While Activity to process a list of items and you want to stop processing when a specific item is encountered, you could use an If-Else Activity within the loop to check for that item. If the item is found, the If-Else Activity would execute the Break Activity, immediately stopping the loop and moving on to the next activity outside the loop. The Break Activity helps to improve the efficiency and flexibility of workflows, allowing you to create more dynamic and responsive processes that can adapt to different conditions during runtime. For . The For Activity is a control flow activity in Elsa Workflows that allows you to create loops with a predefined number of iterations. This activity is useful for executing a set of activities a specific number of times, providing a more controlled and predictable looping construct compared to the While Activity. | Add the For Activity to your workflow where you want to create a loop with a fixed number of iterations. | Set the Start property to the initial value of the loop counter (usually 0 or 1, depending on your requirements). | Set the End property to the value at which the loop counter should stop (exclusive). The loop will iterate as long as the loop counter is less than the End’value. | Optionally, set the Step property to define the increment value for each iteration. By default, the ‘Step’ value is typically 1, meaning the loop counter will increment by 1 after each iteration. | Connect the Iteration outcome to the activities that should be executed within the loop. | Connect the Done outcome to the activities that should be executed after the loop has finished. | . Use the CurrentIndex property within the loop activities to access the current value of the loop counter. Here’s an example of how the For Activity might be used in a workflow: . | Start value: 0 . | End value: 5 . | Step value: 1 . | . In this example, the loop would execute the activities connected to the Iteration outcome five times (with loop counter values of 0, 1, 2, 3, and 4). Once the loop counter reaches 5, the loop will exit, and the activities connected to the Done outcome will be executed. The For Activity provides a structured and straightforward way to create loops in Elsa Workflows, enabling you to implement repetitive tasks with a predictable number of iterations. Fork . The Fork Activity in Elsa Workflows is a control flow activity that allows you to create parallel branches of execution within your workflow. It enables you to split the workflow into multiple paths that can be executed concurrently, improving the efficiency and performance of your processes by allowing tasks to be completed simultaneously. | Add the Fork Activity to your workflow where you want to create parallel branches of execution. | Create the branches by using meaningful names, so that your workflow is easy to read . | Connect the Fork Activity to multiple subsequent activities, each representing a separate branch of execution. Each connection from the Fork Activity represents a new parallel path. | We do not require a Join activity to wait for all branches in World of Workflows. The Join Activity would usually wait for all the parallel branches to complete before continuing with the subsequent activities in the workflow. | . For example, imagine you have a workflow where you need to perform three separate tasks (Task A, Task B, and Task C) that can be executed independently and concurrently. You could use the Fork Activity to create three parallel branches, one for each task, improving the overall performance of the workflow by completing the tasks simultaneously. Here’s a simplified representation of the workflow: . flowchart TD A(Fork) A --&gt; B[Task A] A --&gt; C[Task B] A --&gt; D[Task C] B --&gt; E[Join] C --&gt; E D --&gt; E . The Fork Activity is a powerful tool for optimizing your workflows, allowing you to take advantage of parallel processing and improving the overall performance and efficiency of your processes. Join . The Join Activity in Elsa Workflows is a control flow activity used to synchronize multiple parallel branches of execution back into a single path. It is typically used in conjunction with the Fork Activity, which creates parallel branches in the workflow for concurrent execution. The Join Activity ensures that all parallel branches have completed before the workflow proceeds to the next activity in the sequence. | After using a Fork Activity to create parallel branches of execution, add the Join Activity at the point where you want to merge the parallel branches back into a single path. | Connect each parallel branch to the Join Activity. | When the Join Activity is reached during workflow execution, it will wait until all connected parallel branches have completed their execution. | Once all parallel branches have finished, the Join Activity will allow the workflow to continue with the subsequent activities connected to it. | . For example, imagine you have a workflow with three parallel tasks (Task A, Task B, and Task C) created using the Fork Activity. The Join Activity would be used to ensure that all three tasks have completed before the workflow proceeds to the next step, such as processing the combined results of the tasks. Here’s a simplified representation of the workflow: . flowchart TD A(Fork) A --&gt; B[Task A] A --&gt; C[Task B] A --&gt; D[Task C] B --&gt; E[Join] C --&gt; E D --&gt; E E --&gt; F[Next Activity] . Note: there is also the option of allowing the Join activity to continue when any one of the connected branches reaches the Join Activity. The Join Activity is essential for managing parallel branches in Elsa Workflows, ensuring that all concurrent tasks are completed before the workflow moves on to subsequent activities. This enables you to maintain control and consistency in your processes, while still benefiting from the performance improvements provided by parallel execution. Parallel for Each . The Parallel ForEach Activity in Elsa Workflows is a control flow activity that enables concurrent execution of a set of activities for each item in a collection. It is similar to the standard ForEach Activity, but with the added benefit of parallel processing to improve performance and efficiency. The Parallel ForEach Activity is particularly useful when working with large collections or when executing time-consuming tasks that can be processed independently. | Add the Parallel ForEach Activity to your workflow where you want to concurrently iterate over a collection of items. | Set the ‘Collection’ property to the collection you want to iterate over or an expression that evaluates to a collection. | Connect the ‘Iteration’ outcome to the activities that should be executed for each item in the collection. These activities will be executed in parallel for each item, potentially improving the overall performance of the workflow. | Connect the ‘Done’ outcome to the activities that should be executed after the parallel iteration has completed. | Use the ‘CurrentItem’ property within the iteration activities to access the current item in the collection. | . It’s important to note that when using the Parallel ForEach Activity, you need to ensure that the activities within the loop can be executed concurrently without causing issues such as data corruption or race conditions. This may require additional synchronization mechanisms, such as locks or semaphores, depending on the specific activities being executed. The Parallel ForEach Activity provides a powerful and efficient way to process collections in Elsa Workflows, enabling you to take advantage of parallel processing to improve the performance of your processes. Switch . The Switch Activity in Elsa Workflows is a control flow activity that allows you to create multiple branches of execution based on the value of a specified expression. It enables you to route the workflow to different sets of activities depending on the evaluated result, making your workflow more dynamic and adaptable to various situations. | Add the Switch Activity to your workflow where you want to create multiple branches based on a specific value or condition. | Set the Expression property to an expression that evaluates to a value used for branching. This value will determine which branch of execution the workflow will follow. | Add one or more Case outcomes, each with a value that corresponds to a possible result of the expression. The value of the Case outcome should match the expected result of the expression to create a connection to the corresponding branch of activities. | Connect each Case outcome to the activities that should be executed for that specific value. These activities represent the different branches that the workflow can take based on the evaluation of the expression. | Optionally, you can add a Default outcome, which will be executed if none of the case values match the expression result. This outcome acts as a catch-all for any unexpected or unhandled values. | . Here’s an example of how the Switch Activity might be used in a workflow: . | Expression: OrderStatus | . Assuming that OrderStatus is a variable that can have the values New, Processing, or Complete, you would create three Case outcomes with these values, and connect each outcome to the respective activities that should be executed for each status: . flowchart TD A(Switch) A --&gt; B[Case A] A --&gt; C[Case B] A --&gt; D[Case C] B --&gt; E[Next Activity] C --&gt; E D --&gt; E . The Switch Activity allows you to create more dynamic and flexible workflows that can adapt to different situations based on the evaluation of specific conditions or values. This enables you to build more efficient and responsive processes tailored to the specific needs of your use case. ",
    "url": "/docs/userguide/reference-activities.html#activity-list",
    
    "relUrl": "/docs/userguide/reference-activities.html#activity-list"
  },"133": {
    "doc": "Activities",
    "title": "Email Activities",
    "content": "Email activities are designed to work with SMTP Email Systems. For Office 365, please see the Send Http activity and communicate with Microsoft graph as shown in the examples. Send Email . The SendEmail Activity in Elsa Workflows is an action activity that allows you to send an email as part of your workflow. This activity can be used to notify users or stakeholders, send reports, or provide status updates based on the events and outcomes of your workflow. The SendEmail Activity typically requires integration with an email service or SMTP server to handle the actual sending of the email. | Add the SendEmail Activity to your workflow where you want to send an email. | Configure the email service or SMTP server settings, if required. This step depends on the specific implementation of Elsa Workflows and might involve setting up API keys, credentials, or other configuration options to connect with the email service. This configuration should be set in the appsettings.json file in the installation folder of World of Workflows. | Set the From property to the email address you want the email to be sent from. This is typically your own email address or an address associated with your application or organization. | Set the To property to the recipient’s email address or a list of email addresses if you want to send the email to multiple recipients. | Set the Subject property to the subject line of the email. | Set the Body property to the content of the email. This can be plain text or HTML, depending on the capabilities of the SendEmail Activity implementation and the email service being used. | Optionally, you can configure additional properties such as Cc, Bcc, ReplyTo, or Attachments, depending on the specific implementation of the SendEmail Activity and your requirements. | Connect the SendEmail Activity to other activities in your workflow as needed. You might want to use control flow activities like If-Else or Switch to determine when the email should be sent or what content it should contain. | . The SendEmail Activity enables you to integrate email notifications and communication directly into your Elsa Workflows, allowing you to automate notifications, alerts, and updates as part of your overall process automation. ",
    "url": "/docs/userguide/reference-activities.html#email-activities",
    
    "relUrl": "/docs/userguide/reference-activities.html#email-activities"
  },"134": {
    "doc": "Activities",
    "title": "File Activities",
    "content": "File Activities in Elsa Workflows refer to a set of activities that allow you to interact with the file system to perform various operations, such as reading, writing, creating, or deleting files and directories. These activities enable you to incorporate file management tasks into your workflows and automate processes that involve file manipulation. Some common File Activities in Elsa Workflows include: . Read File . The ReadFile Activity is used to read the contents of a file and store the data in a variable or output property for further processing in the workflow. | Add the ReadFile Activity to your workflow where you want to read a file. | Set the FilePath property to the path of the file you want to read. | Connect the ReadFile Activity to other activities that will process the file’s content or use it as input. | . WriteFile . The WriteFile Activity allows you to write data to a file, either creating a new file or overwriting an existing one. | Add the WriteFile Activity to your workflow where you want to write data to a file. | Set the FilePath property to the path of the file you want to write. | Set the Content property to the data you want to write to the file. | Configure the Append property if you want to append data to the existing file instead of overwriting it. | . DeleteFile . The DeleteFile Activity is used to delete a file from the file system. | Add the DeleteFile Activity to your workflow where you want to delete a file. | Set the FilePath property to the path of the file you want to delete. | Connect the DeleteFile Activity to other activities that may depend on the deletion of the file. | . These File Activities allow you to integrate file management tasks into your Elsa Workflows, helping you automate processes that involve file manipulation and improving the overall efficiency of your workflows. By using these control flow activities, you can create complex and dynamic workflows that adapt to varying situations and requirements, enabling more efficient and flexible process automation. ",
    "url": "/docs/userguide/reference-activities.html#file-activities",
    
    "relUrl": "/docs/userguide/reference-activities.html#file-activities"
  },"135": {
    "doc": "Activities",
    "title": "Activities",
    "content": " ",
    "url": "/docs/userguide/reference-activities.html",
    
    "relUrl": "/docs/userguide/reference-activities.html"
  },"136": {
    "doc": "DataTypes",
    "title": "Data Types",
    "content": "Data types is the name given to field types in the database. By using data types, you can control how data is stored in the database and how it is displayed to the end user. The following datatypes are available in World of Workflows: . | Id | Data Type | Use | . | 1 | Big Integer | The Big Integer data type is commonly used to reference another Type, but can be used anywhere an extremely large whole number is required. | . | 2 | Integer | The Integer data type is used where a whole positive or negative number is required. | . | 3 | Decimal 2 | This is a decimal number with two digits of precision, commonly used for representing monetary amounts. | . | 4 | Decimal 5 | This is a decimal number with 5 digits of precision, commonly used for representing floating point numbers. | . | 5 | True/False | This is commonly known as the Boolean data type and holds anything that can have only two values. | . | 6 | String | Strings are any length collections of character strings, stored in UTF-8 | . | 7 | DateTime | Stored in the database as UTC DateTime and shown in the interface as local datetime, The DateTime DataType is used for storing dates and times or both. | . | 8 | Url | This is a string which represents a hyperlink | . | 9 | Embed | This is a string which can contain a html embed code. | . Note on storing Binary in the database. We have deliberately chosen not to provide a binary data type, Instead we recommend to use JavaScript inside of workflows to Base64Encode/Decode and store the data in a String DataType. This is because of direct limitations of some of our supported database platforms not allowing binary types. ",
    "url": "/docs/userguide/reference-datatypes.html#data-types",
    
    "relUrl": "/docs/userguide/reference-datatypes.html#data-types"
  },"137": {
    "doc": "DataTypes",
    "title": "DataTypes",
    "content": " ",
    "url": "/docs/userguide/reference-datatypes.html",
    
    "relUrl": "/docs/userguide/reference-datatypes.html"
  },"138": {
    "doc": "Liquid",
    "title": "Liquid in World of Workflows",
    "content": "Liquid is an open-source template language created by Shopify and written in Ruby. It is the backbone of Shopify themes and is used to load dynamic content on storefronts. Liquid has been in production use at Shopify since 2006 and is now used by many other hosted web applications. The following sections contain information about the Liquid template language. ",
    "url": "/docs/userguide/reference-liquid.html#liquid-in-world-of-workflows",
    
    "relUrl": "/docs/userguide/reference-liquid.html#liquid-in-world-of-workflows"
  },"139": {
    "doc": "Liquid",
    "title": "Introduction",
    "content": "Liquid uses a combination of objects, tags, and filters inside template files to display dynamic content. Objects . Objects contain the content that Liquid displays on a page. Objects and variables are displayed when enclosed in double curly braces: {{ and }}. Input . {{ page.title }} . Output . In this case, Liquid is rendering the content of the title property of the page object, which contains the text Introduction. Tags . Tags create the logic and control flow for templates. The curly brace percentage delimiters { and } and the text that they surround do not produce any visible output when the template is rendered. This lets you assign variables and create conditions or loops without showing any of the Liquid logic on the page. Input . {% if user %} Hello {{ user.name }}! {% endif %} . Output . Hello Adam! . Tags can be categorized into various types: . | Control flow . | Iteration . | Template . | Variable assignment . | . You can read more about each type of tag in their respective sections. ",
    "url": "/docs/userguide/reference-liquid.html#introduction",
    
    "relUrl": "/docs/userguide/reference-liquid.html#introduction"
  },"140": {
    "doc": "Liquid",
    "title": "Filters",
    "content": "| Filters change the output of a Liquid object or variable. They are used within double curly braces {{ }} and variable assignment, and are separated by a pipe character | . | . Input . {{ \"/my/fancy/url\" | append: \".html\" }} . Output . Multiple filters can be used on one output, and are applied from left to right. Input . {{ \"adam!\" | capitalize | prepend: \"Hello \" }} . Output . Hello Adam! . ",
    "url": "/docs/userguide/reference-liquid.html#filters",
    
    "relUrl": "/docs/userguide/reference-liquid.html#filters"
  },"141": {
    "doc": "Liquid",
    "title": "Operators",
    "content": "Liquid includes many logical and comparison operators. You can use operators to create logic with control flow tags. Basic operators . | Operator | Description | . | == | equals | . | != | does not equal | . | &gt; | greater than | . | &lt; | less than | . | &gt;= | greater than or equal to | . | &lt;= | less than or equal to | . | or | logical or | . | and | logical and | . For example: . {% if product.title == \"Awesome Shoes\" %} These shoes are awesome! {% endif %} . You can do multiple comparisons in a tag using the and &amp; or operators: . {% if product.type == \"Shirt\" or product.type == \"Shoes\" %} This is a shirt or a pair of shoes. {% endif %} . contains . contains checks for the presence of a substring inside a string. {% if product.title contains \"Pack\" %} This product's title contains the word Pack. {% endif %} . contains can also check for the presence of a string in an array of strings. {% if product.tags contains \"Hello\" %} This product has been tagged with \"Hello\". {% endif %} . contains can only search strings. You cannot use it to check for an object in an array of objects. Order of operations . In tags with more than one and or or operator, operators are checked in order from right to left. You cannot change the order of operations using parentheses — parentheses are invalid characters in Liquid and will prevent your tags from working. {% if true or false and false %} This evaluates to true, since the 'and' condition is checked first. {% endif %} . {% if true and false and false or true %} This evaluates to false, since the tags are checked like this: true and (false and (false or true)) true and (false and true) true and false false {% endif %} . ",
    "url": "/docs/userguide/reference-liquid.html#operators",
    
    "relUrl": "/docs/userguide/reference-liquid.html#operators"
  },"142": {
    "doc": "Liquid",
    "title": "Truthy and falsy",
    "content": "When a non-boolean data type is used in a boolean context (such as a conditional tag), Liquid decides whether to evaluate it as true or false. Data types that return true by default are called truthy. Data types that return false by default are called falsy. Truthy . All values in Liquid are truthy except nil and false. In the example below, the text “Tobi” is not a boolean, but it is truthy in a conditional: . {% assign name = \"Tobi\" %} {% if name %} This text will always appear since \"name\" is defined. {% endif %} . Strings, even when empty, are truthy. The example below will create empty HTML tags if page.category exists but is empty: . Input . {% if page.category %} &lt;h1&gt;{{ page.category }}&lt;/h1&gt; {% endif %} . Output . &lt;h1&gt;&lt;/h1&gt; . Falsy . The only values that are falsy in Liquid are nil and false. Summary . The table below summarizes what is truthy or falsy in Liquid. |   | truthy | falsy | . | true | • |   | . | false |   | • | . | nil |   | • | . | string | • |   | . | empty string | • |   | . | 0 | • |   | . | integer | • |   | . | float | • |   | . | array | • |   | . | empty array | • |   | . | page | • |   | . | EmptyDrop | • |   | . ",
    "url": "/docs/userguide/reference-liquid.html#truthy-and-falsy",
    
    "relUrl": "/docs/userguide/reference-liquid.html#truthy-and-falsy"
  },"143": {
    "doc": "Liquid",
    "title": "Types",
    "content": "Liquid objects can be one of six types: . | String | Number | Boolean | Nil | Array | EmptyDrop | . You can initialize Liquid variables using assign or capture tags. String . Strings are sequences of characters wrapped in single or double quotes: . {% assign my_string = \"Hello World!\" %} . Liquid does not convert escape sequences into special characters. Number . Numbers include floats and integers: . {% assign my_int = 25 %} . {% assign my_float = -39.756 %} . Boolean . Booleans are either true or false. No quotations are necessary when declaring a boolean: . {% assign foo = true %} . {% assign bar = false %} . Nil . Nil is a special empty value that is returned when Liquid code has no results. It is not a string with the characters “nil”. Nil is treated as false in the conditions of if blocks and other Liquid tags that check the truthfulness of a statement. In the following example, if the user does not exist (that is, user returns nil), Liquid will not print the greeting: . {% if user %} . Hello {{ user.name }}! . {% endif %} . Tags or outputs that return nil will not print anything to the page. Input . The current user is {{ user.name }} . Output . The current user is . Array . Arrays hold lists of variables of any type. Accessing items in arrays . To access all the items in an array, you can loop through each item in the array using an iteration tag. Input . &lt;!– if site.users = “Tobi”, “Laura”, “Tetsuro”, “Adam” –&gt; . {% for user in site.users %} . {{ user }} . {% endfor %} . Output . Tobi Laura Tetsuro Adam . Accessing specific items in arrays . You can use square bracket [ ] notation to access a specific item in an array. Array indexing starts at zero. A negative index will count from the end of the array. Input . &lt;!– if site.users = “Tobi”, “Laura”, “Tetsuro”, “Adam” –&gt; . {{ site.users[0] }} . {{ site.users[1] }} . {{ site.users[-1] }} . Output . Tobi . Laura . Adam . Initializing arrays . You cannot initialize arrays using only Liquid. You can, however, use the split filter to break a string into an array of substrings. EmptyDrop . An EmptyDrop object is returned if you try to access a deleted object. In the example below, page_1, page_2 and page_3 are all EmptyDrop objects: . {% assign variable = “hello” %} . {% assign page_1 = pages[variable] %} . {% assign page_2 = pages[“does-not-exist”] %} . {% assign page_3 = pages.this-handle-does-not-exist %} . Checking for emptiness . You can check to see if an object exists or not before you access any of its attributes. {% unless pages == empty %} . &lt;h1&gt;{{ pages.frontpage.title }}&lt;/h1&gt; . &lt;div&gt;{{ pages.frontpage.content }}&lt;/div&gt; . {% endunless %} . Both empty strings and empty arrays will return true if checked for equivalence with empty. ",
    "url": "/docs/userguide/reference-liquid.html#types",
    
    "relUrl": "/docs/userguide/reference-liquid.html#types"
  },"144": {
    "doc": "Liquid",
    "title": "Liquid Expressions",
    "content": "The following Liquid expressions are supported: . Common Variables . Workflow Variables . Use the following syntax to access a workflow variable: . {{ Variables.NameOfVariable }} . For example, given a workflow variable called FirstName with a value of “Alice”, the expression . Hello {{ Variables.FirstName }}. will result in . Hello Alice. Input . Input values can be accessed using the following syntax: . {{ Input }} . Activity Output . To access a named activity’s output, use the following syntax: . {{ Activities.SomeActivityName.Output }} . CorrelationId . Returns the correlation ID (if any) of the currently executing workflow. {{ CorrelationId }} . WorkflowInstanceId . Returns the workflow instance ID of the currently executing workflow. {{ WorkflowInstanceId }} . WorkflowDefinitionId . Returns the workflow definition ID of the currently executing workflow. {{ WorkflowDefinitionId }} . WorkflowDefinitionVersion . Returns the workflow definition version of the currently executing workflow. {{ WorkflowDefinitionVersion }} . Configuration . Provides access to a .NET configuration value. See Configuration for more details on available configuration items in World of Workflows. {{ Configuration.SomeSection }} . As an example, let’s say you have the following JSON in appsettings.json: . { . “Elsa”: { . “Smtp”: { . “Host”: “localhost”, . “Port”: 2525 . } . } . } . You can access the configured Port value using the following expression: . {{ Configuration.Elsa.Smtp.Port }} . Common Filters . json . json is a liquid filter that renders the specified value as a JSON string. {{ Input | json }} . Example output: . { . “SomeDocument”: { . “Title”: “About Elsa Workflows” . } . } . base64 . A liquid filter that renders the specified value as a bas64 representation. The value is first converted to a string. If the value is an object, array, dictionary or datetime, it is first serialized using JsonConvert.SerializeObject before being encoded as base64. {{ “Some string value” | base64 }} . Example output: . U29tZSBzdHJpbmcgdmFsdWU= . ",
    "url": "/docs/userguide/reference-liquid.html#liquid-expressions",
    
    "relUrl": "/docs/userguide/reference-liquid.html#liquid-expressions"
  },"145": {
    "doc": "Liquid",
    "title": "Workflow Filters",
    "content": "workflow_definition_id . workflow_definition_id translates the specified workflow name or workflow tag into a workflow ID. This is useful for activities such as RunWorkflow which require a workflow ID to run. Usage: . {{ “SomeWorkflowName” | workflow_definition_id }} . {{ “SomeWorkflowTag” | workflow_definition_id: tag }} . HTTP Variables . Request . request provides access to various properties on the current HTTP Request object: . {{ Request.QueryString }} . {{ Request.ContentType }} . {{ Request.ContentLength }} . {{ Request.Form }} . {{ Request.Protocol }} . {{ Request.Path }} . {{ Request.PathBase }} . {{ Request.Host }} . {{ Request.IsHttps }} . {{ Request.Scheme }} . {{ Request.Method }} . HTTP Filters . signal_url . signal_url is a liquid filter that generates a fully-qualified absolute signal URL that will trigger the workflow instance from which this function is invoked. Example: . {{ “MySignal” | signal_url }} . Example output: . https://localhost:5001/signals/trigger/{some base64 token} . Markup . markup is a liquid filter which provides the text as full html rather and htmlencoded data . {{“&lt;h1&gt;Hello&lt;/h1&gt;” | markup }} . ",
    "url": "/docs/userguide/reference-liquid.html#workflow-filters",
    
    "relUrl": "/docs/userguide/reference-liquid.html#workflow-filters"
  },"146": {
    "doc": "Liquid",
    "title": "Liquid",
    "content": " ",
    "url": "/docs/userguide/reference-liquid.html",
    
    "relUrl": "/docs/userguide/reference-liquid.html"
  },"147": {
    "doc": "OData Filters",
    "title": "OData Filters",
    "content": " ",
    "url": "/docs/userguide/reference-odata.html",
    
    "relUrl": "/docs/userguide/reference-odata.html"
  },"148": {
    "doc": "OData Filters",
    "title": "Introduction",
    "content": "The Open Data Protocol (oData) is an open standard that defines a set of best practices for building and consuming RESTful APIs. oData enables the creation of HTTP-based data services, allowing clients to interact with data sources in a standardized and platform-agnostic way. This document provides a comprehensive guide to oData query syntax, which allows clients to filter, sort, and manipulate data retrieved from oData services. ",
    "url": "/docs/userguide/reference-odata.html#introduction",
    
    "relUrl": "/docs/userguide/reference-odata.html#introduction"
  },"149": {
    "doc": "OData Filters",
    "title": "System Query Options",
    "content": "System query options are used to specify the data requested from an oData service. These options can be combined to create complex queries. The following system query options are available: . Filer . The $filter option is used to filter the data returned the databse based on specified criteria. It supports a range of logical, arithmetic, and comparison operators. filter_expression` . Examples: . | Filter products with a Price greater than 20: | . Price gt 20 . | Filter orders with a Status of ‘Shipped’: | . Status eq 'Shipped' . oData also provides a set of functions to perform operations on the data. These functions can be used within the filter . String Functions . | substringof: Checks if a substring is within a string. | length: Returns the length of a string. | indexof: Returns the starting position of a substring in a string. | substring: Returns a substring from a string. | tolower: Converts a string to lowercase. | toupper: Converts a string to uppercase. | trim: Removes leading and trailing whitespace from a string. | concat: Concatenates two strings. | . ",
    "url": "/docs/userguide/reference-odata.html#system-query-options",
    
    "relUrl": "/docs/userguide/reference-odata.html#system-query-options"
  },"150": {
    "doc": "OData Filters",
    "title": "Date Functions",
    "content": ". | year: Returns the year component of a date. | month: Returns the month component of a date. | day: Returns the day component of a date. | hour: Returns the hour component of a date. | minute: Returns the minute component of a date. | second: Returns the second component of a date. | . Math Functions . | round: Rounds a number to the nearest integer. | floor: Rounds a number down to the nearest integer. | ceiling: Rounds a number up to the nearest integer. | . ",
    "url": "/docs/userguide/reference-odata.html#date-functions",
    
    "relUrl": "/docs/userguide/reference-odata.html#date-functions"
  },"151": {
    "doc": "Reference",
    "title": "Reference",
    "content": "This section contains reference information on the platform. ",
    "url": "/docs/userguide/reference.html",
    
    "relUrl": "/docs/userguide/reference.html"
  },"152": {
    "doc": "Release notes 1.7",
    "title": "Release Notes",
    "content": " ",
    "url": "/docs/release-notes-1-7.html#release-notes",
    
    "relUrl": "/docs/release-notes-1-7.html#release-notes"
  },"153": {
    "doc": "Release notes 1.7",
    "title": "Version 1.7.440",
    "content": "Welcome to the release notes for HubOne Workflows. This document contains information on late changes to the product as of the version above. Version 1.7.440 Released 6 December 2023 . | Release Notes . | Version 1.7.440 | Breaking Changes | Known Issues | Items resolved this release | Project Statistics | . | . ",
    "url": "/docs/release-notes-1-7.html#version-17440",
    
    "relUrl": "/docs/release-notes-1-7.html#version-17440"
  },"154": {
    "doc": "Release notes 1.7",
    "title": "Breaking Changes",
    "content": ". | Solutions - Solutions exported from previous versions do not work in this release. | Plugin Configuration - The appsettings.json will need to be amended for the new plugin settings. | PE Upgrade - If running PE, you will need to uninstall before installing this version. There will be no data loss | . ",
    "url": "/docs/release-notes-1-7.html#breaking-changes",
    
    "relUrl": "/docs/release-notes-1-7.html#breaking-changes"
  },"155": {
    "doc": "Release notes 1.7",
    "title": "Known Issues",
    "content": "The following are known issues in this release . | #975 - SQL Server Persistence WORKAROUND: None. There is no support for SQL Server in this release | #1345 - Set Empty Field Defaults WORKAROUND: There are no defaults for empty fields. | #1346 - Address Type WORKAROUND: There is no address type. Resolve this by adding individual string fields | #1572 - Expose Security System through Persistence Layer WORKAROUND: None - Security is available in Azure Console (BE) | #1574 - Expose Security System in UI WORKAROUND: None - Security is available in Azure Console (BE) | #1998 - Use different icons when showing User interaction tasks in workflows WORKAROUND: None | #2217 - Todo list app, run a workflow through a view WORKAROUND: None. Run Workflows through instances. | #2353 - Favourite views WORKAROUND: None | #2520 - Remove uses of System.Convert WORKAROUND: None | #2571 - Extend Views with isDashboardItem WORKAROUND: None | #2578 - Ability to customise the Dashboard WORKAROUND: None | #2605 - Provide searching across Workflows University WORKAROUND: None | #2608 - Elsa Activities: hide Miscellaneous activities WORKAROUND: None | #2708 - Make workflows msi launch application after running WORKAROUND: None | #2717 - Workflows training video | Module 1 Overview | Icon is cut off WORKAROUND: None | #2721 - Create a drop all tables button for PE WORKAROUND: None | #2845 - add sample workflow to University for ‘compensible’ WORKAROUND: None | #2871 - Remove pluralisation, I think saying EntityCreated Instances would be better, change button to Add Instance WORKAROUND: None | #2919 - Add an Activity that allows entry of a variable, rather than adding to an object WORKAROUND: None | #2939 - need an activity to sync data from an external database to WoW data objects WORKAROUND: None | #2941 - Display context-sensitive help WORKAROUND: None WORKAROUND: None | #2943 - on a task that has Q&amp;A, the hover-text is the column description on the database field WORKAROUND: None | #3165 - Task Due dates do not call the timeout outcome of the activity. WORKAROUND: None | #3249 - Integration of PowerShell Script Type into Elsa WORKAROUND: None | #3251 - Enable Webhook Manager WORKAROUND: None | #3298 - Read and write from Excel, Word, PowerPoint WORKAROUND: None | #3301 - Branches for Task Create/ Simple Task Create - Allow description to be added to branches. Maybe having another Dictionary&lt;string, string&gt; WORKAROUND: None | #3326 - Task Create: no field to enter ‘assigned to’ WORKAROUND: None | #3486 - If a workflow instance is deleted or faults with an active task, the task cannot be ‘completed’ WORKAROUND: None | #3660 - Watch Directory activity: cannot set the path to a variable WORKAROUND: None | #3667 - Watch Directory activity: will not execute unless ‘All’ is ticked WORKAROUND: None | #3668 - File Exists activity requires a literal, needs to accept javascript &amp; liquid variables WORKAROUND: None | #3669 - Read File activity needs branches for ‘Success’ and ‘failure’ WORKAROUND: None | #3719 - Representing Many to Many relationships with Views WORKAROUND: None | #3796 - Create Ubuntu installer for one WORKAROUND: None | #3806 - ParallelForEach does not have an Output() WORKAROUND: None | #3808 - Upgrade to ELSA 3.0 WORKAROUND: None | #3811 - Localization WORKAROUND: None | #3812 - Add Default Language Resource File and DI Localization WORKAROUND: None | #3813 - Localize Each String for en-us WORKAROUND: None | #3814 - Translate Resources for EN-AU WORKAROUND: None | #3824 - Add support for DataType plugins WORKAROUND: None | #3841 - Views - need a way to sequence them WORKAROUND: None | #3842 - When creating a Type, immediately show the Add Columns page WORKAROUND: None | #3856 - Create a backup page, that will show list of backups, and if there synced to azure WORKAROUND: None | #3858 - Add a Links facility to the menu WORKAROUND: None | #3873 - Create a Pandoc Plugin WORKAROUND: None | #3886 - Allow assigning a user when creating a task WORKAROUND: None | #3899 - BE: opening a workflow instance in a new window presents the login screen WORKAROUND: None | #3907 - Create an Activity to trigger when an instance is created in the database WORKAROUND: None | #3908 - Create an activity which triggers when an instance is updated in the database WORKAROUND: None | #3940 - Create a fine-tune model for chatgpt WORKAROUND: None | #4021 - Dark mode for WoW WORKAROUND: None | #4025 - Reduce paging overhead for large datasets WORKAROUND: None | #4040 - Configure BE to check license key and request one if one doesn’t exist. No Registration WORKAROUND: None | #4053 - Add button to allow delete all workflows | #4132 - Make solutions workflows only show latest workflows WORKAROUND: None | #4157 - Ability to select multiple tasks and do funky things with them WORKAROUND: None | #4159 - msgraph plugin - ability to paginate through unread emails WORKAROUND: None | #4160 - MSGraph plugin - fault calling MSGrapghMarkEmailAsRead in a loop WORKAROUND: None | #4197 - Exporting a large list gives an out of memory error WORKAROUND: None | #4198 - Can we version CSS (and JS?) so users dont get stuck with cached versions WORKAROUND: None - Perform refresh if issues | #4202 - Look at providing RPA for UI using UI Automation Framework WORKAROUND: None | #4203 - When adding a column to a type, improve the default Display Name WORKAROUND: None | #4219 - security issue on first run on MacOS WORKAROUND: None | #4220 - PE does not run on macOS - ‘401 not authorised’ error, and https certificate not working WORKAROUND: None | #4229 - New Activity - Find if something exists in a list, if it doesn’t create it, and if it does put it in a varaible WORKAROUND: None | #4239 - Provide ability to show/hide views WORKAROUND: None | #4240 - Should we allow user to select AllowNullable when creating columns? WORKAROUND: None | #4242 - Views with invalid filters dont fail gracefully - lets return a nice message WORKAROUND: None | #4286 - Add OData support for tasks WORKAROUND: None | #4287 - Add OData support for object instance client WORKAROUND: None | #4288 - Add OData support for task client WORKAROUND: None | #4310 - BE - leave browser open for about 30 minutes without interaction then try perform something - Unauthorised - needs graceful fail with message to re-auth WORKAROUND: None | #4389 - Task Editor, make branch options different colors and change to radio buttons WORKAROUND: None | . ",
    "url": "/docs/release-notes-1-7.html#known-issues",
    
    "relUrl": "/docs/release-notes-1-7.html#known-issues"
  },"156": {
    "doc": "Release notes 1.7",
    "title": "Items resolved this release",
    "content": ". | #1912 - Bug - UI Testing - Capabilities Page - Add Assigned Users | #2234 - Bug - Tasks page, search bar not aligned due to the sentence wrapping before the other | #2417 - Bug - View looks squished | #2439 - User Story - Add ‘Import’ button onto Types page | #2465 - User Story - HTML to Markdown Activities | #2575 - Bug - view definition - adding a space between the fieldnames prevents the view from rendering | #2868 - Bug - Combine Type Id and Str Type Id for object create | #3102 - Bug - AddIndexAsync(long objectTypeId, string columnName) - USE PATCH INSTEAD | #3483 - Bug - Import: does not match existing records, always creates new ones | #3762 - Bug - deleting item from a type fails with no error message displayed | #3774 - Bug - Tab navigation for objects when adding an object can’t tab to submit and cancel | #3787 - Task - When an item in a table is focused, action buttons should appear at the bottom of the item. | #3810 - User Story - Gobalization | #3833 - User Story - Provide the capability to uninstall plugins | #3870 - Bug - Add option for generate ClientBase for CodeGenerator | #3872 - Bug - Add option to code generator to disable creating interfaces | #3879 - User Story - On edit slide of plugin, display the markdown of the plugins README.md | #3884 - Bug - installer - seems to want to use the existing version’s folder but this has a filename that includes the version number | #3890 - Bug - Add Workflow of Type ViewCreate - Orderings list has no column data after selecting Type | #3898 - Task - filter option in a view for reference fields to have a ‘contains’ function | #3900 - User Story - ability to import the column definitions generated by Type Export | #3902 - Bug - you can create multiple views with the same name | #3903 - Bug - Spin the ‘play’ button for longer | #3904 - Bug - navigation &amp; views refresh | #3909 - Bug - odata comparing 2 dates fails | #3924 - User Story - Azure create CICD with latest part of main | #3926 - Bug - A Task created with only a reference field does not allow Submit | #3930 - User Story - WorldOfWorkflows.CodeGenerator serialize settings instead of using inputs | #3931 - User Story - WorldOfWorkflows.CodeGenerator show file structure | #3939 - Bug - Solutions: Views projections and orderings not working | #3941 - Bug - Solutions views - Projections issue on existing type | #3945 - Bug - Onedrive and sharepoint | #3946 - Bug - Todo tasks and todo tasks list | #3948 - Bug - Remove old files from pipelines | #3955 - Bug - Plugin manager - show Restart service button when pending | #3956 - Bug - tasks - UI - date fields need a stronger border | #3963 - Bug - SendEmail Office 365 in Cloud does not work. Could be linux issue? Http Works | #3970 - Bug - Views pager not totalling items correctly | #3971 - Bug - No loading spinner on Views page | #3976 - Task - Add paging to Solutions Lists | #3980 - Task - Views needs its paging updated to latest version 1.7? | #3982 - User Story - task ui: when Submit button is enabled, disable all other buttons apart from Cancel. | #3983 - Bug - taskUI - Dropdown list not being refreshed | #3984 - Feature - Solutions: add checkbox to show plugins required | #3988 - Bug - Registration PE 149 - In Account, the License Version is incorrect after rewrite | #3989 - Bug - Registration Errors after rewrite | #3993 - Bug - Remove reference to TribeTech in ProgramData Folder | #3995 - Bug - View Account drop down has wrong z-order | #3997 - Task - Task Editor add task slidein to instance page | #4000 - Bug - World of Workflows doesn’t appear in Start list | #4001 - Bug - Navigating to any other URL skips registration | #4002 - Bug - WorkflowsUniversity - Guide skips Company creation | #4003 - Bug - WorkflowsUniversity - Getting started doesn’t take into account the default column created (Title) | #4004 - Bug - WorkflowsUniversity - Sample views refer to Status and MyDate, which isn’t covered in the sample Types creation | #4005 - Bug - New registration code no longer follows specification | #4007 - Bug - Disable views paging for now | #4009 - Bug - Fix broken registration workflow - re-add local delete handling | #4010 - Bug - Solutions: handle duplicate types more elegantly | #4011 - Bug - After delete type, ensure list is refereshed | #4013 - Bug - Add Item Dialog - Set focus to first input element to start | #4018 - Bug - WorkflowsUniversity - No email or Phone data type | #4019 - Bug - WorkflowsUniversity - Views tutorial refers to Parent as numerical value | #4020 - Bug - Registration: cater for central database licence being deleted but local still exists | #4024 - Bug - Remove use of nerdbank revisioning when in debug mode, should make faster builds | #4026 - Task - Instance Task List add paging and filtering | #4027 - Task - Does ObjectStateDisplay have a Disable feature? | #4028 - Bug - A Task created with only a date field does not allow Submit | #4029 - Task - Solutions: Add search filter to types views and workflows export selection | #4030 - Task - Solutions: make better use of empty whitespace when listing export and import items | #4031 - Bug - Solutions: imported workflows not maintaining all x and y coordinates | #4032 - Bug - View sorting is not defaulting | #4033 - Task - Ability to sort the data column definition | #4034 - Task - Solutions (Export): Allow user to filter Views selection by related type | #4037 - User Story - Add Plugins to Solutions | #4038 - Bug - OData does not work in the View query | #4039 - Task - Views: Add Id as Column | #4042 - Task - Solutions Export: Re-order selected types according to linked references before exporting | #4043 - Task - Solutions: show on UI which Types have columns that reference other types | #4045 - Bug - missing ‘Current User’ column in Tasks view in Data object in BusinessEdition | #4046 - User Story - Make Tasks in data object a live link | #4047 - Task - Add a refresh button to Data editor / Tasks &amp; History tabs | #4048 - Bug - tasks tab in Data instance editor shows workflow ID, not instance log | #4049 - Bug - Opening Views from the Admin page only shows 5 rows, regardless of the Page Size | #4052 - User Story - Change Views to accept an OData filter instead of the dynamic LINQ syntax. | #4055 - User Story - Create Plugin for PipeDrive | #4056 - Task - Generate Plugin for PipeDrive | #4057 - Task - Add Authentication | #4058 - Task - Release Plugin | #4059 - Bug - World of workflows Code Generator, escape strings for description | #4060 - Task - Solutions: Allow refire option for failed Activities | #4061 - Bug - Documentor - workflow diagram does not work | #4065 - Bug - Plugin removal and add on PE seems to be flaky | #4066 - Task - Task: Add Sorting and Paging to AllTypes page | #4067 - Bug - Filter window needs to move up a few px for one row tables | #4068 - Bug - Need to be able to filter emails in GetUnreadEmails using oData Filters | #4072 - Task - Paging: remember paging size selected per View | #4073 - Task - Add new format Save / Cancel button to View Instance Add Slidein | #4074 - Task - Delete Type Dialog - allow delete of all instances on delete “instance exists” error | #4075 - Bug - Solutions: Filter by type not working | #4076 - Bug - Views Page: Add a view doesnt refresh the NavMenu immediately | #4078 - User Story - CES Plugin with 1 working activity | #4081 - Bug - WorldOfWorkflows.CodeGenerator exception not showing in file structure | #4083 - User Story - WorldOfWorkflows.MSGraph (generated plugin) create the same activities that are in the released plugin | #4090 - Bug - Need to be able to add an attachment to Office 365 Emails | #4092 - Bug - Create a build configuration that sets Enable_Registration to False in DEBUG | #4093 - Bug - PluginsManager: fix restart error where slidein opens | #4096 - Bug - Chatgpt a whisper api | #4097 - Bug - Plugin Configuration file, if plugin configuration fails to load ensure that Workflows still runs | #4101 - Bug - Filter for reference types is showing the instance Id rather than Instance Title | #4103 - Task - Upgrade Elsa to 2.13 | #4104 - User Story - Upgrade Elsa to 2.13 | #4105 - Task - Allow Add Another on Type Add page | #4106 - Task - Show referenced columns in DeleteDialog delete error | #4107 - Bug - WorldOfWorkflows.CES get all pictures | #4108 - Bug - WorldOfWorkflows.CES change StudentIdSchool | #4110 - Task - Persist Sorting values for Types, Instances | #4116 - Bug - Upgrading Plugin is unreliable | #4119 - Task - Restyle Settings page | #4120 - Task - Restart Service check for restart | #4121 - Bug - Documentor - Diagram has incorrect direction in ER Diagram | #4122 - Bug - Documentor - Diagram has incorrect data types | #4123 - Bug - Instance Workflow runner - Entire block should run workflow, not just play button | #4124 - Bug - Strange issue - clean database and after cannot add Workflows | #4126 - Bug - Picked tasks don’t automatically display when I complete a previous task | #4127 - Bug - This solution does not import correctly. Please work out why. | #4128 - Task - Please compact Sqlite database on close before backup process | #4129 - Bug - Need better way to show views nav when there are many - suggest dropdown menu | #4131 - Bug - Settings &gt; Create Backup &gt; Alert does not show path correctly and it disappears too fast | #4134 - Bug - Add delete dialog to views page | #4135 - Task - Add &lt;&gt; to Enum Column Filters | #4137 - Bug - Cannot reference a newly created object type in a execution pass of a workflow | #4138 - Task - Complete README as per template for Code Generator in advance of public Open Source Release | #4140 - User Story - Create Additional Share Point Activities for the MSGraph plugin | #4144 - Bug - Adding an instance from a view doesnt update the instances in the View | #4145 - Bug - Get name of Parent View in Views page - Id is not helpful | #4146 - Bug - Fix CodeSigner to output an actual p7s certificate | #4147 - Task - Add Icons for all action links | #4148 - Bug - BE Setup Powershell Script - Connect-MgGraph - ForceRefresh not a valid parameter | #4149 - Bug - Registration success dialog: Name field shows Date info | #4150 - Bug - Views - fail gracefuly and show error on create error | #4151 - Bug - Views - remove obsolete slide in methods | #4152 - Bug - Registration is assigning email field to name | #4153 - Bug - Adding a parent view of the same type to a view crashes the app | #4155 - Bug - MS Graph Add Category | #4156 - Task - Add Xero project Activities | #4162 - Bug - Instance List sorting on a reference field sorts on the ObjectId not the Title field | #4164 - Task - Add an alerts feature to show if there are any faulted workflows in the system | #4165 - Bug - remember the resized size of a task | #4166 - Task - Upgrade Code Generator to Elsa 2.13 | #4167 - Bug - Instance List - null filter not working | #4168 - Task - Upgrade NinjaOne Plugin to Elsa 2.13 | #4169 - Bug - Instance List - selecting a filter hides the first row returned | #4170 - Task - Upgrade PipeDrive Plugin to Elsa 2.13 | #4171 - Bug - Instance List - filters dialog shows the ObjectId of a reference field | #4172 - Task - Upgrade WorldofWorkflows.Plugins to Elsa 2.13 | #4173 - User Story - Instance List - add a filter for the ID column | #4174 - Bug - Instance List - delete items needs a spinner | #4175 - Task - Upgrade Nugets in WOWF-XeroActivities | #4176 - Bug - Instance List - Date filter has no Time option | #4177 - Task - Upgrade Utilities Plugin to Elsa 2.13 | #4180 - Bug - Instance List and Solutions - icons are confusing | #4181 - Bug - WOW BE - Will not start with existing OR New Database - Claims the following issue | #4190 - Bug - 1.7.180 - Error rendering views | #4192 - Bug - Expand view column header to fit content on initial load | #4193 - Bug - Views: nav select show gray box even when view has no children | #4194 - Bug - BE PowerShell.issues | #4199 - Bug - Views - display long string fields better | #4201 - Bug - Re-add plugins to solutions | #4204 - Bug - Import data: the column ‘names’ shows the Column Description field | #4205 - Bug - Instance List editor - inline edit error with datetime fields | #4207 - Bug - failed import - but no reasons shown | #4208 - Bug - Diagram button in types should say “View Diagram” not Edit Diagram, | #4209 - Bug - Remove Developer Mode from Settings | #4210 - Bug - Child Views no longer visible | #4212 - Bug - Change Solutions Import | #4214 - Bug - changing column names breaks data when the column is indexed | #4215 - Bug - ObjectInstanceCreate shows no fields | #4216 - Bug - Settings / Service running shows red X even when the service is up | #4217 - Bug - Instance List - icon placement when in in-line edit mode | #4218 - Bug - Workflows University - .net 7 links | #4221 - Bug - On first run, PE license dialog does not show unless you go to Admin or other page | #4222 - Bug - On PE, if you close first use dialog, you have to click Admin twice | #4230 - Bug - Exporting from a view gives a file with no extension. Extensions should be CSV | #4231 - Bug - Refresh view after filter - keeps filter but looses UI reference to filter | #4232 - Bug - refresh View does not seem to go back to the database to get new values | #4236 - Task - Create a new pipeline for Xero to support 1.6 | #4237 - Task - Create a new pipeline for MSGraph to support 1.6 | #4238 - Task - Create a new pipeline for Autotask to support 1.6 | #4241 - Bug - Inline Edit - DateTime field not updating in real time | #4245 - Bug - Add Instance,”Save” and “Save and add another” doesn’t remain same size. | #4247 - Bug - Unexpected behavior for delete type when instances exist within them | #4248 - Bug - Instances page, the “Save and Add Another” instance button should be first for tab. | #4249 - User Story - Change ReadOnlyObjectDisplay, ReadOnlyObjectStateDisplayHost, ObjectDisplay and ObjectStateDisplayHost to not use System.Linq.Expressions | #4277 - Bug - Fix Xero build (rename project file to WorldOfWorkflows.Xero) | #4278 - Bug - Filtering and Export Issue | #4279 - User Story - Server side paging and filtering | #4291 - Bug - Plugins in Solutions | #4292 - Bug - Export from Views AND Types showing related object Ids, not titles - Import also | #4295 - Bug - Types page: dont show pager until rows have loaded | #4296 - Bug - Columns Page: Add new style action buttons | #4297 - Bug - All Pages: dont show action buttons until data is loaded | #4299 - Bug - type column editor - import columns does the wrong thing | #4300 - Bug - Delete instance - non-existant reference | #4301 - Bug - Type -&gt; Edit Diagram button shows the Data Dictionary and not a diagram | #4302 - Bug - Domain Regos View in https://tt-workflows.azurewebsites.net/ is crashing | #4304 - Bug - tt-worldofworkflows site: Data Error in “Domain Regos” View due to FILTER “Customer ne null” | #4305 - User Story - Remember the user defined column widths in views | #4306 - Bug - fiels in Type instance -&gt; Tasks do not align properly | #4309 - Bug - Adding Reference Col to type: requires full page refresh to display list of references on Add Instance | #4313 - Bug - sort dropdowns in tasks | #4314 - Bug - task drop-downs not refreshing unless the browser page is refreshed | #4315 - Bug - Instance editor - task refresh does not work | #4319 - Bug - Documentor - reduce the clutter | #4320 - Bug - Instance List - filtering on dates not using the displayed date - maybe getting UTC wrong? | #4321 - Bug - instance list filtering - just a bit too quick to properly enter date fields | #4324 - User Story - Upgrade to .NET 8 | #4327 - Bug - Import: Add spinner for long running processes such as large file upload | #4330 - Bug - Task editor - red box on drop-down | #4331 - Bug - Task editor - selecting a drop-down does not enable the Submit button | #4332 - Bug - deleting item from a view does not work | #4333 - Bug - Inline Edit in View - Editing a date doesn’t stick | #4335 - Bug - Unable to add new types | #4336 - Bug - Cannot edit integer fields | #4338 - Bug - Make top nav responsive | #4339 - Bug - Cannot connect and authorize with Swagger UI | #4340 - Bug - Cannot Upload Plugins | #4341 - Bug - World of Workflows Service Won’t Start | #4342 - Bug - Loading Utilities Plugin gives no name or description | #4343 - Bug - “Save and Add another” and “Save” instance page reloads table | #4344 - Bug - Default no description provided for task to be empty and don’t load it in the editor. | #4346 - Bug - PE cannot register and error on home screen | #4347 - Bug - Cannot Import Solution | #4348 - Bug - allow sorting and filtering on ID column in VIEWS | #4349 - Bug - deleting instances from VIEWS needs the same UI as deleting from TYPES | #4351 - Bug - Add seconds to HTML datetime picker for filters | #4352 - Bug - Make Primary Add Button just a + | #4354 - Bug - No Activity to delete object Instance | #4356 - Bug - Delete Icon stays as spinner | #4358 - Bug - Error in Browser Console | #4360 - Bug - Cannot import exported solution | #4362 - Task - Make views nav dropdown hierachical | #4364 - Bug - UI Shows Hamburger Menu even in Full Size Screen | #4365 - Bug - Hamburger Menu too close to left of page | #4366 - Bug - Alerts Interface. Hovering over buttons makes them disappear | #4369 - Bug - oAuth Authorisation Broken | #4370 - Bug - minor change to Alert window - add name instead of ID | #4372 - Bug - Refreshing auto-navigates back to the homepage in PE | #4374 - Bug - Import: no data imported when creation of type on import selected | #4375 - Bug - Import - identify the failed records | #4376 - Bug - export - needs ANOTHER column of objectID after the Title field | #4377 - Bug - instance list filtering on reference field - sort the items | #4378 - Bug - instance list filtering on reference field - scrolling issue with &gt; screenful of choices | #4379 - Bug - Alerts not showing Workflow Name | #4380 - Bug - sort dropdowns in instance editor | #4381 - Bug - MSGraph - typo in the prompt text | #4383 - Bug - Remove focus outline on welcome page | #4384 - Bug - Remove ugly text select on Task Editor when dragging size | #4385 - Bug - Task Editor : Remove ugly text selection on when dragging size | #4386 - Bug - Admin-&gt;Task List - can only open tasks that have a RelatedObject | #4387 - Bug - Link off Admin-&gt;Tasks to Workflow instance has a missing hypen | #4393 - Bug - Solution Import does not succeed | #4394 - Bug - Error on First Load | #4395 - Bug - View children breadcumb issues | #4398 - Bug - Plugin error upgrade fails | . ",
    "url": "/docs/release-notes-1-7.html#items-resolved-this-release",
    
    "relUrl": "/docs/release-notes-1-7.html#items-resolved-this-release"
  },"157": {
    "doc": "Release notes 1.7",
    "title": "Project Statistics",
    "content": "| Language | files | blank | comment | code | . | JavaScript | 10,797 | 136,397 | 440,784 | 3,274,171 | . | JSON | 631 | 86 | 0 | 490,756 | . | C# | 1,331 | 39,493 | 27,420 | 182,168 | . | TypeScript | 1,829 | 19,603 | 129,439 | 173,585 | . | C | 20 | 4,283 | 8,673 | 58,254 | . | Markdown | 362 | 23,505 | 48 | 52,026 | . | XML | 1257 | 5220 | 9717 | 43,861 | . | Text | 148 | 451 | 0 | 40997 | . | Bourne Shell | 37 | 3,803 | 3,835 | 25,948 | . | CSS | 152 | 4,548 | 1,414 | 23,680 | . | C# Designer | 22 | 3,772 | 47 | 12,316 | . | diff | 5 | 126 | 1135 | 10,306 | . | Razor | 95 | 853 | 1594 | 9038 | . | m4 | 1 | 823 | 84 | 7059 | . | Korn Shell | 1 | 996 | 1393 | 6502 | . | HTML | 30 | 705 | 2 | 4481 | . | C# Generated | 146 | 444 | 1389 | 2148 | . | INI | 53 | 205 | 0 | 1486 | . | Visual Studio Solution | 2 | 1 | 2 | 1394 | . | LESS | 16 | 255 | 8 | 1326 | . | YAML | 40 | 54 | 27 | 965 | . | MSBuild script | 38 | 204 | 78 | 961 | . | SVG | 24 | 0 | 4 | 754 | . | make | 12 | 277 | 734 | 754 | . | Windows Resource File | 11 | 70 | 113 | 705 | . | C/C++ Header | 7 | 104 | 390 | 681 | . | PowerShell | 25 | 26 | 116 | 516 | . | DOS Batch | 24 | 46 | 0 | 348 | . | Windows Module Definition | 4 | 1 | 0 | 318 | . | SQL | 1 | 30 | 52 | 314 | . | Bourne Again Shell | 1 | 5 | 0 | 48 | . | XAML | 4 | 9 | 0 | 48 | . | Visual Basic Script | 1 | 14 | 23 | 45 | . | Dockerfile | 1 | 4 | 1 | 24 | . | Properties | 6 | 0 | 0 | 24 | . | Nix | 1 | 1 | 0 | 19 | . | CoffeeScript | 1 | 1 | 0 | 0 | . | SUM: | 17,136 | 246,415 | 628,522 | 4,428,026 | . ",
    "url": "/docs/release-notes-1-7.html#project-statistics",
    
    "relUrl": "/docs/release-notes-1-7.html#project-statistics"
  },"158": {
    "doc": "Release notes 1.7",
    "title": "Release notes 1.7",
    "content": " ",
    "url": "/docs/release-notes-1-7.html",
    
    "relUrl": "/docs/release-notes-1-7.html"
  },"159": {
    "doc": "Reporting",
    "title": "Reporting",
    "content": "Reporting on World of Workflows can be performed using any oData Client. Examples of this are Excel, PowerBI or Tableau. The following instructions are for Excel: . ",
    "url": "/docs/userguide/reporting.html",
    
    "relUrl": "/docs/userguide/reporting.html"
  },"160": {
    "doc": "Reporting",
    "title": "Excel",
    "content": "Open a new spreadsheet in Microsoft Excel . Click the Data menu . Click Get Data . Choose From Other Sources and choose oData feed. In the OData feed window, enter the URL of your World of Workflows Instance followed by /odata. For example for World of Workflows PE this will be https://localhost:7063/odata. Once done, click Ok . Next, for World of Workflows Business Edition, choose Organizational Account and Login. For World of Workflows Personal Edition, just click Connect . Next, select the items you want to report on. For each type there are two tables, the CurrentState and the HistoryState. Current State is the current configuration of those objects whereas History State is the history and changes for that object. When you have selected your tables click Transform Data. You will now be working with the Power Query Editor. Please refer to Excel documentation on how to manipulate this data. When complete click Close &amp; Load . ",
    "url": "/docs/userguide/reporting.html#excel",
    
    "relUrl": "/docs/userguide/reporting.html#excel"
  },"161": {
    "doc": "Solutions",
    "title": "Solutions",
    "content": "Solutions are packaged collections of Types, Views and Workflows. Using the Solutions feature of world of workflows, you can export these items and re-import them into another system. Note: Solutions are compressed into Zip files. Solution Authors can open the zip file and edit the files within prior to sending a solution to someone else. ",
    "url": "/docs/userguide/solutions.html",
    
    "relUrl": "/docs/userguide/solutions.html"
  },"162": {
    "doc": "Solutions",
    "title": "Exporting Solutions",
    "content": "Navigate to Admin -&gt; Solutions and click the Export button . Give the solution a name, version, and optional description and icon, . Next, expand Types, Workflows and Views and select the items you want to include in the solution. When complete, click Export Solution. The system will download a zip file. In this zip file are several files: . | SOLUTION_DETAILS is a file which contains information on your solution in JSON format. | SETUP_WF is a workflow that is run when the solution in imported. It creates all the types, and views. You can modify this workflow to do anything you wish by importing it into World of Workflows, editing it and exporting it. | The remaining files are the workflows you wish to import. | . ",
    "url": "/docs/userguide/solutions.html#exporting-solutions",
    
    "relUrl": "/docs/userguide/solutions.html#exporting-solutions"
  },"163": {
    "doc": "Solutions",
    "title": "To import a solution",
    "content": "Navigate to Admin -&gt; Solutions and click the green import button . Click to upload the solution or drag and drop. Check the Name, Version, Icon and Description are what you expect: . Verify (or deselect) the types, workflows and views. Finally, check whether you want to delete the setup workflow after run and click Confirm Import Solution. Important: Importing solutions is at your own risk. Solutions can contain destructive workflows so ensure you check the solution source and setup workflow before importing. ",
    "url": "/docs/userguide/solutions.html#to-import-a-solution",
    
    "relUrl": "/docs/userguide/solutions.html#to-import-a-solution"
  },"164": {
    "doc": "Starting Workflows",
    "title": "Starting Workflows",
    "content": "There are three main ways to start a workflow: . | Timer based workflow - World of Workflows comes with a comprehensive scheduling system allowing you to run workflows at times that suit you. | Http Based Workflow - Using the Http Activity, you can start a workflow by calling a URL that you create. | Data Instance based workflow - By naming a workflow definition with a specific naming convention, you can start a workflow from the Object Edit Screen. | . These are described below: . ",
    "url": "/docs/workflow-development/starting-workflows.html",
    
    "relUrl": "/docs/workflow-development/starting-workflows.html"
  },"165": {
    "doc": "Starting Workflows",
    "title": "Timer Based Workflow",
    "content": ". | Create a New Workflow | Click Start and choose the Timers category and the Cron activity. | Configure the Cron activity to run at the time you want the workflow to run. This is done using a Cron Expression. You can find examples of these here | Click Save | . Now your workflow will run at the time you specify. ",
    "url": "/docs/workflow-development/starting-workflows.html#timer-based-workflow",
    
    "relUrl": "/docs/workflow-development/starting-workflows.html#timer-based-workflow"
  },"166": {
    "doc": "Starting Workflows",
    "title": "Http Based Workflow",
    "content": ". | Create a new Workflow. | Click Start and choose the HTTP category and the HTTP Endpoint activity. | Give the activity a path, and select a method (you should use GET if you wish to run the workflow from a desktop shortcut). Select Read Content if you wish to use data sent as a part of this request later in your workflow. | Click Save | . Now, whenever you navigate to the URL you specified, the workflow will run. Note: In Personal Edition, you will need to run this from a new InPrivate or Incognito session in your browser. ",
    "url": "/docs/workflow-development/starting-workflows.html#http-based-workflow",
    
    "relUrl": "/docs/workflow-development/starting-workflows.html#http-based-workflow"
  },"167": {
    "doc": "Starting Workflows",
    "title": "Data Instance based workflow",
    "content": ". | Create a new Workflow. | Click Add Activity and choose the Data category and the Object Instance Trigger activity | Right Click and Choose Edit | Select the type you wish to trigger the workflow from | Click Save | . Now, whenever you navigate to a specific instance of the type specified, this workflow will appear in the workflow tabs. Admin -&gt; Types -&gt; [Type Name] -&gt; [Instance Name] -&gt; Workflows . ",
    "url": "/docs/workflow-development/starting-workflows.html#data-instance-based-workflow",
    
    "relUrl": "/docs/workflow-development/starting-workflows.html#data-instance-based-workflow"
  },"168": {
    "doc": "Tasks",
    "title": "Tasks",
    "content": "The Task Management System in World of Workflows is designed to help users efficiently manage and organize the work assigned to them. Tasks are created by Workflows and form an important part of the automation of a business process. This chapter will discuss how to interact with tasks, including picking tasks, understanding task details, updating database fields, and working with action buttons. The creation of tasks within workflows will be covered in a later chapter. ",
    "url": "/docs/userguide/tasks.html",
    
    "relUrl": "/docs/userguide/tasks.html"
  },"169": {
    "doc": "Tasks",
    "title": "Overview of the Task Management System",
    "content": "The Task Management System provides the following capabilities: . | View and browse available Tasks assigned to you or unassigned. | Pick a Task, adding it to your personal to-do list. | View Task details, including the title, formatted description, and any associated data to enter into the Task. | Update database details directly within a Task. | Complete tasks by clicking action buttons, which correspond to different branches in the workflow. | . ",
    "url": "/docs/userguide/tasks.html#overview-of-the-task-management-system",
    
    "relUrl": "/docs/userguide/tasks.html#overview-of-the-task-management-system"
  },"170": {
    "doc": "Tasks",
    "title": "Picking tasks",
    "content": "To pick a task and add it to your personal to-do list, follow these steps: . | Navigate to Tasks in World of Workflows. | On the right hand side, you will see a list of available task.. | To pick a task, click on the Pick button next to the desired task (or click on the text in the task). The task will now appear in your personal to-do list. This step ensures that no other user will see the Task and tells World of Workflows that you are now responsible for completing the Task. | . ",
    "url": "/docs/userguide/tasks.html#picking-tasks",
    
    "relUrl": "/docs/userguide/tasks.html#picking-tasks"
  },"171": {
    "doc": "Tasks",
    "title": "Understanding task details",
    "content": "When you open a task, you will see the following information: . | Title: A brief, descriptive title for the task. | Description: A detailed, formatted description providing instructions or context for the task. | Fields: Custom fields associated with the task, which may require input or updates. Not all tasks will have custom fields: this is determined when building the Workflow that started the task. | Choices: Buttons allow you to complete the task, or the ability to unassign the task to return it to the queue. | . ",
    "url": "/docs/userguide/tasks.html#understanding-task-details",
    
    "relUrl": "/docs/userguide/tasks.html#understanding-task-details"
  },"172": {
    "doc": "Tasks",
    "title": "Updating database fields within tasks",
    "content": "To update the database fields within a task, follow these steps: . | Open the Task by clicking on its title in your personal to-do list. | Locate the entry field(s) that require input or updates. | Enter or modify the data as necessary. | Click Save/Submit or a similar button, to save your changes and update the database. | . ",
    "url": "/docs/userguide/tasks.html#updating-database-fields-within-tasks",
    
    "relUrl": "/docs/userguide/tasks.html#updating-database-fields-within-tasks"
  },"173": {
    "doc": "Tasks",
    "title": "Working with action buttons",
    "content": "Tasks may have one or more action Buttons, each corresponding to a different branch in the workflow. To complete a task, click on the appropriate action button: . | Open the Task by clicking on its title in your personal to-do list. | Review the task details and ensure that all required fields have been updated. | Click on the action Button that corresponds to the desired outcome or next step in the workflow. This will mark the task as complete and trigger any subsequent actions or tasks in the workflow. | . Remember that tasks are created and associated with workflows, which will be covered in more detail in a later chapter. By utilizing the Task Management System in World of Workflows, you can efficiently manage your tasks, collaborate with your team, and ensure smooth progression through your business process as defined in your workflows. ",
    "url": "/docs/userguide/tasks.html#working-with-action-buttons",
    
    "relUrl": "/docs/userguide/tasks.html#working-with-action-buttons"
  },"174": {
    "doc": "Template",
    "title": "Template",
    "content": "Template tags tell Liquid where to disable processing for comments or non-Liquid markup, and how to establish relations among template files. ",
    "url": "/docs/liquid/template.html#template",
    
    "relUrl": "/docs/liquid/template.html#template"
  },"175": {
    "doc": "Template",
    "title": "comment",
    "content": "Allows you to leave un-rendered code inside a Liquid template. Any text within the opening and closing comment blocks will not be printed, and any Liquid code within will not be executed. Input . {% assign verb = \"turned\" %} {% comment %} {% assign verb = \"converted\" %} {% endcomment %} . Anything you put between {% comment %} and {% endcomment %} tags is {{ verb }} into a comment. Output . Anything you put between tags is turned into a comment. Inline comments . You can use inline comments to prevent an expression from being rendered or output. Any text inside of the tag also won’t be rendered or output. You can create multi-line inline comments. However, each line must begin with a #. Input . {% # for i in (1..3) -%} {{ i }} {% # endfor %} {% ############################### # This is a comment # across multiple lines ############################### %} . Output . Inline comments inside liquid tags . You can use the inline comment tag inside liquid tags. The tag must be used for each line that you want to comment. Input . {% liquid # this is a comment assign topic = 'Learning about comments!' echo topic %} . Output . Learning about comments! . raw . Temporarily disables tag processing. This is useful for generating certain content that uses conflicting syntax, such as Mustache or Handlebars. Input . {% raw %} In Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not. use endraw to end the raw block. Output . In Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not. liquid . Encloses multiple tags within one set of delimiters, to allow writing Liquid logic more concisely. {% liquid case section.blocks.size when 1 assign column_size = '' when 2 assign column_size = 'one-half' when 3 assign column_size = 'one-third' else assign column_size = 'one-quarter' endcase %} . Because any tag blocks opened within a liquid tag must also be closed within the same tag, use echo to output data. echo . Outputs an expression in the rendered HTML. This is identical to wrapping an expression in {{ and }}, but works inside liquid tags and supports filters. Input . {% liquid for product in collection.products echo product.title | capitalize endfor %} . Output . Hat Shirt Pants . render . Insert the rendered content of another template within the current template. {% render \"template-name\" %} . Note that you don’t need to write the file’s .liquid extension. The code within the rendered template does not automatically have access to the variables assigned using variable tags within the parent template. Similarly, variables assigned within the rendered template cannot be accessed by code in any other template. render (parameters) . Variables assigned using variable tags can be passed to a template by listing them as parameters on the render tag. {% assign my_variable = \"apples\" %} {% render \"name\", my_variable: my_variable, my_other_variable: \"oranges\" %} . One or more objects can be passed to a template. {% assign featured_product = all_products[\"product_handle\"] %} {% render \"product\", product: featured_product %} . with A single object can be passed to a template by using the with and optional as parameters. {% assign featured_product = all_products[\"product_handle\"] %} {% render \"product\" with featured_product as product %} . In the example above, the product variable in the rendered template will hold the value of featured_product from the parent template. for . A template can be rendered once for each value of an enumerable object by using the for and optional as parameters. {% assign variants = product.variants %} {% render \"product_variant\" for variants as variant %} . In the example above, the template will be rendered once for each variant of the product, and the variant variable will hold a different product variant object for each iteration. When using the for parameter, the forloop object is accessible within the rendered template. include . The include tag is deprecated; please use render instead. Insert the rendered content of another template within the current template. {% include \"template-name\" %} . The include tag works similarly to the render tag, but it allows the code inside of the rendered template to access and overwrite the variables within its parent template. It has been deprecated because the way that it handles variables reduces performance and makes Liquid code harder to both read and maintain. Note that when a template is rendered using the render tag, the include tag cannot be used within the template. ",
    "url": "/docs/liquid/template.html#comment",
    
    "relUrl": "/docs/liquid/template.html#comment"
  },"176": {
    "doc": "Template",
    "title": "Template",
    "content": " ",
    "url": "/docs/liquid/template.html",
    
    "relUrl": "/docs/liquid/template.html"
  },"177": {
    "doc": "Timer Activities",
    "title": "Timer Activities",
    "content": "Timer Activities in World of Workflows provide triggers to start and resume workflows based on server time. It should be noted that when working with server time when world of workflows is hosted in Azure, AWS or GCP, the time is always stored in UTC. This chapter will cover the essential Timer Activities, including Cron, Timer, Start at and Clear timer . CRON . The CRON activity starts a workflow based on a CRON expression. CRON started as a command-line utility, used as a job scheduler on Unix-like operating systems. You can use cron to schedule workflows to run periodically at fixed times, dates, or intervals. Cron’s name originates from chronos, the Greek word for time. The cron format has five time and date fields separated by at least one blank. There can be no blank within a field value. Scheduled tasks are executed when the minute, hour, and month of year fields match the current time and date, and at least one of the two day fields (day of month, or day of week) match the current date. | Field Name | Allowed Values | . | Minute | 0-59 | . | Hour | 0-23 | . | Day of month | 1-31 | . | Month | 1-12 where 1 is January,2 is February etc . Uppercase, lowercase and mixed-case three character strings based on the English name of the month, for example jan, feb, mar, apr etc . | . | Day of week | 0-7 where 0 or 7 is Sunday, 1 mis Monday and so on . Uppercase, lowercase or mixed case three character strings based on the English name of the day, mon, tue, wed, thu, fri, sat or sun . | . Ranges and lists . Ranges of numbers are allowed. Ranges are two numbers separated with a hyphen. The specified range is inclusive. For example, the range 8-11 for an hour entry specifies execution at hours 8, 9, 10 and 11. Lists are allowed. A list is a set of numbers or ranges separated by commas. For example: . 1,2,5,9 . 0-4,8-12 . Unrestricted range . A field can contain an asterisk (*), which represents all possible values in the field. The day of a command’s execution can be specified by two fields: day of month and day of week. If both fields are restricted by the use of a value other than the asterisk, the command will run when either field matches the current time. For example, the value 30 4 1,15 * 5 causes a command to run at 4:30 AM on the 1st and 15th of each month, plus every Friday. Step values . Step values can be used in conjunction with ranges. The syntax range/step defines the range and an execution interval. If you specify first-last/step, execution takes place at first, then at all successive values that are distant from first by step, until last. For example, to specify command execution every other hour, use 0-23/2. This expression is equivalent to the value 0,2,4,6,8,10,12,14,16,18,20,22. If you specify */step, execution takes place at every interval of step through the unrestricted range. For example, as an alternative to 0-23/2 for execution every other hour, use */2. Example . The following table lists values that you can use CRON activity: . Table 2. Example task schedules and the appropriate schedule argument values . Desired task schedule . | Schedule | Value | . | 2:10 PM every Monday | 10 14 * * 1 | . | Every day at midnight | 0 0 * * * | . | Every weekday at midnight | 0 0 * * 1-5 | . | Midnight on 1st and 15th day of the month | 0 0 1,15 * * | . | 6.32 PM on the 17th, 21st and 29th of November plus each Monday and Wednesday in November each year | 32 18 17,21,29 11 mon,wed | . Timer . The timer activity triggers at a specific timeout. It could run every 10 minutes, every 5 seconds or every hour. To specify the timeout, you need to use a duration object, expressed as time. | Interval | Meaning | . | 00:00:05 | Every 5 seconds | . | 00:02:00 | Every 2 minutes | . | 01:00:00 | Every hour | . Unlike Cron which runs when the system time matches a specific time and date, timer when started runs the duration after the previous run. StartAt . The StartAt activity triggers at a specific moment in time. If the time is in the past, the activity will not run. If it is in the future, it will wait until the time then start the rest of the workflow. The date and time should be expressed as UTC and use the following format: . YYYY-MM-DDTHH:mm:ssZ (for example: 2023-07-10T12:00:00Z). This represents a date-time in the UTC timezone. Clear Timer . ClearTimer, is part of the “Timers” category. Its purpose is to cancel or clear a timer (of types Cron, StartAt, Timer), thus preventing it from executing. The ClearTimer activity accepts ActivityId. This should be the ID of the timer activity (Cron, StartAt, Timer) that needs to be cleared. This input parameter supports JavaScript and Liquid syntaxes. To use this, name the activity you want to cancel, then use the JavaScript syntax: . getActivityID(“ActivityName”) . In essence, the ClearTimer activity provides a way to programmatically control the execution of a workflow by allowing timer activities to be cancelled based on certain conditions. ",
    "url": "/docs/userguide/timer-activities.html",
    
    "relUrl": "/docs/userguide/timer-activities.html"
  },"178": {
    "doc": "Truthy and Falsy",
    "title": "Truthy and falsy",
    "content": "When a non-boolean data type is used in a boolean context (such as a conditional tag), Liquid decides whether to evaluate it as true or false. Data types that return true by default are called truthy. Data types that return false by default are called falsy. ",
    "url": "/docs/liquid/truthy-amd-falsy.html#truthy-and-falsy",
    
    "relUrl": "/docs/liquid/truthy-amd-falsy.html#truthy-and-falsy"
  },"179": {
    "doc": "Truthy and Falsy",
    "title": "Truthy",
    "content": "All values in Liquid are truthy except nil and false. In the example below, the text “Tobi” is not a boolean, but it is truthy in a conditional: . {% assign name = \"Tobi\" %} {% if name %} This text will always appear since \"name\" is defined. {% endif %} . Strings, even when empty, are truthy. The example below will create empty HTML tags if page.category exists but is empty: . Input . {% if page.category %} &lt;h1&gt;{{ page.category }}&lt;/h1&gt; {% endif %} . Output . &lt;h1&gt;&lt;/h1&gt; . ",
    "url": "/docs/liquid/truthy-amd-falsy.html#truthy",
    
    "relUrl": "/docs/liquid/truthy-amd-falsy.html#truthy"
  },"180": {
    "doc": "Truthy and Falsy",
    "title": "Falsy",
    "content": "The only values that are falsy in Liquid are nil and false. ",
    "url": "/docs/liquid/truthy-amd-falsy.html#falsy",
    
    "relUrl": "/docs/liquid/truthy-amd-falsy.html#falsy"
  },"181": {
    "doc": "Truthy and Falsy",
    "title": "Summary",
    "content": "The table below summarizes what is truthy or falsy in Liquid. |   | truthy | falsy | . | true | • |   | . | false |   | • | . | nil |   | • | . | string | • |   | . | empty string | • |   | . | 0 | • |   | . | integer | • |   | . | float | • |   | . | array | • |   | . | empty array | • |   | . | page | • |   | . | EmptyDrop | • |   | . ",
    "url": "/docs/liquid/truthy-amd-falsy.html#summary",
    
    "relUrl": "/docs/liquid/truthy-amd-falsy.html#summary"
  },"182": {
    "doc": "Truthy and Falsy",
    "title": "Truthy and Falsy",
    "content": " ",
    "url": "/docs/liquid/truthy-amd-falsy.html",
    
    "relUrl": "/docs/liquid/truthy-amd-falsy.html"
  },"183": {
    "doc": "Types",
    "title": "Types",
    "content": "Liquid objects can be one of six types: . | String | Number | Boolean | Nil | Array | EmptyDrop | . You can initialize Liquid variables using assign or capture tags. ",
    "url": "/docs/liquid/types.html#types",
    
    "relUrl": "/docs/liquid/types.html#types"
  },"184": {
    "doc": "Types",
    "title": "String",
    "content": "Strings are sequences of characters wrapped in single or double quotes: . {% assign my_string = \"Hello World!\" %} . Liquid does not convert escape sequences into special characters. ",
    "url": "/docs/liquid/types.html#string",
    
    "relUrl": "/docs/liquid/types.html#string"
  },"185": {
    "doc": "Types",
    "title": "Number",
    "content": "Numbers include floats and integers: . {% assign my_int = 25 %} . {% assign my_float = -39.756 %} . ",
    "url": "/docs/liquid/types.html#number",
    
    "relUrl": "/docs/liquid/types.html#number"
  },"186": {
    "doc": "Types",
    "title": "Boolean",
    "content": "Booleans are either true or false. No quotations are necessary when declaring a boolean: . {% assign foo = true %} . {% assign bar = false %} . ",
    "url": "/docs/liquid/types.html#boolean",
    
    "relUrl": "/docs/liquid/types.html#boolean"
  },"187": {
    "doc": "Types",
    "title": "Nil",
    "content": "Nil is a special empty value that is returned when Liquid code has no results. It is not a string with the characters “nil”. Nil is treated as false in the conditions of if blocks and other Liquid tags that check the truthfulness of a statement. In the following example, if the user does not exist (that is, user returns nil), Liquid will not print the greeting: . {% if user %} Hello {{ user.name }}! {% endif %} . Tags or outputs that return nil will not print anything to the page. Input . The current user is {{ user.name }} . Output . The current user is . ",
    "url": "/docs/liquid/types.html#nil",
    
    "relUrl": "/docs/liquid/types.html#nil"
  },"188": {
    "doc": "Types",
    "title": "Array",
    "content": "Arrays hold lists of variables of any type. Accessing items in arrays . To access all the items in an array, you can loop through each item in the array using an iteration tag. Input . &lt;!-- if site.users = \"Tobi\", \"Laura\", \"Tetsuro\", \"Adam\" --&gt; {% for user in site.users %} {{ user }} {% endfor %} . Output . Tobi Laura Tetsuro Adam . Accessing specific items in arrays . You can use square bracket [ ] notation to access a specific item in an array. Array indexing starts at zero. A negative index will count from the end of the array. Input . &lt;!-- if site.users = \"Tobi\", \"Laura\", \"Tetsuro\", \"Adam\" --&gt; {{ site.users[0] }} {{ site.users[1] }} {{ site.users[-1] }} . Output . Tobi Laura Adam . Initializing arrays . You cannot initialize arrays using only Liquid. You can, however, use the split filter to break a string into an array of substrings. EmptyDrop . An EmptyDrop object is returned if you try to access a deleted object. In the example below, page_1, page_2 and page_3 are all EmptyDrop objects: . {% assign variable = \"hello\" %} {% assign page_1 = pages[variable] %} {% assign page_2 = pages[\"does-not-exist\"] %} {% assign page_3 = pages.this-handle-does-not-exist %} . Checking for emptiness . You can check to see if an object exists or not before you access any of its attributes. {% unless pages == empty %} &lt;h1&gt;{{ pages.frontpage.title }}&lt;/h1&gt; &lt;div&gt;{{ pages.frontpage.content }}&lt;/div&gt; {% endunless %} . Both empty strings and empty arrays will return true if checked for equivalence with empty. ",
    "url": "/docs/liquid/types.html#array",
    
    "relUrl": "/docs/liquid/types.html#array"
  },"189": {
    "doc": "Types",
    "title": "Types",
    "content": " ",
    "url": "/docs/liquid/types.html",
    
    "relUrl": "/docs/liquid/types.html"
  },"190": {
    "doc": "User Guide",
    "title": "World of Workflows User Guiode",
    "content": " ",
    "url": "/docs/userguide/ug.html#world-of-workflows-user-guiode",
    
    "relUrl": "/docs/userguide/ug.html#world-of-workflows-user-guiode"
  },"191": {
    "doc": "User Guide",
    "title": "JavaScript Primer",
    "content": "This primer will provide you with the essential knowledge needed to use JavaScript in World of Workflows. JavaScript is a powerful and versatile scripting language that can be used to enhance your application’s functionality. Variables . Variables are used to store data. To declare a variable, use the `let` or `const` keyword, followed by the variable name. Use `let` when the value can change and `const` when it should remain constant. let variableName = ‘Elsa Workflows’; . const constantVariable = 42; . Data Types . JavaScript has a few basic data types: . | String: Textual data enclosed in single or double quotes. | Number: Numeric data (both integers and floating-point numbers). | Boolean: `true` or `false` values. | Object: A collection of key-value pairs. | Array: An ordered collection of values. | Null: Represents an empty or non-existent value. | Undefined: Represents an uninitialized variable. | . Control Structures . Control structures are used to manage the flow of your code. Some common control structures are: . If statement . Executes a block of code if a specified condition is true. if (condition) { . // Code to be executed . } . If-else statement . Executes one block of code if the condition is true, and another block if it is false. if (condition) { . // Code to be executed if condition is true . } else { . // Code to be executed if condition is false . } . While loop . Executes a block of code as long as the condition is true. while (condition) { . // Code to be executed . } . For loop . Executes a block of code a specific number of times. for (let i = 0; i &lt; count; i++) { . // Code to be executed . } . Functions . Functions are reusable blocks of code that perform a specific task. To define a function, use the `function` keyword, followed by the function name, a list of parameters, and the function body. function functionName(parameter1, parameter2) { . // Code to be executed . } . To call a function, use its name followed by the arguments: . functionName(argument1, argument2); . Objects and Arrays . Objects store key-value pairs, where each key is associated with a value. To create an object, use the following syntax: . const objectName = { . key1: value1, . key2: value2, . }; . Access properties using dot notation or bracket notation: . objectName.key1; // value1 . objectName[‘key2’]; // value2 . Arrays store ordered collections of values. To create an array, use the following syntax: . const arrayName = [value1, value2, value3]; . Access values in an array using their index (zero-based): . arrayName[0]; // value1 . arrayName[1]; // value2 . Working with Strings . Here are some common string operations: . Concatenation . Combine strings using the `+` operator. let combinedString = ‘Hello, ‘ + ‘World!’; . String interpolation . Embed expressions within a string using template literals. let name = ‘Elsa’; . let message = `Hello, ${name}!`; . String methods . JavaScript provides many built-in string methods to manipulate and work with strings. Here is a list of commonly used string methods: . | charAt(index): Returns the character at the specified index. | charCodeAt(index): Returns the Unicode value of the character at the specified index. | concat(str1, str2, …): Concatenates two or more strings and returns the resulting string. | endsWith(searchString, length): Determines if a string ends with the characters of the specified searchString. | includes(searchString, startPosition): Determines if a string contains the specified searchString. | indexOf(searchString, startPosition): Returns the index of the first occurrence of the specified searchString or -1 if not found. | lastIndexOf(searchString, startPosition): Returns the index of the last occurrence of the specified searchString or -1 if not found. | match(regExp): Searches for a match between a regular expression and a string, and returns the matches. | matchAll(regExp): Returns an iterator of all results matching a regular expression in a string. | normalize(form): Returns the Unicode Normalization Form of the string. | padEnd(targetLength, padString): Pads the end of the string with the specified padString to reach the targetLength. | padStart(targetLength, padString): Pads the start of the string with the specified padString to reach the targetLength. | repeat(count): Repeats the string a specified number of times. | replace(searchValue, newValue): Searches for a specified searchValue and replaces it with a newValue. | replaceAll(searchValue, newValue): Searches for all occurrences of a specified searchValue and replaces them with a newValue. | search(regExp): Searches for a match between a regular expression and a string, and returns the index of the match or -1 if not found. | slice(startIndex, endIndex): Extracts a section of the string and returns it as a new string. | split(separator, limit): Splits a string into an array of substrings using a specified separator. | startsWith(searchString, position): Determines if a string starts with the characters of the specified searchString. | substr(startIndex, length): Returns a part of the string from the specified startIndex with the specified length. | substring(startIndex, endIndex): Returns a part of the string between the specified startIndex and endIndex. | toLocaleLowerCase(): Returns the string in lowercase using the host’s current locale. | toLocaleUpperCase(): Returns the string in uppercase using the host’s current locale. | toLowerCase(): Returns the string in lowercase. | toUpperCase(): Returns the string in uppercase. | trim(): Removes whitespace from both ends of a string. | trimStart(): Removes whitespace from the beginning of a string. | trimEnd(): Removes whitespace from the end of a string. | valueOf(): Returns the primitive value of a string object. | . These string methods can help you perform various operations on strings, such as searching, replacing, modifying case, splitting, and more. Keep in mind that strings in JavaScript are immutable; these methods return new strings and do not modify the original string. let text = ‘World of Workflows’; . let lowerCaseText = text.toLowerCase(); // ‘world of workflows’ . let upperCaseText = text.toUpperCase(); // ‘WORLD OF WORKFLOWS’ . let position = text.indexOf(‘Workflows’); // 5 . let slicedText = text.slice(0, 5); // ‘World’ . let replacedText = text.replace(‘Workflows’, ‘App’); // ‘World of App’ . Working with Arrays . Here are some common array operations: . push . Add an element to the end of an array using `push()`: . let array = [1, 2, 3]; . array.push(4); // array becomes [1, 2, 3, 4] . pop . Remove the last element from an array using `pop()`: . let array = [1, 2, 3]; . array.pop(); // array becomes [1, 2] . unshift . Add an element to the beginning of an array using `unshift()`: . let array = [1, 2, 3]; . array.unshift(0); // array becomes [0, 1, 2, 3] . shift . Remove the first element from an array using `shift()`: . let array = [1, 2, 3]; . array.shift(); // array becomes [2, 3] . forEach . Iterate through the elements of an array using a `for` loop or the `forEach()` method: . let array = [1, 2, 3]; . // Using a for loop . for (let i = 0; i &lt; array.length; i++) { . console.log(array[i]); // 1, 2, 3 . } . // Using forEach() . array.forEach((element) =&gt; { . console.log(element); // 1, 2, 3 . }); . Error Handling . To handle errors in JavaScript, you can use the `try…catch` statement: . try { . // Code that might throw an error . } catch (error) { . // Code to handle the error . } . For example, if you want to handle an error when parsing JSON data: . let jsonData = ‘{ “name”: “Workflows”’; . try { . let obj = JSON.parse(jsonData); . console.log(obj.name); // ‘Workflows’ . } catch (error) { . console.error(‘An error occurred:’, error.message); // ‘An error occurred: Unexpected end of JSON input’ . } . This JavaScript primer should help you get started with using JavaScript in your Elsa Workflows application. As you continue to develop your application, you can explore more advanced concepts and techniques, as well as integrate external libraries and APIs to further enhance its capabilities. ",
    "url": "/docs/userguide/ug.html#javascript-primer",
    
    "relUrl": "/docs/userguide/ug.html#javascript-primer"
  },"192": {
    "doc": "User Guide",
    "title": "JavaScript in World of Workflows",
    "content": "The following JavaScript expressions are supported: . Variables . Workflow Variables . Any workflow variable can be accessed directly as if they were a global variable. For example, if the SetVariable activity sets a variable called FirstName to ‘Luke’, it can be accessed as follows: . `Hello ${FirstName}` . Value stored in the variable: . “Hello Luke” . This also works when setting variables using the setVariable() function. Because ultimately, both the SetVariable activity and setVariable() function use the same API under the cover to set a workflow variable. Activity Output . A activity might provide some output which can then be accessed from any other activity using workflow expressions. For example, to access an activity’s output property called Output using a JavaScript expression, you can do so by specifying activities, then the activity name followed by .Output(). Notice that you must invoke the property as if it were a method (i.e. using () at the end). This is due to the way workflow storage providers work, which are potentially asynchronous in nature (such as Azure Blob Storage). For example, if you have an activity named MyActivity, you can access its output as follows: . activities.MyActivity.Output(). If the output is an object, you can access its properties too. For instance, the HTTP Endpoint activity returns the HTTP request as its output which is of type HttpRequestModel. When you name this activity MyHttpEndpoint, you can access the HTTP request Body like this: . activities.MyHttpEndpoint.Output().Body . If you happened to post a JSON document to your HTTP endpoint that looks like this: . { . “MyDocument”: { . “Title”: “About Elsa Workflows” . } . } . Then you can access the Title field like this: . activities.MyHttpEndpoint.Output().Body.MyDocument.Title . If your activity is a direct child of an HTTP Endpoint activity, you can access its output directly via the input variable, which will be an instance of HttpRequestModel. input . Contains the input value that was received as output from the previously executed activity, if any. input: object? . workflowInstanceId . Contains the workflow instance ID of the currently executing workflow. workflowInstanceId: string . workflowDefinitionId . Contains the workflow definition ID of the currently executing workflow. workflowDefinitionId: string . workflowDefinitionVersion . Contains the workflow definition version of the currently executing workflow. workflowDefinitionVersion: number . correlationId . Contains the correlation ID of the currently executing workflow. correlationId: string? . currentCulture . Contains the current culture. currentCulture: CultureInfo . Currently, this value is always set to CultureInfo.InvariantCulture. workflowContext . Contains the workflow context (if any) of the currently executing workflow. workflowContext: object? . ",
    "url": "/docs/userguide/ug.html#javascript-in-world-of-workflows",
    
    "relUrl": "/docs/userguide/ug.html#javascript-in-world-of-workflows"
  },"193": {
    "doc": "User Guide",
    "title": "Common Functions",
    "content": "guid . Generates a new GUID value and returns its string representation. guid(): string . This function is a thin wrapper around the following .NET code: . Guid.NewGuid().ToString(). parseGuid . Parses a string into a GUID value. parseGuid(value: string): Guid . This function is a thin wrapper around the following .NET code: . Guid.Parse(value). setVariable . Sets a workflow variable to the specified value. setVariable(name: string, value: object): void . This function is a thin wrapper around the following .NET code: . activityContext.SetVariable(name, value). getVariable . Returns a workflow variable with the specified name. getVariable(name: string): object . Instead of using getVariable(name: string), you can access workflow variables directly as described above in the Workflow Variables section. This function is a thin wrapper around the following .NET code: . activityContext.GetVariable(name). getConfig . Provides access to a .NET configuration value. getConfig(name: string): string . As an example, let’s say you have the following JSON in appsettings.json: . { . “Elsa”: { . “Smtp”: { . “Host”: “localhost”, . “Port”: 2525 . } . } . } . You can access the configured Port value using the following expression: . getConfig(“Elsa:Smtp:Port”) // returns ‘2525’ . This function is a thin wrapper around the following .NET code: . configuration.GetSection(name).Value . where configuration is an instance of IConfiguration. isNullOrWhiteSpace . Returns true if the specified string is null, empty or consists of white space only, false otherwise. isNullOrWhiteSpace(value: string): boolean . This function is a thin wrapper around the following .NET code: . string.IsNullOrWhiteSpace(value). isNullOrEmpty . Returns true if the specified string is null or empty, false otherwise. isNullOrEmpty(value: string): boolean . This function is a thin wrapper around the following .NET code: . string.IsNullOrEmpty(value). ",
    "url": "/docs/userguide/ug.html#common-functions",
    
    "relUrl": "/docs/userguide/ug.html#common-functions"
  },"194": {
    "doc": "User Guide",
    "title": "Workflow Functions",
    "content": "getWorkflowDefinitionIdByName . Returns the ID of the specified workflow by name. This is useful when for instance you are using the RunWorkflow activity, which requires the ID of the workflow definition to run. getWorkflowDefinitionIdByName(name: string): string? . For example: set the Workflow Definition in a RunWorkflow activity to MyWorkflow : . getWorkflowDefinitionIdByName(‘MyWorkflow’) . getWorkflowDefinitionIdByTag . Returns the ID of the specified workflow by tag. This is useful when for instance you are using the RunWorkflow activity, which requires the ID of the workflow definition to run. getWorkflowDefinitionIdByTag(tag: string): string? . ",
    "url": "/docs/userguide/ug.html#workflow-functions",
    
    "relUrl": "/docs/userguide/ug.html#workflow-functions"
  },"195": {
    "doc": "User Guide",
    "title": "HTTP Functions",
    "content": "queryString . Returns the value of the specified query string parameter. queryString(name: string): string . absoluteUrl . Converts the specified relative path into a fully-qualified absolute URL. absoluteUrl(path: string): string . signalUrl . Generates a fully-qualified absolute signal URL that will trigger the workflow instance from which this function is invoked. signalUrl(signal: string): string . ",
    "url": "/docs/userguide/ug.html#http-functions",
    
    "relUrl": "/docs/userguide/ug.html#http-functions"
  },"196": {
    "doc": "User Guide",
    "title": "Date/Time Functions",
    "content": "instantFromDateTimeUtc . Returns a new Instant object from the specified DateTime value. Make sure that the DateTime value’s Kind property is DateTimeKind.Utc. currentInstant . Returns the current date/time value in the form of a NodaTime’s Instant object. currentInstant(): Instant . currentYear . Returns the current year. currentYear(): number . startOfMonth . Returns the start of the month of the specified instant. If no instant is specified, the current instant is used. startOfMonth(instant: Instant?): LocalDate; . endOfMonth(instant: Instant?) . Returns the end of the month of the specified instant. If no instant is specified, the current instant is used. endOfMonth(instant: Instant?): LocalDate; . startOfPreviousMonth . Returns the start of the previous month of the specified instant. If no instant is specified, the current instant is used. startOfPreviousMonth(instant: Instant?): LocalDate; . plus . Adds the specified Duration to the specified Instant and returns the result. plus(instant: Instant, duration: Duration): Instant . minus . Subtracts the specified Duration from the specified Instant and returns the result. minus(instant: Instant, duration: Duration): Instant . durationFromDays . Returns a duration constructed from the specified number of days. durationFromDays(days: number): Duration . formatInstant . Formats the specified Instant using the specified format string and CultureInfo. If no culture info is provided, CultureInfo.InvariantCulture is used. formatInstant(instant: Instant, format: string, cultureInfo: CultureInfo?): string . localDateFromInstant . Returns the LocalDate portion of the specified Instant. localDateFromInstant(instant: Instant): LocalDate . instantFromLocalDate . Creates an Instant from the specified LocalDate value (start of date). instantFromLocalDate(localDate: LocalDate): Instant . ",
    "url": "/docs/userguide/ug.html#datetime-functions",
    
    "relUrl": "/docs/userguide/ug.html#datetime-functions"
  },"197": {
    "doc": "User Guide",
    "title": "Plugins",
    "content": "Plugins extend the capability of World of Workflows by adding capabilities to the system. At time of printing, the following plugins were available: . | AutoTask – access and work with data and objects in the AutoTask PSA application . | Azure – Manipulate and manage Microsoft Azure environments . | OpenAI – Work with services from OpenAI, including ChatGPT, GPT4, DALL-E, Whisper and more . | Office 365 – Work with Microsoft Office 365 and the Microsoft Graph API . | Xero – Work with the Xero cloud based accounting system . | Utilities – Various utilities to extend world of workflows . | . ",
    "url": "/docs/userguide/ug.html#plugins",
    
    "relUrl": "/docs/userguide/ug.html#plugins"
  },"198": {
    "doc": "User Guide",
    "title": "User Guide",
    "content": " ",
    "url": "/docs/userguide/ug.html",
    
    "relUrl": "/docs/userguide/ug.html"
  },"199": {
    "doc": "Variable",
    "title": "Variable",
    "content": "Variable tags create new Liquid variables. ",
    "url": "/docs/liquid/variable.html#variable",
    
    "relUrl": "/docs/liquid/variable.html#variable"
  },"200": {
    "doc": "Variable",
    "title": "assign",
    "content": "Creates a new named variable. Input . {% assign my_variable = false %} {% if my_variable != true %} This statement is valid. {% endif %} . Output . This statement is valid. Wrap a value in quotations \" to save it as a string variable. Input . {% assign foo = \"bar\" %} {{ foo }} . Output . ## capture Captures the string inside of the opening and closing tags and assigns it to a variable. Variables created using capture are stored as strings. ### Input ```liquid {% capture my_variable %}I am being captured.{% endcapture %} {{ my_variable }} . Output . I am being captured. Using capture, you can create complex strings using other variables created with assign. Input . {% assign favorite_food = \"pizza\" %} {% assign age = 35 %} {% capture about_me %} I am {{ age }} and my favorite food is {{ favorite_food }}. {% endcapture %} {{ about_me }} . Output . I am 35 and my favourite food is pizza. ",
    "url": "/docs/liquid/variable.html#assign",
    
    "relUrl": "/docs/liquid/variable.html#assign"
  },"201": {
    "doc": "Variable",
    "title": "increment",
    "content": "Creates and outputs a new number variable with initial value 0. On subsequent calls, it increases its value by one and outputs the new value. Input . {% increment my_counter %} {% increment my_counter %} {% increment my_counter %} . Output . 0 1 2 . Variables created using increment are independent from variables created using assign or capture. In the example below, a variable named “var” is created using assign. The increment tag is then used several times on a variable with the same name. Note that the increment tag does not affect the value of “var” that was created using assign. Input . {% assign var = 10 %} {% increment var %} {% increment var %} {% increment var %} {{ var }} . ### Output . 0 1 2 10 . ",
    "url": "/docs/liquid/variable.html#increment",
    
    "relUrl": "/docs/liquid/variable.html#increment"
  },"202": {
    "doc": "Variable",
    "title": "decrement",
    "content": "Creates and outputs a new number variable with initial value -1. On subsequent calls, it decreases its value by one and outputs the new value. Input . {% decrement variable %} {% decrement variable %} {% decrement variable %} . Output . -1 -2 -3 . Like increment, variables declared using decrement are independent from variables created using assign or capture. ",
    "url": "/docs/liquid/variable.html#decrement",
    
    "relUrl": "/docs/liquid/variable.html#decrement"
  },"203": {
    "doc": "Variable",
    "title": "Variable",
    "content": " ",
    "url": "/docs/liquid/variable.html",
    
    "relUrl": "/docs/liquid/variable.html"
  },"204": {
    "doc": "Views",
    "title": "Views",
    "content": "Views are a powerful feature in World of Workflows that allow you to create customized, reusable views of your data by defining queries, selecting fields, and specifying the sorting order. With the ability to establish a hierarchy among views, you can create organized, easily accessible menu structures. This chapter will guide you through the process of creating, managing, and organizing views in the User Configurable Database. ",
    "url": "/docs/userguide/views.html",
    
    "relUrl": "/docs/userguide/views.html"
  },"205": {
    "doc": "Views",
    "title": "Overview of Views",
    "content": "Views enable you to: . | Create custom, reusable data views based on specific queries and filters. | Select which fields to display and customize the order in which they appear. | Specify the sorting order for records. | Organize views hierarchically, with top-level views appearing in the main menu and child views accessible via buttons within their parent view. | . ",
    "url": "/docs/userguide/views.html#overview-of-views",
    
    "relUrl": "/docs/userguide/views.html#overview-of-views"
  },"206": {
    "doc": "Views",
    "title": "Creating a new view",
    "content": "To create a new view, follow these steps: . | Navigate to Admin -&gt; Views in World of Workflows. | Click on the Add View button. | Enter a name and a brief description for the view (optional). | Choose the Type from which the View will show the data. | Define the fields which will be shown for the view: . | click the + next to the field name. | Use the = handle to drag the fields to the correct order. | Use the to remove this field from the view. | . | Choose the fields to order the view by clicking the + next to the field name. Use the up and down arrows to select the direction of sorting. | Create a query for the View, using oData Query Syntax . | If applicable, choose a parent view from the Parent View dropdown menu. If no parent is selected, the view will appear in the top menu. | Click Create View to confirm. | . ",
    "url": "/docs/userguide/views.html#creating-a-new-view",
    
    "relUrl": "/docs/userguide/views.html#creating-a-new-view"
  },"207": {
    "doc": "Views",
    "title": "Managing views",
    "content": "To edit or delete an existing view, follow these steps:. | Navigate to Admin -&gt; Views and locate the view you want to modify or remove. | Click on the Edit button to modify the view’s settings, such as the name, description, filters, displayed fields, sorting order, or parent view. | Click Save Changes to confirm any modifications. | . To delete a view, click on the Delete button. Be cautious, as this action is irreversible. ",
    "url": "/docs/userguide/views.html#managing-views",
    
    "relUrl": "/docs/userguide/views.html#managing-views"
  },"208": {
    "doc": "Views",
    "title": "Organizing views with hierarchy",
    "content": "Views can be organized hierarchically, which allows you to create structured navigation and improve the user experience. When a view has a parent, it will appear as a button within that parent view. To create a hierarchical structure, follow these steps: . | While creating or editing a view, select the desired parent view from the Parent View dropdown menu. | Save your changes. The view will now appear as a button within the parent view. | To rearrange the order of child views within a parent view, navigate to the parent view’s settings and use the drag-and-drop functionality to rearrange the child views. | Save your changes. | . By utilizing the Views, you can create customized, organized representations of your data, making it easier for you and your team to access and analyze essential information. Inline Edit . When using a view, you have the same inline and bulk edit/delete features that you have with types. ",
    "url": "/docs/userguide/views.html#organizing-views-with-hierarchy",
    
    "relUrl": "/docs/userguide/views.html#organizing-views-with-hierarchy"
  },"209": {
    "doc": "Views",
    "title": "Data Editor",
    "content": "The data editor is where you can view data, edit fields, run workflows, view tasks and examine history. Clicking any instance of a type or in a view brings up the data editor. View Data . The first tab is called view and here you can view all the data in an instance, and also the date it was first created, the date it was last modified and the reason for the modification. Edit Data . The Edit data tab allows you to edit data associated with this object . Workflows . The Workflows tab allows you to run any workflow which contains the Object Instance Trigger activity which is associated with the type of the object you are viewing. The Workflows section shows workflows you can run using this object as reference and the Workflow Instances section shows workflows you can resume using this object as a reference. Tasks . Tasks can be associated with an object instance and the Tasks tab shows all of the tasks associated with this object. History . The History tab shows all the different modifications to this object over time. ",
    "url": "/docs/userguide/views.html#data-editor",
    
    "relUrl": "/docs/userguide/views.html#data-editor"
  },"210": {
    "doc": "Whitespace Control",
    "title": "Whitespace control",
    "content": "In Liquid, you can include a hyphen in your tag syntax {{-, -}}, {%-, and -%} to strip whitespace from the left or right side of a rendered tag. Normally, even if it doesn’t print text, any line of Liquid in your template will still print a blank line in your rendered HTML: . ",
    "url": "/docs/liquid/whitespace-control.html#whitespace-control",
    
    "relUrl": "/docs/liquid/whitespace-control.html#whitespace-control"
  },"211": {
    "doc": "Whitespace Control",
    "title": "Input",
    "content": "{% assign my_variable = \"tomato\" %} {{ my_variable }} . Notice the blank line before “tomato” in the rendered template: . ",
    "url": "/docs/liquid/whitespace-control.html#input",
    
    "relUrl": "/docs/liquid/whitespace-control.html#input"
  },"212": {
    "doc": "Whitespace Control",
    "title": "Output",
    "content": "tomato . By including a hyphen in your assign closing delimiter, you can strip the whitespace following it from the rendered template: . ",
    "url": "/docs/liquid/whitespace-control.html#output",
    
    "relUrl": "/docs/liquid/whitespace-control.html#output"
  },"213": {
    "doc": "Whitespace Control",
    "title": "Input",
    "content": "{% assign my_variable = \"tomato\" -%} {{ my_variable }} . ",
    "url": "/docs/liquid/whitespace-control.html#input-1",
    
    "relUrl": "/docs/liquid/whitespace-control.html#input-1"
  },"214": {
    "doc": "Whitespace Control",
    "title": "Output",
    "content": "tomato . If you don’t want any of your tags to print whitespace, as a general rule you can add hyphens to both sides of all your tags ({%- and -%}): . ",
    "url": "/docs/liquid/whitespace-control.html#output-1",
    
    "relUrl": "/docs/liquid/whitespace-control.html#output-1"
  },"215": {
    "doc": "Whitespace Control",
    "title": "Input",
    "content": "{% assign username = \"John G. Chalmers-Smith\" %} {% if username and username.size &gt; 10 %} Wow, {{ username }} , you have a long name! {% else %} Hello there! {% endif %} . ",
    "url": "/docs/liquid/whitespace-control.html#input-2",
    
    "relUrl": "/docs/liquid/whitespace-control.html#input-2"
  },"216": {
    "doc": "Whitespace Control",
    "title": "Output without whitespace control",
    "content": "Wow, John G. Chalmers-Smith , you have a long name! . Input . {% assign username = \"John G. Chalmers-Smith\" -%} {%- if username and username.size &gt; 10 -%} Wow, {{ username -}} , you have a long name! {%- else -%} Hello there! {%- endif %} . ",
    "url": "/docs/liquid/whitespace-control.html#output-without-whitespace-control",
    
    "relUrl": "/docs/liquid/whitespace-control.html#output-without-whitespace-control"
  },"217": {
    "doc": "Whitespace Control",
    "title": "Output with whitespace control",
    "content": "Wow, John G. Chalmers-Smith, you have a long name! . ",
    "url": "/docs/liquid/whitespace-control.html#output-with-whitespace-control",
    
    "relUrl": "/docs/liquid/whitespace-control.html#output-with-whitespace-control"
  },"218": {
    "doc": "Whitespace Control",
    "title": "Whitespace Control",
    "content": " ",
    "url": "/docs/liquid/whitespace-control.html",
    
    "relUrl": "/docs/liquid/whitespace-control.html"
  },"219": {
    "doc": "Workflow Details",
    "title": "What are Workflows?",
    "content": "Workflows are like small processes which run in the system to complete a business process. There are many of the structures one might find in programming languages. The section below is for complete novices at programming or telling computers to do things. Computers are machines which follow our instructions exactly. Sometimes it doesn’t seem like this because modern computers are performing billions of operations every second and it is difficult to see what the instructions are. Workflows allows you to write instructions for the computer to follow. These can include sending emails, reading data or writing and saving files. Workflows makes this simpler, by providing a simple graphical interface. Common Settings . Every Activity in Workflows allows you to set the following: . Common Settings . Common settings are the same for every activity. They include Name, Display Name and Description and are used as follows: . | Name: Use this name to refer to this activity in future activities using Liquid or JavaScript. | Display Name – Use this to change how the activity is named in the designer. | Description – Use this to show other workflow developers how this activity is used and what it is for. | . Variables . Variables are temporary places to store information. It’s common to want to store information and retrieve and work with it later. With Workflows, we can define both variables and transient variables which can store all types of data and information. Variables are created with the Set Variable activity. They can also be created in JavaScript using a SetVariable() command. Variables are read using a JavaScript command GetVariable() or with Liquid using a command such as ** . Variables exist only while the workflow is running. To keep the data permanently you will need to write variable to a field in a Type. Flow control . You will use the flow control features in Workflows to link your Activities in Workflows, and provide the logic required to formalise your business process. This chapter will provide an overview of the core Flow Control activities, including Break, For, For Each, Fork, If/Else, Join, Parallel For Each, Switch, While, Set Variable, and Set Transient Variable. JavaScript and Liquid . You can enter information into the Properties of Activities using either the default format (ie just typing in text, numbers or dates. For example, here is the SetVariable activity. It asks for a Variable Name and a Value. You would enter the variable name as normal text. The Value can be entered as either JavaScript, Liquid or Default text. Click on the above the entry box to switch the type of input you need. An example of setting a variable with JavaScript. JavaScript is a powerful language which is simple to learn and provides significant extensibility to the platform. Liquid is simpler and allows the creation of strings from other data. Loops . We often want computers and workflows to repeat themselves. For example we might want the same process to occur for every row of a spreadsheet or every lead in a database. For this we use loops. In workflows we have a several types of loops: . For . The For Loop has a starting number, an ending number and a step. This loop will maintain a counter. On the first pass (iteration), the counter is set to the starting number. On the second iteration, the counter has the step value added to it. The system then compares the counter to the ending number and will only keep going if the counter is less than the ending number. The for loop is useful when we want to count through several things where we know or can easily calculate the starting number or step. For loops can count up (Step &gt;0) or down (Step&lt;0) and the comparison can be any of less than, less than or equal to, greater than and greater then or equal to. The For activity requires an initial value, an end value, and an optional step value. The loop will continue to execute the activities within it until the end value is reached or a Break activity is encountered. The For activity allows you to set the following: . | Start – This is a number which defines the start counter for the loop. This can be entered directly into the activity or calculated using Javascript or Liquid. | End – This is a number which defines the end comparison for the loop. This can be entered directly into the activity or calculated using JavaScript or Liquid. | . For Each . The For Each activity is designed to iterate over a collection of items, such as an array or a list. It will execute the activities within the loop for each item in the collection. The loop will continue until all items have been processed or a Break activity is encountered. Imagine we have a variable with the colors in the rainbow. We might represent it as: . [ . “Red”, . “Orange”, . “Yellow”, . “Green”, . “Blue”, . “Indigo”, . “Violet” . ] . The item above is known as a JSON array. A For Each loop, using this JSON array as the Items,would run through seven times and return “Red”, “Orange” etc until it finished with “Violet”. Parallel For Each . Workflows also has the Parallel For each activity which performs each iteration in parallel, increasing performance as many things happen at the same time. The Parallel For Each activity is similar to the For Each activity. However it deals with each of the items in the collection concurrently. This can improve performance by parallelizing the processing of tasks. Just be aware of any logic problems that this may lead to. Break . The Break activity allows you to exit a loop (e.g., For, For Each, While) prematurely when a certain condition is met. By implementing the Break activity, you can optimize your workflows and prevent unnecessary iterations. The break activity has no need for specific customisable attributes, apart from the standard common and storage sections. The For activity is a loop structure that iterates over a specific range of values. It requires an initial value, an end value, and an optional step value. The loop will continue to execute the activities within it until the end value is reached or a Break activity is encountered. | The For activity allows you to set the following: Start – This is a number which defines the start counter for the loop. This can be entered directly into the activity or calculated using Javascript or Liquid. End – This is a number which defines the end comparison for the loop. This can be entered directly into the activity or calculated using Javascript or Liquid. | . For EachThe For Each activity is designed to iterate over a collection of items, such as an array or a list. It will execute the activities within the loop for each item in the collection. The loop will continue until all items have been processed or a Break activity is encountered. Fork . The Fork activity allows you to create parallel branches in your workflow, running the branches one at a time. The workflow will continue once all branches have completed. This could be represented in a Workflow like this: . If/Else . The If/Else activity provides conditional branching based on a specified condition. If the condition is met, this Activity will run the True branch; otherwise, the activities in the False branch will be executed. Join . The Join activity can be used in conjunction with the Fork activity to synchronize parallel branches. When parallel branches have completed their execution, the workflow will continue at the Join activity, merging the branches back into a single path. Join has a Mode to perform 2 distinct types of Join. WaitAll will ensure that execution of the workflows will wait until all of the branches linked to the join have completed. WaitAny will continue execution of the workflow after the first branch completes. The other branches may continue execution, but the join operation will occur after just 1 branch completes. Parallel For Each . The Parallel For Each activity is similar to the For Each activity but processes items in the collection concurrently. This can improve performance by parallelizing the processing of tasks. Switch . The Switch activity provides multi-way branching based on the value of a specified expression. It allows you to define multiple cases, each with a set of activities that will be executed when the expression matches the case value. This could be represented in a Workflow like this: . While . The While activity is a loop structure that executes activities within the loop as long as a specified condition remains true. The loop will continue until the condition becomes false or a Break activity is encountered. Set Variable . The SetVariable activity is used to create or update a variable within the workflow. It allows you to define a name and assign a value to the variable. Variables created using this activity persist throughout the entire workflow execution. Set Transient Variable . The Set Transient Variable activity is similar to the Set Variable activity but creates variables that exist only for the current iteration of a loop. This can be useful for managing temporary data within loop structures, such as For, For Each, or While loops. Each time the loop executes the Transient Variable will be empty/null. By using these core activities in Workflows, you can create powerful and flexible workflows that model your business processes effectively and efficiently in World of Workflows. Understanding these core activities will help you better design and optimize your workflows to meet the unique requirements of your organization. ",
    "url": "/docs/userguide/workflow-details.html#what-are-workflows",
    
    "relUrl": "/docs/userguide/workflow-details.html#what-are-workflows"
  },"220": {
    "doc": "Workflow Details",
    "title": "Task Management Activities",
    "content": "Task Management activities in Workflows enable the creation, deletion, modification, and retrieval of Tasks within your workflows. This chapter will focus on Task Create, Task Delete, Task Detail Create, Task Update, and Task Details Read activities, with an emphasis on the core Task Create activity. Task Create . The Task Create activity is the central component for creating tasks in Workflows. It allows you to configure various properties for the task, including Title, Description, Severity, Priority, Due Date, Related Object ID, Data Questions, Variable Name, and Branches. | Title: The task’s title, providing a brief and informative description. | Description: A detailed and formatted description of the task, written in Markdown. Markdown is a lightweight markup language that allows you to create formatted text using a simple syntax. It supports formatting elements such as headings, bold, italics, lists, links, and more. For a quick guide on Markdown syntax, you can refer to this Markdown Cheatsheet. | Severity: A numerical value representing the task’s severity or importance. | Priority: A numerical value indicating the task’s priority level. | Due Date: The number of days from when the task is created to when the task is due. | Related Object ID: A reference to a row in any type within the User Configurable Database. | Data Questions: Allows you to add fields from the Type of the Related Object ID and prompt the user to complete them within the task. | Variable Name: Assigns the updated row to a Variable for further use within the workflow. | Branches: Correspond to Buttons in the Task, which can send the workflow down different branches based on the user’s actions. | . Task Delete . The Task Delete activity allows you to remove a task from the system. It requires the task’s unique identifier as input and permanently deletes the specified task. Task Detail Create . The Task Detail Create activity enables you to add additional information or properties to an existing task. This can be useful for providing more context, instructions, or metadata for the task. It requires the task’s unique identifier as input and saves the new details to the task. ",
    "url": "/docs/userguide/workflow-details.html#task-management-activities",
    
    "relUrl": "/docs/userguide/workflow-details.html#task-management-activities"
  },"221": {
    "doc": "Workflow Details",
    "title": "Task Update",
    "content": "The Task Update activity allows you to modify an existing task’s properties, such as its title, description, severity, priority, due date, and related object ID. It requires the Task’s unique identifier as input and saves the updated properties to the Task. Task Details Read . The Task Details Read activity retrieves the details of a task, including its title, description, severity, priority, due date, related object ID, and data questions. It requires the task’s unique identifier as input and outputs the task details as Variables, which can be used later in the workflow. By using these Task Management activities in Workflows, you can seamlessly integrate task-related operations into your business processes, ensuring that your team stays organized and efficient. Understanding these activities will help you better design your workflows and effectively manage tasks in World of Workflows. ",
    "url": "/docs/userguide/workflow-details.html#task-update",
    
    "relUrl": "/docs/userguide/workflow-details.html#task-update"
  },"222": {
    "doc": "Workflow Details",
    "title": "HTTP Activities in Workflows",
    "content": "HTTP activities in Workflows enable seamless integration with external web services and APIs, as well as handling incoming HTTP requests within your workflows. Note: While we call these HTTP activities, they almost always run over https. This chapter will provide an overview of the three primary HTTP activities: HTTP Endpoint, Send HTTP Request, and HTTP Response, along with the Redirect activity. HTTP Endpoint . The HTTP Endpoint activity allows you to handle incoming HTTP requests within your workflow. It supports various HTTP methods, including GET, POST, PUT, DELETE, PATCH, OPTIONS, and HEAD. Key features of the HTTP Endpoint activity include: . | Path: Define a custom path for the endpoint. | Read Content: Choose whether or not to read the request content, and specify the format (e.g., JSON, XML, or plain text). | JSON Schema: In the Advanced tab, you can define a JSON schema for validating incoming request data. | Security: Secure the endpoint by enabling the Authorize option in the Security tab, which restricts access to authorized users. | . Send HTTP Request . The Send HTTP Request activity enables your workflows to interact with external web services and APIs by sending HTTP requests and processing the responses. Key features of the Send HTTP Request activity include: . | HTTP Method: Select the desired HTTP method (e.g., GET, POST, PUT, DELETE, etc.). | URL: Specify the target URL for the request. | Headers: Define any custom headers to include in the request. | Request Body: Provide the request body content, if applicable. | Authorisation: Use Credential Manager to store and manage OAuth and other authorization credentials for secure access to external services, then select the Authorisation here. | . HTTP Response . The HTTP Response activity allows you to send an HTTP response to an HTTP Endpoint within your workflow. It provides options for customizing the response, including the status code, headers, and content. Key features of the HTTP Response activity include: . | Status Code: Select the appropriate HTTP status code for the response. | Headers: Define any custom headers to include in the response. | Content: Provide the response content, which can be in various formats such as JSON, XML, or plain text. | . ",
    "url": "/docs/userguide/workflow-details.html#http-activities-in-workflows",
    
    "relUrl": "/docs/userguide/workflow-details.html#http-activities-in-workflows"
  },"223": {
    "doc": "Workflow Details",
    "title": "Redirect",
    "content": "The Redirect activity writes an HTTP Redirect response, allowing you to redirect the client to a different URL within your workflow. This can be useful for scenarios such as user authentication or navigation between different pages in a web application. Key features of the Redirect activity include: . | URL: Specify the target URL for the redirection. | Permanent: Select for the redirection to be 301 / permanent redirect, deselect for 302 / temporary redirect. | . By leveraging these HTTP activities in Elsa Workflows, you can create powerful and flexible workflows that interact with external web services and APIs, as well as handle incoming HTTP requests efficiently. Understanding these HTTP activities will help you better design and optimize your workflows to meet the unique requirements of your organization in World of Workflows. ",
    "url": "/docs/userguide/workflow-details.html#redirect",
    
    "relUrl": "/docs/userguide/workflow-details.html#redirect"
  },"224": {
    "doc": "Workflow Details",
    "title": "Workflow Details",
    "content": " ",
    "url": "/docs/userguide/workflow-details.html",
    
    "relUrl": "/docs/userguide/workflow-details.html"
  },"225": {
    "doc": "Working with a Task",
    "title": "Working with a Task",
    "content": "When working with a task, click the task. You can read the instructions, complete data, unassign the task or complete the task with one or more answers. ",
    "url": "/docs/tasks/working-with-a-task.html",
    
    "relUrl": "/docs/tasks/working-with-a-task.html"
  },"226": {
    "doc": "Working with a Task",
    "title": "Header",
    "content": "The Task header shows the Task Title and the Task Id. The Task Id is a number. ",
    "url": "/docs/tasks/working-with-a-task.html#header",
    
    "relUrl": "/docs/tasks/working-with-a-task.html#header"
  },"227": {
    "doc": "Working with a Task",
    "title": "Description",
    "content": "Below the task header is the task description. This is formatted text which can include links, images, tables and more. This is created by the workflow developer and contains instructions for you to complete the task. Every task can be different, so always read the instructions! . ",
    "url": "/docs/tasks/working-with-a-task.html#description",
    
    "relUrl": "/docs/tasks/working-with-a-task.html#description"
  },"228": {
    "doc": "Working with a Task",
    "title": "Details",
    "content": "Directly below the description is a set of data for you to edit or complete. This is created by the workflow developer and can be anything from a simple text field to a complex form. Every task can be different, so always read the instructions! . | If you change the data, you must click Submit to save it. | If you make a mistake, click Cancel. | If you no longer want to work with this task, click Unassign to remove it from your queue. | . ",
    "url": "/docs/tasks/working-with-a-task.html#details",
    
    "relUrl": "/docs/tasks/working-with-a-task.html#details"
  },"229": {
    "doc": "Working with a Task",
    "title": "Task Choices",
    "content": "Below this are the task choices. These are choices on how you wish to complete this task. These are chosen by the task developer. When you click one of these buttons, the task will dissapear and the process will continue. ",
    "url": "/docs/tasks/working-with-a-task.html#task-choices",
    
    "relUrl": "/docs/tasks/working-with-a-task.html#task-choices"
  },"230": {
    "doc": "Working with a Task",
    "title": "Task Information",
    "content": "Finally you can see information on this task. ",
    "url": "/docs/tasks/working-with-a-task.html#task-information",
    
    "relUrl": "/docs/tasks/working-with-a-task.html#task-information"
  },"231": {
    "doc": "Working with Tasks",
    "title": "Working with Tasks",
    "content": "One of the most common activities in a workflow is to perform a task. A task is an activity that requires a user to perform some action. For example, a task could be to review a document, approve a purchase order, or to enter a customer’s credit card information. A task can be assigned to a user or a group of users. A task can also be assigned to a user based on a capability. For example, a task could be assigned to a user with the capability of “Approve Purchase Orders”. Tasks allow you to display diagrams, instructions, receieve data from the end user and create custom buttons for the user to press which you can use to control the flow of the workflow. ",
    "url": "/docs/workflow-development/working-with-tasks.html",
    
    "relUrl": "/docs/workflow-development/working-with-tasks.html"
  },"232": {
    "doc": "Working with Tasks",
    "title": "Creating a Task",
    "content": "There are three ways to create a task in World of Workflows anbd tach of these are under the tasks activities. These are: . | Simple Task Create and Wait - The most flexible option, this creates a Task and then waits for the user to respond to it. | Task Create and Wait - More limited and simpler than Simple Task Create and Wait, this creates a task and waits for the user to respond to it. | Task Create - This creates a task and continues with the workflow. | . In this document we will focus on Simple Task Create and Wait. Once you have added your Simple Task Create and Wait activity, Right Click and Choose Edit. Enter the information as shown below: . | Title - This is the title of the task and is used for end users to get an idea of what the task entails. This can be created using plain text, Liquid or Javascript. | Task Description - The Task Description is written in Markdown and also supports MermaidJS Diagrams. The text for this can be created using plain text, Liquid or Javascript. Use the description to provide detailed instructions for your end users on how to complete the task. We recommend having all the data here for the user to complete the task without referring to other systems. | Severity - This is a number from 1 to 3 which describes the severity of the task. The higer the severity, the nearer the top of task lists this task appears. This can be created using plain text, Liquid or Javascript. | Priority - This is a number from 1 to 3 which describes the priority of the task. The higer the priority, the nearer the top of task lists this task appears. his can be created using plain text, Liquid or Javascript. | Due - This is the number of days before the task times out. On time out, the workflow will stop waiting and will proceed down the timeout branch. his can be created using plain text, Liquid or Javascript. | Related Object Id - If you wish the user to update an object in the database as part of the task, then you will need to set the related Object id. This can be set from the input variable when starting a workflow from the UI or from some other method. his can be created using plain text, Liquid or Javascript. | Data Questions - These are set by the syntax XXXX~YYYY Note no spaces. This defines the fields from the type (from the Related Object Id above) that you wish the user to complete as a part of the workflow. These input boxes appear directly below the description of a task. | Unique Drop Downs - Not available in this version. | Variable Name - When entered, the results of the modified Related Object will be placed into this workflow variable which will create a new variable if one doesn’t already exist. This can be used to update the object in the database. his can be created using plain text, Liquid or Javascript. | Branches - These are entered as tags, and you can press Enter and add as many tags as you want. These present the user with buttons they can click which direct the workflow down a specific path. This can be created using plain text, Liquid or Javascript. | . See the example below for a completed task definition . This example gives the following result to the end user: . ",
    "url": "/docs/workflow-development/working-with-tasks.html#creating-a-task",
    
    "relUrl": "/docs/workflow-development/working-with-tasks.html#creating-a-task"
  }
}
